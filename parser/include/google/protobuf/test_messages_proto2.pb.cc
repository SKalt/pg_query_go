// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/test_messages_proto2.proto

#include "google/protobuf/test_messages_proto2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForeignMessageProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_TestAllTypesProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_Data_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MessageSetCorrectExtension1_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MessageSetCorrectExtension2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownToTestAllTypes_OptionalGroup_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
namespace protobuf_test_messages {
namespace proto2 {
class TestAllTypesProto2_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_NestedMessage> _instance;
} _TestAllTypesProto2_NestedMessage_default_instance_;
class TestAllTypesProto2_MapInt32Int32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapInt32Int32Entry_DoNotUse> _instance;
} _TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapInt64Int64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapInt64Int64Entry_DoNotUse> _instance;
} _TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse> _instance;
} _TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse> _instance;
} _TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse> _instance;
} _TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse> _instance;
} _TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse> _instance;
} _TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse> _instance;
} _TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse> _instance;
} _TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse> _instance;
} _TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapInt32FloatEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapInt32FloatEntry_DoNotUse> _instance;
} _TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse> _instance;
} _TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapBoolBoolEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapBoolBoolEntry_DoNotUse> _instance;
} _TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapStringStringEntry_DoNotUse> _instance;
} _TestAllTypesProto2_MapStringStringEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringBytesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapStringBytesEntry_DoNotUse> _instance;
} _TestAllTypesProto2_MapStringBytesEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse> _instance;
} _TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse> _instance;
} _TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse> _instance;
} _TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse> _instance;
} _TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_Data> _instance;
} _TestAllTypesProto2_Data_default_instance_;
class TestAllTypesProto2_MessageSetCorrectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MessageSetCorrect> _instance;
} _TestAllTypesProto2_MessageSetCorrect_default_instance_;
class TestAllTypesProto2_MessageSetCorrectExtension1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MessageSetCorrectExtension1> _instance;
} _TestAllTypesProto2_MessageSetCorrectExtension1_default_instance_;
class TestAllTypesProto2_MessageSetCorrectExtension2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2_MessageSetCorrectExtension2> _instance;
} _TestAllTypesProto2_MessageSetCorrectExtension2_default_instance_;
class TestAllTypesProto2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto2> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 oneof_uint32_;
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* oneof_nested_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
  bool oneof_bool_;
  ::PROTOBUF_NAMESPACE_ID::uint64 oneof_uint64_;
  float oneof_float_;
  double oneof_double_;
  int oneof_enum_;
} _TestAllTypesProto2_default_instance_;
class ForeignMessageProto2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForeignMessageProto2> _instance;
} _ForeignMessageProto2_default_instance_;
class UnknownToTestAllTypes_OptionalGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnknownToTestAllTypes_OptionalGroup> _instance;
} _UnknownToTestAllTypes_OptionalGroup_default_instance_;
class UnknownToTestAllTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnknownToTestAllTypes> _instance;
} _UnknownToTestAllTypes_default_instance_;
}  // namespace proto2
}  // namespace protobuf_test_messages
static void InitDefaultsscc_info_ForeignMessageProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_ForeignMessageProto2_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::ForeignMessageProto2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_test_messages::proto2::ForeignMessageProto2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForeignMessageProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForeignMessageProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_NestedMessage_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse();
  }
  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage::InitAsDefaultInstance();
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::InitAsDefaultInstance();
  ::protobuf_test_messages::proto2::TestAllTypesProto2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_TestAllTypesProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 20, 0, InitDefaultsscc_info_TestAllTypesProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {
      &scc_info_ForeignMessageProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_TestAllTypesProto2_Data_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,}};

static void InitDefaultsscc_info_TestAllTypesProto2_Data_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_Data_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_Data_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_Data_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringBytesEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {
      &scc_info_ForeignMessageProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringStringEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MessageSetCorrect_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MessageSetCorrect_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MessageSetCorrect_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MessageSetCorrect_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MessageSetCorrectExtension1_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MessageSetCorrectExtension1_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MessageSetCorrectExtension1_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MessageSetCorrectExtension1_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto2_MessageSetCorrectExtension2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_TestAllTypesProto2_MessageSetCorrectExtension2_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto2_MessageSetCorrectExtension2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto2_MessageSetCorrectExtension2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static void InitDefaultsscc_info_UnknownToTestAllTypes_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_UnknownToTestAllTypes_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::UnknownToTestAllTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_test_messages::proto2::UnknownToTestAllTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UnknownToTestAllTypes_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UnknownToTestAllTypes_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {
      &scc_info_ForeignMessageProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
      &scc_info_UnknownToTestAllTypes_OptionalGroup_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,}};

static void InitDefaultsscc_info_UnknownToTestAllTypes_OptionalGroup_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto2::_UnknownToTestAllTypes_OptionalGroup_default_instance_;
    new (ptr) ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownToTestAllTypes_OptionalGroup_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnknownToTestAllTypes_OptionalGroup_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage, corecursive_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_Data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_Data, group_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_Data, group_uint32_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1, str_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2, i_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _extensions_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, optional_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, recursive_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, repeated_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, packed_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, unpacked_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_int32_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_int64_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_uint32_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_uint64_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_sint32_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_sint64_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_fixed32_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_fixed64_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_sfixed32_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_sfixed64_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_int32_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_int32_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_bool_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_string_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_string_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_string_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_string_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_string_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, map_string_foreign_enum_),
  offsetof(::protobuf_test_messages::proto2::TestAllTypesProto2DefaultTypeInternal, oneof_uint32_),
  offsetof(::protobuf_test_messages::proto2::TestAllTypesProto2DefaultTypeInternal, oneof_nested_message_),
  offsetof(::protobuf_test_messages::proto2::TestAllTypesProto2DefaultTypeInternal, oneof_string_),
  offsetof(::protobuf_test_messages::proto2::TestAllTypesProto2DefaultTypeInternal, oneof_bytes_),
  offsetof(::protobuf_test_messages::proto2::TestAllTypesProto2DefaultTypeInternal, oneof_bool_),
  offsetof(::protobuf_test_messages::proto2::TestAllTypesProto2DefaultTypeInternal, oneof_uint64_),
  offsetof(::protobuf_test_messages::proto2::TestAllTypesProto2DefaultTypeInternal, oneof_float_),
  offsetof(::protobuf_test_messages::proto2::TestAllTypesProto2DefaultTypeInternal, oneof_double_),
  offsetof(::protobuf_test_messages::proto2::TestAllTypesProto2DefaultTypeInternal, oneof_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, data_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, fieldname1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field_name2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _field_name3_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field__name4__),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field0name5_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field_0_name6_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, fieldname7_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, fieldname8_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field_name9_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field_name10_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field_name11_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field_name12_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, __field_name13_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, __field_name14_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field__name15_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field__name16_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field_name17___),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, field_name18___),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, oneof_field_),
  9,
  8,
  10,
  11,
  13,
  12,
  14,
  15,
  17,
  16,
  18,
  19,
  20,
  0,
  1,
  4,
  5,
  21,
  23,
  2,
  3,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  7,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  22,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::ForeignMessageProto2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::ForeignMessageProto2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::ForeignMessageProto2, c_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, optionalgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, repeated_int32_),
  3,
  0,
  1,
  2,
  4,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage)},
  { 9, 16, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse)},
  { 18, 25, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse)},
  { 27, 34, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse)},
  { 36, 43, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse)},
  { 45, 52, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse)},
  { 54, 61, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse)},
  { 63, 70, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse)},
  { 72, 79, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse)},
  { 81, 88, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse)},
  { 90, 97, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse)},
  { 99, 106, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse)},
  { 108, 115, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse)},
  { 117, 124, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse)},
  { 126, 133, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse)},
  { 135, 142, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse)},
  { 144, 151, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse)},
  { 153, 160, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse)},
  { 162, 169, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse)},
  { 171, 178, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse)},
  { 180, 187, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_Data)},
  { 189, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect)},
  { 194, 200, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1)},
  { 201, 207, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2)},
  { 208, 332, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2)},
  { 450, 456, sizeof(::protobuf_test_messages::proto2::ForeignMessageProto2)},
  { 457, 463, sizeof(::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup)},
  { 464, 475, sizeof(::protobuf_test_messages::proto2::UnknownToTestAllTypes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringBytesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MessageSetCorrect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MessageSetCorrectExtension1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_MessageSetCorrectExtension2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_ForeignMessageProto2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_UnknownToTestAllTypes_OptionalGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto2::_UnknownToTestAllTypes_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*google/protobuf/test_messages_proto2.p"
  "roto\022\035protobuf_test_messages.proto2\"\3769\n\022"
  "TestAllTypesProto2\022\026\n\016optional_int32\030\001 \001"
  "(\005\022\026\n\016optional_int64\030\002 \001(\003\022\027\n\017optional_u"
  "int32\030\003 \001(\r\022\027\n\017optional_uint64\030\004 \001(\004\022\027\n\017"
  "optional_sint32\030\005 \001(\021\022\027\n\017optional_sint64"
  "\030\006 \001(\022\022\030\n\020optional_fixed32\030\007 \001(\007\022\030\n\020opti"
  "onal_fixed64\030\010 \001(\006\022\031\n\021optional_sfixed32\030"
  "\t \001(\017\022\031\n\021optional_sfixed64\030\n \001(\020\022\026\n\016opti"
  "onal_float\030\013 \001(\002\022\027\n\017optional_double\030\014 \001("
  "\001\022\025\n\roptional_bool\030\r \001(\010\022\027\n\017optional_str"
  "ing\030\016 \001(\t\022\026\n\016optional_bytes\030\017 \001(\014\022`\n\027opt"
  "ional_nested_message\030\022 \001(\0132\?.protobuf_te"
  "st_messages.proto2.TestAllTypesProto2.Ne"
  "stedMessage\022U\n\030optional_foreign_message\030"
  "\023 \001(\01323.protobuf_test_messages.proto2.Fo"
  "reignMessageProto2\022Z\n\024optional_nested_en"
  "um\030\025 \001(\0162<.protobuf_test_messages.proto2"
  ".TestAllTypesProto2.NestedEnum\022O\n\025option"
  "al_foreign_enum\030\026 \001(\01620.protobuf_test_me"
  "ssages.proto2.ForeignEnumProto2\022!\n\025optio"
  "nal_string_piece\030\030 \001(\tB\002\010\002\022\031\n\roptional_c"
  "ord\030\031 \001(\tB\002\010\001\022L\n\021recursive_message\030\033 \001(\013"
  "21.protobuf_test_messages.proto2.TestAll"
  "TypesProto2\022\026\n\016repeated_int32\030\037 \003(\005\022\026\n\016r"
  "epeated_int64\030  \003(\003\022\027\n\017repeated_uint32\030!"
  " \003(\r\022\027\n\017repeated_uint64\030\" \003(\004\022\027\n\017repeate"
  "d_sint32\030# \003(\021\022\027\n\017repeated_sint64\030$ \003(\022\022"
  "\030\n\020repeated_fixed32\030% \003(\007\022\030\n\020repeated_fi"
  "xed64\030& \003(\006\022\031\n\021repeated_sfixed32\030\' \003(\017\022\031"
  "\n\021repeated_sfixed64\030( \003(\020\022\026\n\016repeated_fl"
  "oat\030) \003(\002\022\027\n\017repeated_double\030* \003(\001\022\025\n\rre"
  "peated_bool\030+ \003(\010\022\027\n\017repeated_string\030, \003"
  "(\t\022\026\n\016repeated_bytes\030- \003(\014\022`\n\027repeated_n"
  "ested_message\0300 \003(\0132\?.protobuf_test_mess"
  "ages.proto2.TestAllTypesProto2.NestedMes"
  "sage\022U\n\030repeated_foreign_message\0301 \003(\01323"
  ".protobuf_test_messages.proto2.ForeignMe"
  "ssageProto2\022Z\n\024repeated_nested_enum\0303 \003("
  "\0162<.protobuf_test_messages.proto2.TestAl"
  "lTypesProto2.NestedEnum\022O\n\025repeated_fore"
  "ign_enum\0304 \003(\01620.protobuf_test_messages."
  "proto2.ForeignEnumProto2\022!\n\025repeated_str"
  "ing_piece\0306 \003(\tB\002\010\002\022\031\n\rrepeated_cord\0307 \003"
  "(\tB\002\010\001\022\030\n\014packed_int32\030K \003(\005B\002\020\001\022\030\n\014pack"
  "ed_int64\030L \003(\003B\002\020\001\022\031\n\rpacked_uint32\030M \003("
  "\rB\002\020\001\022\031\n\rpacked_uint64\030N \003(\004B\002\020\001\022\031\n\rpack"
  "ed_sint32\030O \003(\021B\002\020\001\022\031\n\rpacked_sint64\030P \003"
  "(\022B\002\020\001\022\032\n\016packed_fixed32\030Q \003(\007B\002\020\001\022\032\n\016pa"
  "cked_fixed64\030R \003(\006B\002\020\001\022\033\n\017packed_sfixed3"
  "2\030S \003(\017B\002\020\001\022\033\n\017packed_sfixed64\030T \003(\020B\002\020\001"
  "\022\030\n\014packed_float\030U \003(\002B\002\020\001\022\031\n\rpacked_dou"
  "ble\030V \003(\001B\002\020\001\022\027\n\013packed_bool\030W \003(\010B\002\020\001\022\\"
  "\n\022packed_nested_enum\030X \003(\0162<.protobuf_te"
  "st_messages.proto2.TestAllTypesProto2.Ne"
  "stedEnumB\002\020\001\022\032\n\016unpacked_int32\030Y \003(\005B\002\020\000"
  "\022\032\n\016unpacked_int64\030Z \003(\003B\002\020\000\022\033\n\017unpacked"
  "_uint32\030[ \003(\rB\002\020\000\022\033\n\017unpacked_uint64\030\\ \003"
  "(\004B\002\020\000\022\033\n\017unpacked_sint32\030] \003(\021B\002\020\000\022\033\n\017u"
  "npacked_sint64\030^ \003(\022B\002\020\000\022\034\n\020unpacked_fix"
  "ed32\030_ \003(\007B\002\020\000\022\034\n\020unpacked_fixed64\030` \003(\006"
  "B\002\020\000\022\035\n\021unpacked_sfixed32\030a \003(\017B\002\020\000\022\035\n\021u"
  "npacked_sfixed64\030b \003(\020B\002\020\000\022\032\n\016unpacked_f"
  "loat\030c \003(\002B\002\020\000\022\033\n\017unpacked_double\030d \003(\001B"
  "\002\020\000\022\031\n\runpacked_bool\030e \003(\010B\002\020\000\022^\n\024unpack"
  "ed_nested_enum\030f \003(\0162<.protobuf_test_mes"
  "sages.proto2.TestAllTypesProto2.NestedEn"
  "umB\002\020\000\022]\n\017map_int32_int32\0308 \003(\0132D.protob"
  "uf_test_messages.proto2.TestAllTypesProt"
  "o2.MapInt32Int32Entry\022]\n\017map_int64_int64"
  "\0309 \003(\0132D.protobuf_test_messages.proto2.T"
  "estAllTypesProto2.MapInt64Int64Entry\022a\n\021"
  "map_uint32_uint32\030: \003(\0132F.protobuf_test_"
  "messages.proto2.TestAllTypesProto2.MapUi"
  "nt32Uint32Entry\022a\n\021map_uint64_uint64\030; \003"
  "(\0132F.protobuf_test_messages.proto2.TestA"
  "llTypesProto2.MapUint64Uint64Entry\022a\n\021ma"
  "p_sint32_sint32\030< \003(\0132F.protobuf_test_me"
  "ssages.proto2.TestAllTypesProto2.MapSint"
  "32Sint32Entry\022a\n\021map_sint64_sint64\030= \003(\013"
  "2F.protobuf_test_messages.proto2.TestAll"
  "TypesProto2.MapSint64Sint64Entry\022e\n\023map_"
  "fixed32_fixed32\030> \003(\0132H.protobuf_test_me"
  "ssages.proto2.TestAllTypesProto2.MapFixe"
  "d32Fixed32Entry\022e\n\023map_fixed64_fixed64\030\?"
  " \003(\0132H.protobuf_test_messages.proto2.Tes"
  "tAllTypesProto2.MapFixed64Fixed64Entry\022i"
  "\n\025map_sfixed32_sfixed32\030@ \003(\0132J.protobuf"
  "_test_messages.proto2.TestAllTypesProto2"
  ".MapSfixed32Sfixed32Entry\022i\n\025map_sfixed6"
  "4_sfixed64\030A \003(\0132J.protobuf_test_message"
  "s.proto2.TestAllTypesProto2.MapSfixed64S"
  "fixed64Entry\022]\n\017map_int32_float\030B \003(\0132D."
  "protobuf_test_messages.proto2.TestAllTyp"
  "esProto2.MapInt32FloatEntry\022_\n\020map_int32"
  "_double\030C \003(\0132E.protobuf_test_messages.p"
  "roto2.TestAllTypesProto2.MapInt32DoubleE"
  "ntry\022Y\n\rmap_bool_bool\030D \003(\0132B.protobuf_t"
  "est_messages.proto2.TestAllTypesProto2.M"
  "apBoolBoolEntry\022a\n\021map_string_string\030E \003"
  "(\0132F.protobuf_test_messages.proto2.TestA"
  "llTypesProto2.MapStringStringEntry\022_\n\020ma"
  "p_string_bytes\030F \003(\0132E.protobuf_test_mes"
  "sages.proto2.TestAllTypesProto2.MapStrin"
  "gBytesEntry\022p\n\031map_string_nested_message"
  "\030G \003(\0132M.protobuf_test_messages.proto2.T"
  "estAllTypesProto2.MapStringNestedMessage"
  "Entry\022r\n\032map_string_foreign_message\030H \003("
  "\0132N.protobuf_test_messages.proto2.TestAl"
  "lTypesProto2.MapStringForeignMessageEntr"
  "y\022j\n\026map_string_nested_enum\030I \003(\0132J.prot"
  "obuf_test_messages.proto2.TestAllTypesPr"
  "oto2.MapStringNestedEnumEntry\022l\n\027map_str"
  "ing_foreign_enum\030J \003(\0132K.protobuf_test_m"
  "essages.proto2.TestAllTypesProto2.MapStr"
  "ingForeignEnumEntry\022\026\n\014oneof_uint32\030o \001("
  "\rH\000\022_\n\024oneof_nested_message\030p \001(\0132\?.prot"
  "obuf_test_messages.proto2.TestAllTypesPr"
  "oto2.NestedMessageH\000\022\026\n\014oneof_string\030q \001"
  "(\tH\000\022\025\n\013oneof_bytes\030r \001(\014H\000\022\024\n\noneof_boo"
  "l\030s \001(\010H\000\022\026\n\014oneof_uint64\030t \001(\004H\000\022\025\n\013one"
  "of_float\030u \001(\002H\000\022\026\n\014oneof_double\030v \001(\001H\000"
  "\022R\n\noneof_enum\030w \001(\0162<.protobuf_test_mes"
  "sages.proto2.TestAllTypesProto2.NestedEn"
  "umH\000\022E\n\004data\030\311\001 \001(\n26.protobuf_test_mess"
  "ages.proto2.TestAllTypesProto2.Data\022\023\n\nf"
  "ieldname1\030\221\003 \001(\005\022\024\n\013field_name2\030\222\003 \001(\005\022\025"
  "\n\014_field_name3\030\223\003 \001(\005\022\026\n\rfield__name4_\030\224"
  "\003 \001(\005\022\024\n\013field0name5\030\225\003 \001(\005\022\026\n\rfield_0_n"
  "ame6\030\226\003 \001(\005\022\023\n\nfieldName7\030\227\003 \001(\005\022\023\n\nFiel"
  "dName8\030\230\003 \001(\005\022\024\n\013field_Name9\030\231\003 \001(\005\022\025\n\014F"
  "ield_Name10\030\232\003 \001(\005\022\025\n\014FIELD_NAME11\030\233\003 \001("
  "\005\022\025\n\014FIELD_name12\030\234\003 \001(\005\022\027\n\016__field_name"
  "13\030\235\003 \001(\005\022\027\n\016__Field_name14\030\236\003 \001(\005\022\026\n\rfi"
  "eld__name15\030\237\003 \001(\005\022\026\n\rfield__Name16\030\240\003 \001"
  "(\005\022\027\n\016field_name17__\030\241\003 \001(\005\022\027\n\016Field_nam"
  "e18__\030\242\003 \001(\005\032b\n\rNestedMessage\022\t\n\001a\030\001 \001(\005"
  "\022F\n\013corecursive\030\002 \001(\01321.protobuf_test_me"
  "ssages.proto2.TestAllTypesProto2\0324\n\022MapI"
  "nt32Int32Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001"
  "(\005:\0028\001\0324\n\022MapInt64Int64Entry\022\013\n\003key\030\001 \001("
  "\003\022\r\n\005value\030\002 \001(\003:\0028\001\0326\n\024MapUint32Uint32E"
  "ntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\0326\n\024"
  "MapUint64Uint64Entry\022\013\n\003key\030\001 \001(\004\022\r\n\005val"
  "ue\030\002 \001(\004:\0028\001\0326\n\024MapSint32Sint32Entry\022\013\n\003"
  "key\030\001 \001(\021\022\r\n\005value\030\002 \001(\021:\0028\001\0326\n\024MapSint6"
  "4Sint64Entry\022\013\n\003key\030\001 \001(\022\022\r\n\005value\030\002 \001(\022"
  ":\0028\001\0328\n\026MapFixed32Fixed32Entry\022\013\n\003key\030\001 "
  "\001(\007\022\r\n\005value\030\002 \001(\007:\0028\001\0328\n\026MapFixed64Fixe"
  "d64Entry\022\013\n\003key\030\001 \001(\006\022\r\n\005value\030\002 \001(\006:\0028\001"
  "\032:\n\030MapSfixed32Sfixed32Entry\022\013\n\003key\030\001 \001("
  "\017\022\r\n\005value\030\002 \001(\017:\0028\001\032:\n\030MapSfixed64Sfixe"
  "d64Entry\022\013\n\003key\030\001 \001(\020\022\r\n\005value\030\002 \001(\020:\0028\001"
  "\0324\n\022MapInt32FloatEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005v"
  "alue\030\002 \001(\002:\0028\001\0325\n\023MapInt32DoubleEntry\022\013\n"
  "\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\001:\0028\001\0322\n\020MapBool"
  "BoolEntry\022\013\n\003key\030\001 \001(\010\022\r\n\005value\030\002 \001(\010:\0028"
  "\001\0326\n\024MapStringStringEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001\0325\n\023MapStringBytesEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\032~\n\033MapS"
  "tringNestedMessageEntry\022\013\n\003key\030\001 \001(\t\022N\n\005"
  "value\030\002 \001(\0132\?.protobuf_test_messages.pro"
  "to2.TestAllTypesProto2.NestedMessage:\0028\001"
  "\032s\n\034MapStringForeignMessageEntry\022\013\n\003key\030"
  "\001 \001(\t\022B\n\005value\030\002 \001(\01323.protobuf_test_mes"
  "sages.proto2.ForeignMessageProto2:\0028\001\032x\n"
  "\030MapStringNestedEnumEntry\022\013\n\003key\030\001 \001(\t\022K"
  "\n\005value\030\002 \001(\0162<.protobuf_test_messages.p"
  "roto2.TestAllTypesProto2.NestedEnum:\0028\001\032"
  "m\n\031MapStringForeignEnumEntry\022\013\n\003key\030\001 \001("
  "\t\022\?\n\005value\030\002 \001(\01620.protobuf_test_message"
  "s.proto2.ForeignEnumProto2:\0028\001\0323\n\004Data\022\024"
  "\n\013group_int32\030\312\001 \001(\005\022\025\n\014group_uint32\030\313\001 "
  "\001(\r\032!\n\021MessageSetCorrect*\010\010\004\020\377\377\377\377\007:\002\010\001\032\340"
  "\001\n\033MessageSetCorrectExtension1\022\013\n\003str\030\031 "
  "\001(\t2\263\001\n\025message_set_extension\022C.protobuf"
  "_test_messages.proto2.TestAllTypesProto2"
  ".MessageSetCorrect\030\371\273^ \001(\0132M.protobuf_te"
  "st_messages.proto2.TestAllTypesProto2.Me"
  "ssageSetCorrectExtension1\032\337\001\n\033MessageSet"
  "CorrectExtension2\022\t\n\001i\030\t \001(\0052\264\001\n\025message"
  "_set_extension\022C.protobuf_test_messages."
  "proto2.TestAllTypesProto2.MessageSetCorr"
  "ect\030\220\263\374\001 \001(\0132M.protobuf_test_messages.pr"
  "oto2.TestAllTypesProto2.MessageSetCorrec"
  "tExtension2\"9\n\nNestedEnum\022\007\n\003FOO\020\000\022\007\n\003BA"
  "R\020\001\022\007\n\003BAZ\020\002\022\020\n\003NEG\020\377\377\377\377\377\377\377\377\377\001*\005\010x\020\311\001B\r\n"
  "\013oneof_fieldJ\006\010\350\007\020\220N\"!\n\024ForeignMessagePr"
  "oto2\022\t\n\001c\030\001 \001(\005\"\301\002\n\025UnknownToTestAllType"
  "s\022\027\n\016optional_int32\030\351\007 \001(\005\022\030\n\017optional_s"
  "tring\030\352\007 \001(\t\022L\n\016nested_message\030\353\007 \001(\01323."
  "protobuf_test_messages.proto2.ForeignMes"
  "sageProto2\022Z\n\roptionalgroup\030\354\007 \001(\n2B.pro"
  "tobuf_test_messages.proto2.UnknownToTest"
  "AllTypes.OptionalGroup\022\026\n\roptional_bool\030"
  "\356\007 \001(\010\022\027\n\016repeated_int32\030\363\007 \003(\005\032\032\n\rOptio"
  "nalGroup\022\t\n\001a\030\001 \001(\005*F\n\021ForeignEnumProto2"
  "\022\017\n\013FOREIGN_FOO\020\000\022\017\n\013FOREIGN_BAR\020\001\022\017\n\013FO"
  "REIGN_BAZ\020\002:J\n\017extension_int32\0221.protobu"
  "f_test_messages.proto2.TestAllTypesProto"
  "2\030x \001(\005B/\n(com.google.protobuf_test_mess"
  "ages.proto2H\001\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_sccs[26] = {
  &scc_info_ForeignMessageProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_Data_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MessageSetCorrect_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MessageSetCorrectExtension1_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_TestAllTypesProto2_MessageSetCorrectExtension2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_UnknownToTestAllTypes_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
  &scc_info_UnknownToTestAllTypes_OptionalGroup_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto = {
  false, false, descriptor_table_protodef_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto, "google/protobuf/test_messages_proto2.proto", 8056,
  &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once, descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_sccs, descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_deps, 26, 0,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto, 28, file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto, file_level_service_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto)), true);
namespace protobuf_test_messages {
namespace proto2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestAllTypesProto2_NestedEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[0];
}
bool TestAllTypesProto2_NestedEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::FOO;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::BAR;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::BAZ;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::NEG;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::NestedEnum_MIN;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::NestedEnum_MAX;
constexpr int TestAllTypesProto2::NestedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForeignEnumProto2_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[1];
}
bool ForeignEnumProto2_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TestAllTypesProto2_NestedMessage::InitAsDefaultInstance() {
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_NestedMessage_default_instance_._instance.get_mutable()->corecursive_ = const_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2*>(
      ::protobuf_test_messages::proto2::TestAllTypesProto2::internal_default_instance());
}
class TestAllTypesProto2_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesProto2_NestedMessage>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_test_messages::proto2::TestAllTypesProto2& corecursive(const TestAllTypesProto2_NestedMessage* msg);
  static void set_has_corecursive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_test_messages::proto2::TestAllTypesProto2&
TestAllTypesProto2_NestedMessage::_Internal::corecursive(const TestAllTypesProto2_NestedMessage* msg) {
  return *msg->corecursive_;
}
TestAllTypesProto2_NestedMessage::TestAllTypesProto2_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
}
TestAllTypesProto2_NestedMessage::TestAllTypesProto2_NestedMessage(const TestAllTypesProto2_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_corecursive()) {
    corecursive_ = new ::protobuf_test_messages::proto2::TestAllTypesProto2(*from.corecursive_);
  } else {
    corecursive_ = nullptr;
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
}

void TestAllTypesProto2_NestedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestAllTypesProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  ::memset(&corecursive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&corecursive_)) + sizeof(a_));
}

TestAllTypesProto2_NestedMessage::~TestAllTypesProto2_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestAllTypesProto2_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete corecursive_;
}

void TestAllTypesProto2_NestedMessage::ArenaDtor(void* object) {
  TestAllTypesProto2_NestedMessage* _this = reinterpret_cast< TestAllTypesProto2_NestedMessage* >(object);
  (void)_this;
}
void TestAllTypesProto2_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypesProto2_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypesProto2_NestedMessage& TestAllTypesProto2_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypesProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypesProto2_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(corecursive_ != nullptr);
    corecursive_->Clear();
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.TestAllTypesProto2 corecursive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_corecursive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypesProto2_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2 corecursive = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::corecursive(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  return target;
}

size_t TestAllTypesProto2_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_test_messages.proto2.TestAllTypesProto2 corecursive = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *corecursive_);
    }

    // optional int32 a = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_a());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesProto2_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypesProto2_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypesProto2_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
    MergeFrom(*source);
  }
}

void TestAllTypesProto2_NestedMessage::MergeFrom(const TestAllTypesProto2_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_corecursive()->::protobuf_test_messages::proto2::TestAllTypesProto2::MergeFrom(from._internal_corecursive());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestAllTypesProto2_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypesProto2_NestedMessage::CopyFrom(const TestAllTypesProto2_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2_NestedMessage::IsInitialized() const {
  if (_internal_has_corecursive()) {
    if (!corecursive_->IsInitialized()) return false;
  }
  return true;
}

void TestAllTypesProto2_NestedMessage::InternalSwap(TestAllTypesProto2_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypesProto2_NestedMessage, a_)
      + sizeof(TestAllTypesProto2_NestedMessage::a_)
      - PROTOBUF_FIELD_OFFSET(TestAllTypesProto2_NestedMessage, corecursive_)>(
          reinterpret_cast<char*>(&corecursive_),
          reinterpret_cast<char*>(&other->corecursive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse() {}
TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapInt32Int32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse() {}
TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapInt64Int64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse() {}
TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse() {}
TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse() {}
TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse() {}
TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse() {}
TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse() {}
TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse() {}
TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse() {}
TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse() {}
TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapInt32FloatEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse() {}
TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse() {}
TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapBoolBoolEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapStringStringEntry_DoNotUse::TestAllTypesProto2_MapStringStringEntry_DoNotUse() {}
TestAllTypesProto2_MapStringStringEntry_DoNotUse::TestAllTypesProto2_MapStringStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringStringEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringStringEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapStringStringEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapStringBytesEntry_DoNotUse::TestAllTypesProto2_MapStringBytesEntry_DoNotUse() {}
TestAllTypesProto2_MapStringBytesEntry_DoNotUse::TestAllTypesProto2_MapStringBytesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringBytesEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringBytesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringBytesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapStringBytesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse() {}
TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse() {}
TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse() {}
TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse() {}
TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TestAllTypesProto2_Data::InitAsDefaultInstance() {
}
class TestAllTypesProto2_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesProto2_Data>()._has_bits_);
  static void set_has_group_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestAllTypesProto2_Data::TestAllTypesProto2_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
}
TestAllTypesProto2_Data::TestAllTypesProto2_Data(const TestAllTypesProto2_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&group_int32_, &from.group_int32_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_uint32_) -
    reinterpret_cast<char*>(&group_int32_)) + sizeof(group_uint32_));
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
}

void TestAllTypesProto2_Data::SharedCtor() {
  ::memset(&group_int32_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_uint32_) -
      reinterpret_cast<char*>(&group_int32_)) + sizeof(group_uint32_));
}

TestAllTypesProto2_Data::~TestAllTypesProto2_Data() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestAllTypesProto2_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestAllTypesProto2_Data::ArenaDtor(void* object) {
  TestAllTypesProto2_Data* _this = reinterpret_cast< TestAllTypesProto2_Data* >(object);
  (void)_this;
}
void TestAllTypesProto2_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypesProto2_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypesProto2_Data& TestAllTypesProto2_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypesProto2_Data_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypesProto2_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&group_int32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_uint32_) -
        reinterpret_cast<char*>(&group_int32_)) + sizeof(group_uint32_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 group_int32 = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_group_int32(&has_bits);
          group_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 group_uint32 = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_group_uint32(&has_bits);
          group_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypesProto2_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 group_int32 = 202;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(202, this->_internal_group_int32(), target);
  }

  // optional uint32 group_uint32 = 203;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(203, this->_internal_group_uint32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  return target;
}

size_t TestAllTypesProto2_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 group_int32 = 202;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_group_int32());
    }

    // optional uint32 group_uint32 = 203;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_group_uint32());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesProto2_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypesProto2_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypesProto2_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
    MergeFrom(*source);
  }
}

void TestAllTypesProto2_Data::MergeFrom(const TestAllTypesProto2_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      group_int32_ = from.group_int32_;
    }
    if (cached_has_bits & 0x00000002u) {
      group_uint32_ = from.group_uint32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestAllTypesProto2_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypesProto2_Data::CopyFrom(const TestAllTypesProto2_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2_Data::IsInitialized() const {
  return true;
}

void TestAllTypesProto2_Data::InternalSwap(TestAllTypesProto2_Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypesProto2_Data, group_uint32_)
      + sizeof(TestAllTypesProto2_Data::group_uint32_)
      - PROTOBUF_FIELD_OFFSET(TestAllTypesProto2_Data, group_int32_)>(
          reinterpret_cast<char*>(&group_int32_),
          reinterpret_cast<char*>(&other->group_int32_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestAllTypesProto2_MessageSetCorrect::InitAsDefaultInstance() {
}
class TestAllTypesProto2_MessageSetCorrect::_Internal {
 public:
};

TestAllTypesProto2_MessageSetCorrect::TestAllTypesProto2_MessageSetCorrect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
}
TestAllTypesProto2_MessageSetCorrect::TestAllTypesProto2_MessageSetCorrect(const TestAllTypesProto2_MessageSetCorrect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
}

void TestAllTypesProto2_MessageSetCorrect::SharedCtor() {
}

TestAllTypesProto2_MessageSetCorrect::~TestAllTypesProto2_MessageSetCorrect() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestAllTypesProto2_MessageSetCorrect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestAllTypesProto2_MessageSetCorrect::ArenaDtor(void* object) {
  TestAllTypesProto2_MessageSetCorrect* _this = reinterpret_cast< TestAllTypesProto2_MessageSetCorrect* >(object);
  (void)_this;
}
void TestAllTypesProto2_MessageSetCorrect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypesProto2_MessageSetCorrect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypesProto2_MessageSetCorrect& TestAllTypesProto2_MessageSetCorrect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypesProto2_MessageSetCorrect_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypesProto2_MessageSetCorrect::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2_MessageSetCorrect::_InternalParse(const char* ptr,
                  ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  return _extensions_.ParseMessageSet(ptr, 
      internal_default_instance(), &_internal_metadata_, ctx);
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypesProto2_MessageSetCorrect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  target = _extensions_.InternalSerializeMessageSetWithCachedSizesToArray(target, stream);
  target = ::PROTOBUF_NAMESPACE_ID::internal::InternalSerializeUnknownMessageSetItemsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  return target;
}

size_t TestAllTypesProto2_MessageSetCorrect::ByteSizeLong() const {
// @@protoc_insertion_point(message_set_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  size_t total_size = _extensions_.MessageSetByteSize();
  if (_internal_metadata_.have_unknown_fields()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::
        ComputeUnknownMessageSetItemsSize(_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance));
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesProto2_MessageSetCorrect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypesProto2_MessageSetCorrect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypesProto2_MessageSetCorrect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
    MergeFrom(*source);
  }
}

void TestAllTypesProto2_MessageSetCorrect::MergeFrom(const TestAllTypesProto2_MessageSetCorrect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestAllTypesProto2_MessageSetCorrect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypesProto2_MessageSetCorrect::CopyFrom(const TestAllTypesProto2_MessageSetCorrect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2_MessageSetCorrect::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestAllTypesProto2_MessageSetCorrect::InternalSwap(TestAllTypesProto2_MessageSetCorrect* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MessageSetCorrect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestAllTypesProto2_MessageSetCorrectExtension1::InitAsDefaultInstance() {
}
class TestAllTypesProto2_MessageSetCorrectExtension1::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesProto2_MessageSetCorrectExtension1>()._has_bits_);
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypesProto2_MessageSetCorrectExtension1::TestAllTypesProto2_MessageSetCorrectExtension1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
}
TestAllTypesProto2_MessageSetCorrectExtension1::TestAllTypesProto2_MessageSetCorrectExtension1(const TestAllTypesProto2_MessageSetCorrectExtension1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str()) {
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_str(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
}

void TestAllTypesProto2_MessageSetCorrectExtension1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestAllTypesProto2_MessageSetCorrectExtension1_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestAllTypesProto2_MessageSetCorrectExtension1::~TestAllTypesProto2_MessageSetCorrectExtension1() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestAllTypesProto2_MessageSetCorrectExtension1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestAllTypesProto2_MessageSetCorrectExtension1::ArenaDtor(void* object) {
  TestAllTypesProto2_MessageSetCorrectExtension1* _this = reinterpret_cast< TestAllTypesProto2_MessageSetCorrectExtension1* >(object);
  (void)_this;
}
void TestAllTypesProto2_MessageSetCorrectExtension1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypesProto2_MessageSetCorrectExtension1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypesProto2_MessageSetCorrectExtension1& TestAllTypesProto2_MessageSetCorrectExtension1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypesProto2_MessageSetCorrectExtension1_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypesProto2_MessageSetCorrectExtension1::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    str_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2_MessageSetCorrectExtension1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string str = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1.str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypesProto2_MessageSetCorrectExtension1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str = 25;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1.str");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  return target;
}

size_t TestAllTypesProto2_MessageSetCorrectExtension1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str = 25;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesProto2_MessageSetCorrectExtension1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypesProto2_MessageSetCorrectExtension1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypesProto2_MessageSetCorrectExtension1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
    MergeFrom(*source);
  }
}

void TestAllTypesProto2_MessageSetCorrectExtension1::MergeFrom(const TestAllTypesProto2_MessageSetCorrectExtension1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_str()) {
    _internal_set_str(from._internal_str());
  }
}

void TestAllTypesProto2_MessageSetCorrectExtension1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypesProto2_MessageSetCorrectExtension1::CopyFrom(const TestAllTypesProto2_MessageSetCorrectExtension1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2_MessageSetCorrectExtension1::IsInitialized() const {
  return true;
}

void TestAllTypesProto2_MessageSetCorrectExtension1::InternalSwap(TestAllTypesProto2_MessageSetCorrectExtension1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_.Swap(&other->str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MessageSetCorrectExtension1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestAllTypesProto2_MessageSetCorrectExtension2::InitAsDefaultInstance() {
}
class TestAllTypesProto2_MessageSetCorrectExtension2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesProto2_MessageSetCorrectExtension2>()._has_bits_);
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypesProto2_MessageSetCorrectExtension2::TestAllTypesProto2_MessageSetCorrectExtension2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
}
TestAllTypesProto2_MessageSetCorrectExtension2::TestAllTypesProto2_MessageSetCorrectExtension2(const TestAllTypesProto2_MessageSetCorrectExtension2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_ = from.i_;
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
}

void TestAllTypesProto2_MessageSetCorrectExtension2::SharedCtor() {
  i_ = 0;
}

TestAllTypesProto2_MessageSetCorrectExtension2::~TestAllTypesProto2_MessageSetCorrectExtension2() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestAllTypesProto2_MessageSetCorrectExtension2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestAllTypesProto2_MessageSetCorrectExtension2::ArenaDtor(void* object) {
  TestAllTypesProto2_MessageSetCorrectExtension2* _this = reinterpret_cast< TestAllTypesProto2_MessageSetCorrectExtension2* >(object);
  (void)_this;
}
void TestAllTypesProto2_MessageSetCorrectExtension2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypesProto2_MessageSetCorrectExtension2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypesProto2_MessageSetCorrectExtension2& TestAllTypesProto2_MessageSetCorrectExtension2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypesProto2_MessageSetCorrectExtension2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypesProto2_MessageSetCorrectExtension2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2_MessageSetCorrectExtension2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 i = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_i(&has_bits);
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypesProto2_MessageSetCorrectExtension2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 i = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  return target;
}

size_t TestAllTypesProto2_MessageSetCorrectExtension2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 i = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_i());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesProto2_MessageSetCorrectExtension2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypesProto2_MessageSetCorrectExtension2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypesProto2_MessageSetCorrectExtension2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
    MergeFrom(*source);
  }
}

void TestAllTypesProto2_MessageSetCorrectExtension2::MergeFrom(const TestAllTypesProto2_MessageSetCorrectExtension2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_i()) {
    _internal_set_i(from._internal_i());
  }
}

void TestAllTypesProto2_MessageSetCorrectExtension2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypesProto2_MessageSetCorrectExtension2::CopyFrom(const TestAllTypesProto2_MessageSetCorrectExtension2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2_MessageSetCorrectExtension2::IsInitialized() const {
  return true;
}

void TestAllTypesProto2_MessageSetCorrectExtension2::InternalSwap(TestAllTypesProto2_MessageSetCorrectExtension2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(i_, other->i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MessageSetCorrectExtension2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestAllTypesProto2::InitAsDefaultInstance() {
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_._instance.get_mutable()->optional_nested_message_ = const_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage*>(
      ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage::internal_default_instance());
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_._instance.get_mutable()->optional_foreign_message_ = const_cast< ::protobuf_test_messages::proto2::ForeignMessageProto2*>(
      ::protobuf_test_messages::proto2::ForeignMessageProto2::internal_default_instance());
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_._instance.get_mutable()->recursive_message_ = const_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2*>(
      ::protobuf_test_messages::proto2::TestAllTypesProto2::internal_default_instance());
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_.oneof_uint32_ = 0u;
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_.oneof_nested_message_ = const_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage*>(
      ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage::internal_default_instance());
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_.oneof_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_.oneof_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_.oneof_bool_ = false;
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_.oneof_uint64_ = PROTOBUF_ULONGLONG(0);
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_.oneof_float_ = 0;
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_.oneof_double_ = 0;
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_.oneof_enum_ = 0;
  ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_._instance.get_mutable()->data_ = const_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2_Data*>(
      ::protobuf_test_messages::proto2::TestAllTypesProto2_Data::internal_default_instance());
}
class TestAllTypesProto2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesProto2>()._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_optional_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_optional_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_optional_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_optional_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_optional_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_optional_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_optional_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_optional_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_optional_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_optional_float(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_optional_double(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& optional_nested_message(const TestAllTypesProto2* msg);
  static void set_has_optional_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::protobuf_test_messages::proto2::ForeignMessageProto2& optional_foreign_message(const TestAllTypesProto2* msg);
  static void set_has_optional_foreign_message(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_optional_nested_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_optional_foreign_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_optional_string_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_test_messages::proto2::TestAllTypesProto2& recursive_message(const TestAllTypesProto2* msg);
  static void set_has_recursive_message(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& oneof_nested_message(const TestAllTypesProto2* msg);
  static const ::protobuf_test_messages::proto2::TestAllTypesProto2_Data& data(const TestAllTypesProto2* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fieldname1(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_field_name2(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has__field_name3(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_field__name4_(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_field0name5(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_field_0_name6(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_fieldname7(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_fieldname8(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_field_name9(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_field_name10(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_field_name11(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_field_name12(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has___field_name13(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has___field_name14(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_field__name15(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_field__name16(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_field_name17__(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_field_name18__(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage&
TestAllTypesProto2::_Internal::optional_nested_message(const TestAllTypesProto2* msg) {
  return *msg->optional_nested_message_;
}
const ::protobuf_test_messages::proto2::ForeignMessageProto2&
TestAllTypesProto2::_Internal::optional_foreign_message(const TestAllTypesProto2* msg) {
  return *msg->optional_foreign_message_;
}
const ::protobuf_test_messages::proto2::TestAllTypesProto2&
TestAllTypesProto2::_Internal::recursive_message(const TestAllTypesProto2* msg) {
  return *msg->recursive_message_;
}
const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage&
TestAllTypesProto2::_Internal::oneof_nested_message(const TestAllTypesProto2* msg) {
  return *msg->oneof_field_.oneof_nested_message_;
}
const ::protobuf_test_messages::proto2::TestAllTypesProto2_Data&
TestAllTypesProto2::_Internal::data(const TestAllTypesProto2* msg) {
  return *msg->data_;
}
void TestAllTypesProto2::set_allocated_oneof_nested_message(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* oneof_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_oneof_field();
  if (oneof_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oneof_nested_message);
    if (message_arena != submessage_arena) {
      oneof_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_nested_message, submessage_arena);
    }
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_nested_message)
}
TestAllTypesProto2::TestAllTypesProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  repeated_int32_(arena),
  repeated_int64_(arena),
  repeated_uint32_(arena),
  repeated_uint64_(arena),
  repeated_sint32_(arena),
  repeated_sint64_(arena),
  repeated_fixed32_(arena),
  repeated_fixed64_(arena),
  repeated_sfixed32_(arena),
  repeated_sfixed64_(arena),
  repeated_float_(arena),
  repeated_double_(arena),
  repeated_bool_(arena),
  repeated_string_(arena),
  repeated_bytes_(arena),
  repeated_nested_message_(arena),
  repeated_foreign_message_(arena),
  repeated_nested_enum_(arena),
  repeated_foreign_enum_(arena),
  repeated_string_piece_(arena),
  repeated_cord_(arena),
  map_int32_int32_(arena),
  map_int64_int64_(arena),
  map_uint32_uint32_(arena),
  map_uint64_uint64_(arena),
  map_sint32_sint32_(arena),
  map_sint64_sint64_(arena),
  map_fixed32_fixed32_(arena),
  map_fixed64_fixed64_(arena),
  map_sfixed32_sfixed32_(arena),
  map_sfixed64_sfixed64_(arena),
  map_int32_float_(arena),
  map_int32_double_(arena),
  map_bool_bool_(arena),
  map_string_string_(arena),
  map_string_bytes_(arena),
  map_string_nested_message_(arena),
  map_string_foreign_message_(arena),
  map_string_nested_enum_(arena),
  map_string_foreign_enum_(arena),
  packed_int32_(arena),
  packed_int64_(arena),
  packed_uint32_(arena),
  packed_uint64_(arena),
  packed_sint32_(arena),
  packed_sint64_(arena),
  packed_fixed32_(arena),
  packed_fixed64_(arena),
  packed_sfixed32_(arena),
  packed_sfixed64_(arena),
  packed_float_(arena),
  packed_double_(arena),
  packed_bool_(arena),
  packed_nested_enum_(arena),
  unpacked_int32_(arena),
  unpacked_int64_(arena),
  unpacked_uint32_(arena),
  unpacked_uint64_(arena),
  unpacked_sint32_(arena),
  unpacked_sint64_(arena),
  unpacked_fixed32_(arena),
  unpacked_fixed64_(arena),
  unpacked_sfixed32_(arena),
  unpacked_sfixed64_(arena),
  unpacked_float_(arena),
  unpacked_double_(arena),
  unpacked_bool_(arena),
  unpacked_nested_enum_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2)
}
TestAllTypesProto2::TestAllTypesProto2(const TestAllTypesProto2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_sfixed32_(from.repeated_sfixed32_),
      repeated_sfixed64_(from.repeated_sfixed64_),
      repeated_float_(from.repeated_float_),
      repeated_double_(from.repeated_double_),
      repeated_bool_(from.repeated_bool_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeated_nested_message_(from.repeated_nested_message_),
      repeated_foreign_message_(from.repeated_foreign_message_),
      repeated_nested_enum_(from.repeated_nested_enum_),
      repeated_foreign_enum_(from.repeated_foreign_enum_),
      repeated_string_piece_(from.repeated_string_piece_),
      repeated_cord_(from.repeated_cord_),
      packed_int32_(from.packed_int32_),
      packed_int64_(from.packed_int64_),
      packed_uint32_(from.packed_uint32_),
      packed_uint64_(from.packed_uint64_),
      packed_sint32_(from.packed_sint32_),
      packed_sint64_(from.packed_sint64_),
      packed_fixed32_(from.packed_fixed32_),
      packed_fixed64_(from.packed_fixed64_),
      packed_sfixed32_(from.packed_sfixed32_),
      packed_sfixed64_(from.packed_sfixed64_),
      packed_float_(from.packed_float_),
      packed_double_(from.packed_double_),
      packed_bool_(from.packed_bool_),
      packed_nested_enum_(from.packed_nested_enum_),
      unpacked_int32_(from.unpacked_int32_),
      unpacked_int64_(from.unpacked_int64_),
      unpacked_uint32_(from.unpacked_uint32_),
      unpacked_uint64_(from.unpacked_uint64_),
      unpacked_sint32_(from.unpacked_sint32_),
      unpacked_sint64_(from.unpacked_sint64_),
      unpacked_fixed32_(from.unpacked_fixed32_),
      unpacked_fixed64_(from.unpacked_fixed64_),
      unpacked_sfixed32_(from.unpacked_sfixed32_),
      unpacked_sfixed64_(from.unpacked_sfixed64_),
      unpacked_float_(from.unpacked_float_),
      unpacked_double_(from.unpacked_double_),
      unpacked_bool_(from.unpacked_bool_),
      unpacked_nested_enum_(from.unpacked_nested_enum_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  map_int32_int32_.MergeFrom(from.map_int32_int32_);
  map_int64_int64_.MergeFrom(from.map_int64_int64_);
  map_uint32_uint32_.MergeFrom(from.map_uint32_uint32_);
  map_uint64_uint64_.MergeFrom(from.map_uint64_uint64_);
  map_sint32_sint32_.MergeFrom(from.map_sint32_sint32_);
  map_sint64_sint64_.MergeFrom(from.map_sint64_sint64_);
  map_fixed32_fixed32_.MergeFrom(from.map_fixed32_fixed32_);
  map_fixed64_fixed64_.MergeFrom(from.map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.MergeFrom(from.map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.MergeFrom(from.map_sfixed64_sfixed64_);
  map_int32_float_.MergeFrom(from.map_int32_float_);
  map_int32_double_.MergeFrom(from.map_int32_double_);
  map_bool_bool_.MergeFrom(from.map_bool_bool_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_string_bytes_.MergeFrom(from.map_string_bytes_);
  map_string_nested_message_.MergeFrom(from.map_string_nested_message_);
  map_string_foreign_message_.MergeFrom(from.map_string_foreign_message_);
  map_string_nested_enum_.MergeFrom(from.map_string_nested_enum_);
  map_string_foreign_enum_.MergeFrom(from.map_string_foreign_enum_);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_string()) {
    optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string(),
      GetArena());
  }
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_bytes(),
      GetArena());
  }
  optional_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_string_piece()) {
    optional_string_piece_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string_piece(),
      GetArena());
  }
  optional_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_cord()) {
    optional_cord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_cord(),
      GetArena());
  }
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  if (from._internal_has_optional_foreign_message()) {
    optional_foreign_message_ = new ::protobuf_test_messages::proto2::ForeignMessageProto2(*from.optional_foreign_message_);
  } else {
    optional_foreign_message_ = nullptr;
  }
  if (from._internal_has_recursive_message()) {
    recursive_message_ = new ::protobuf_test_messages::proto2::TestAllTypesProto2(*from.recursive_message_);
  } else {
    recursive_message_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::protobuf_test_messages::proto2::TestAllTypesProto2_Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_name17___) -
    reinterpret_cast<char*>(&optional_int64_)) + sizeof(field_name17___));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofBool: {
      _internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofUint64: {
      _internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofFloat: {
      _internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofDouble: {
      _internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2)
}

void TestAllTypesProto2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestAllTypesProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&optional_nested_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_name17___) -
      reinterpret_cast<char*>(&optional_nested_message_)) + sizeof(field_name17___));
  clear_has_oneof_field();
}

TestAllTypesProto2::~TestAllTypesProto2() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestAllTypesProto2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_piece_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_cord_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optional_nested_message_;
  if (this != internal_default_instance()) delete optional_foreign_message_;
  if (this != internal_default_instance()) delete recursive_message_;
  if (this != internal_default_instance()) delete data_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestAllTypesProto2::ArenaDtor(void* object) {
  TestAllTypesProto2* _this = reinterpret_cast< TestAllTypesProto2* >(object);
  (void)_this;
}
void TestAllTypesProto2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypesProto2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypesProto2& TestAllTypesProto2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypesProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypesProto2::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofNestedMessage: {
      if (GetArena() == nullptr) {
        delete oneof_field_.oneof_nested_message_;
      }
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kOneofBool: {
      // No need to clear
      break;
    }
    case kOneofUint64: {
      // No need to clear
      break;
    }
    case kOneofFloat: {
      // No need to clear
      break;
    }
    case kOneofDouble: {
      // No need to clear
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestAllTypesProto2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_bool_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_nested_message_.Clear();
  repeated_foreign_message_.Clear();
  repeated_nested_enum_.Clear();
  repeated_foreign_enum_.Clear();
  repeated_string_piece_.Clear();
  repeated_cord_.Clear();
  map_int32_int32_.Clear();
  map_int64_int64_.Clear();
  map_uint32_uint32_.Clear();
  map_uint64_uint64_.Clear();
  map_sint32_sint32_.Clear();
  map_sint64_sint64_.Clear();
  map_fixed32_fixed32_.Clear();
  map_fixed64_fixed64_.Clear();
  map_sfixed32_sfixed32_.Clear();
  map_sfixed64_sfixed64_.Clear();
  map_int32_float_.Clear();
  map_int32_double_.Clear();
  map_bool_bool_.Clear();
  map_string_string_.Clear();
  map_string_bytes_.Clear();
  map_string_nested_message_.Clear();
  map_string_foreign_message_.Clear();
  map_string_nested_enum_.Clear();
  map_string_foreign_enum_.Clear();
  packed_int32_.Clear();
  packed_int64_.Clear();
  packed_uint32_.Clear();
  packed_uint64_.Clear();
  packed_sint32_.Clear();
  packed_sint64_.Clear();
  packed_fixed32_.Clear();
  packed_fixed64_.Clear();
  packed_sfixed32_.Clear();
  packed_sfixed64_.Clear();
  packed_float_.Clear();
  packed_double_.Clear();
  packed_bool_.Clear();
  packed_nested_enum_.Clear();
  unpacked_int32_.Clear();
  unpacked_int64_.Clear();
  unpacked_uint32_.Clear();
  unpacked_uint64_.Clear();
  unpacked_sint32_.Clear();
  unpacked_sint64_.Clear();
  unpacked_fixed32_.Clear();
  unpacked_fixed64_.Clear();
  unpacked_sfixed32_.Clear();
  unpacked_sfixed64_.Clear();
  unpacked_float_.Clear();
  unpacked_double_.Clear();
  unpacked_bool_.Clear();
  unpacked_nested_enum_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      optional_string_piece_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      optional_cord_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(optional_nested_message_ != nullptr);
      optional_nested_message_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(optional_foreign_message_ != nullptr);
      optional_foreign_message_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(recursive_message_ != nullptr);
      recursive_message_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&optional_int64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_fixed64_) -
        reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_fixed64_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&optional_sfixed64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_foreign_enum_) -
        reinterpret_cast<char*>(&optional_sfixed64_)) + sizeof(optional_foreign_enum_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&fieldname1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldname8_) -
        reinterpret_cast<char*>(&fieldname1_)) + sizeof(fieldname8_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&field_name9_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field__name16_) -
        reinterpret_cast<char*>(&field_name9_)) + sizeof(field__name16_));
  }
  field_name17___ = 0;
  clear_oneof_field();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_optional_int32(&_has_bits_);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 optional_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_optional_int64(&_has_bits_);
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 optional_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_optional_uint32(&_has_bits_);
          optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 optional_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_optional_uint64(&_has_bits_);
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 optional_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_optional_sint32(&_has_bits_);
          optional_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 optional_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_optional_sint64(&_has_bits_);
          optional_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 optional_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_optional_fixed32(&_has_bits_);
          optional_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 optional_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_optional_fixed64(&_has_bits_);
          optional_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional sfixed32 optional_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_optional_sfixed32(&_has_bits_);
          optional_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 optional_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_optional_sfixed64(&_has_bits_);
          optional_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional float optional_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_optional_float(&_has_bits_);
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double optional_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_optional_double(&_has_bits_);
          optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool optional_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_optional_bool(&_has_bits_);
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string optional_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.optional_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_foreign_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(val))) {
            _internal_set_optional_nested_enum(static_cast<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid(val))) {
            _internal_set_optional_foreign_enum(static_cast<::protobuf_test_messages::proto2::ForeignEnumProto2>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_optional_string_piece();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.optional_string_piece");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string optional_cord = 25 [ctype = CORD];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_optional_cord();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.optional_cord");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_recursive_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<248>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<256>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<264>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<272>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 repeated_sint32 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<280>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_repeated_sint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 repeated_sint64 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<288>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_repeated_sint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 repeated_fixed32 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<301>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<305>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 repeated_sfixed32 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<317>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_repeated_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 repeated_sfixed64 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<321>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_repeated_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float repeated_float = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<333>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double repeated_double = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<337>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<344>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string repeated_string = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_nested_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_foreign_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(val))) {
              _internal_add_repeated_nested_enum(static_cast<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(51, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<408>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_repeated_nested_enum(), ptr, ctx, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid, &_internal_metadata_, 51);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid(val))) {
              _internal_add_repeated_foreign_enum(static_cast<::protobuf_test_messages::proto2::ForeignEnumProto2>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(52, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<416>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_repeated_foreign_enum(), ptr, ctx, ::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid, &_internal_metadata_, 52);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string_piece();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string repeated_cord = 55 [ctype = CORD];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_cord();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, int32> map_int32_int32 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int32_int32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<450>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int64, int64> map_int64_int64 = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int64_int64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> map_uint32_uint32 = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_uint32_uint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<466>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, uint64> map_uint64_uint64 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_uint64_uint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<474>(ptr));
        } else goto handle_unusual;
        continue;
      // map<sint32, sint32> map_sint32_sint32 = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_sint32_sint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<482>(ptr));
        } else goto handle_unusual;
        continue;
      // map<sint64, sint64> map_sint64_sint64 = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_sint64_sint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<490>(ptr));
        } else goto handle_unusual;
        continue;
      // map<fixed32, fixed32> map_fixed32_fixed32 = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_fixed32_fixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<498>(ptr));
        } else goto handle_unusual;
        continue;
      // map<fixed64, fixed64> map_fixed64_fixed64 = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_fixed64_fixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<506>(ptr));
        } else goto handle_unusual;
        continue;
      // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_sfixed32_sfixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<514>(ptr));
        } else goto handle_unusual;
        continue;
      // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_sfixed64_sfixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<522>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, float> map_int32_float = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int32_float_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<530>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, double> map_int32_double = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int32_double_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<538>(ptr));
        } else goto handle_unusual;
        continue;
      // map<bool, bool> map_bool_bool = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_bool_bool_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<546>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> map_string_string = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_string_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<554>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, bytes> map_string_bytes = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_bytes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_nested_message_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<570>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_foreign_message_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<578>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&map_string_nested_enum_, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid, 73, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<586>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&map_string_foreign_enum_, ::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid, 74, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<594>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 packed_int32 = 75 [packed = true];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_packed_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 packed_int64 = 76 [packed = true];
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_packed_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_packed_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 packed_uint32 = 77 [packed = true];
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_packed_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 packed_uint64 = 78 [packed = true];
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packed_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_packed_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 packed_sint32 = 79 [packed = true];
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_packed_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_packed_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 packed_sint64 = 80 [packed = true];
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_packed_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_packed_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 packed_fixed32 = 81 [packed = true];
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_packed_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141) {
          _internal_add_packed_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 packed_fixed64 = 82 [packed = true];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_packed_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145) {
          _internal_add_packed_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 packed_sfixed32 = 83 [packed = true];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_packed_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157) {
          _internal_add_packed_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 packed_sfixed64 = 84 [packed = true];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_packed_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161) {
          _internal_add_packed_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated float packed_float = 85 [packed = true];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_packed_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173) {
          _internal_add_packed_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double packed_double = 86 [packed = true];
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_packed_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177) {
          _internal_add_packed_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bool packed_bool = 87 [packed = true];
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_packed_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184) {
          _internal_add_packed_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true];
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_packed_nested_enum(), ptr, ctx, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid, &_internal_metadata_, 88);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(val))) {
            _internal_add_packed_nested_enum(static_cast<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(88, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int32 unpacked_int32 = 89 [packed = false];
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<712>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unpacked_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 unpacked_int64 = 90 [packed = false];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<720>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_unpacked_int64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 unpacked_uint32 = 91 [packed = false];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<728>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unpacked_uint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 unpacked_uint64 = 92 [packed = false];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<736>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_unpacked_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 unpacked_sint32 = 93 [packed = false];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<744>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_unpacked_sint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 unpacked_sint64 = 94 [packed = false];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<752>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_unpacked_sint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 unpacked_fixed32 = 95 [packed = false];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<765>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_unpacked_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 unpacked_fixed64 = 96 [packed = false];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<769>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_unpacked_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<781>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_unpacked_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<785>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_unpacked_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float unpacked_float = 99 [packed = false];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<797>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_unpacked_float(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double unpacked_double = 100 [packed = false];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<801>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_unpacked_double(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool unpacked_bool = 101 [packed = false];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<808>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_unpacked_bool(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(val))) {
              _internal_add_unpacked_nested_enum(static_cast<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(102, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<816>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_unpacked_nested_enum(), ptr, ctx, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid, &_internal_metadata_, 102);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage oneof_nested_message = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string oneof_string = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.oneof_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes oneof_bytes = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool oneof_bool = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _internal_set_oneof_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 oneof_uint64 = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _internal_set_oneof_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float oneof_float = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _internal_set_oneof_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double oneof_double = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _internal_set_oneof_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum oneof_enum = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(val))) {
            _internal_set_oneof_enum(static_cast<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(119, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional group Data = 201 { ... };
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 75)) {
          ptr = ctx->ParseGroup(_internal_mutable_data(), ptr, 1611);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fieldname1 = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_fieldname1(&_has_bits_);
          fieldname1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field_name2 = 402;
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_field_name2(&_has_bits_);
          field_name2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 _field_name3 = 403;
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has__field_name3(&_has_bits_);
          _field_name3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field__name4_ = 404;
      case 404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_field__name4_(&_has_bits_);
          field__name4__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field0name5 = 405;
      case 405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_field0name5(&_has_bits_);
          field0name5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field_0_name6 = 406;
      case 406:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_field_0_name6(&_has_bits_);
          field_0_name6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fieldName7 = 407;
      case 407:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_fieldname7(&_has_bits_);
          fieldname7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 FieldName8 = 408;
      case 408:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_fieldname8(&_has_bits_);
          fieldname8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field_Name9 = 409;
      case 409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_field_name9(&_has_bits_);
          field_name9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Field_Name10 = 410;
      case 410:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_field_name10(&_has_bits_);
          field_name10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 FIELD_NAME11 = 411;
      case 411:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_field_name11(&_has_bits_);
          field_name11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 FIELD_name12 = 412;
      case 412:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_field_name12(&_has_bits_);
          field_name12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 __field_name13 = 413;
      case 413:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has___field_name13(&_has_bits_);
          __field_name13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 __Field_name14 = 414;
      case 414:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has___field_name14(&_has_bits_);
          __field_name14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field__name15 = 415;
      case 415:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_field__name15(&_has_bits_);
          field__name15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field__Name16 = 416;
      case 416:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_field__name16(&_has_bits_);
          field__name16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field_name17__ = 417;
      case 417:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_field_name17__(&_has_bits_);
          field_name17___ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Field_name18__ = 418;
      case 418:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_field_name18__(&_has_bits_);
          field_name18___ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((960u <= tag && tag < 1608u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypesProto2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 optional_int32 = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_optional_int32(), target);
  }

  // optional int64 optional_int64 = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_optional_int64(), target);
  }

  // optional uint32 optional_uint32 = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_optional_uint32(), target);
  }

  // optional uint64 optional_uint64 = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_optional_uint64(), target);
  }

  // optional sint32 optional_sint32 = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_optional_sint32(), target);
  }

  // optional sint64 optional_sint64 = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_optional_sint64(), target);
  }

  // optional fixed32 optional_fixed32 = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_optional_fixed32(), target);
  }

  // optional fixed64 optional_fixed64 = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_optional_fixed64(), target);
  }

  // optional sfixed32 optional_sfixed32 = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_optional_sfixed32(), target);
  }

  // optional sfixed64 optional_sfixed64 = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_optional_sfixed64(), target);
  }

  // optional float optional_float = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_optional_float(), target);
  }

  // optional double optional_double = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_optional_double(), target);
  }

  // optional bool optional_bool = 13;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_optional_bool(), target);
  }

  // optional string optional_string = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.optional_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_optional_string(), target);
  }

  // optional bytes optional_bytes = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_optional_bytes(), target);
  }

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::optional_nested_message(this), target, stream);
  }

  // optional .protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message = 19;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::optional_foreign_message(this), target, stream);
  }

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_optional_nested_enum(), target);
  }

  // optional .protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_optional_foreign_enum(), target);
  }

  // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string_piece().data(), static_cast<int>(this->_internal_optional_string_piece().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.optional_string_piece");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_optional_string_piece(), target);
  }

  // optional string optional_cord = 25 [ctype = CORD];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_cord().data(), static_cast<int>(this->_internal_optional_cord().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.optional_cord");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_optional_cord(), target);
  }

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message = 27;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::recursive_message(this), target, stream);
  }

  // repeated int32 repeated_int32 = 31;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_repeated_int32(i), target);
  }

  // repeated int64 repeated_int64 = 32;
  for (int i = 0, n = this->_internal_repeated_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(32, this->_internal_repeated_int64(i), target);
  }

  // repeated uint32 repeated_uint32 = 33;
  for (int i = 0, n = this->_internal_repeated_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_repeated_uint32(i), target);
  }

  // repeated uint64 repeated_uint64 = 34;
  for (int i = 0, n = this->_internal_repeated_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(34, this->_internal_repeated_uint64(i), target);
  }

  // repeated sint32 repeated_sint32 = 35;
  for (int i = 0, n = this->_internal_repeated_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(35, this->_internal_repeated_sint32(i), target);
  }

  // repeated sint64 repeated_sint64 = 36;
  for (int i = 0, n = this->_internal_repeated_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(36, this->_internal_repeated_sint64(i), target);
  }

  // repeated fixed32 repeated_fixed32 = 37;
  for (int i = 0, n = this->_internal_repeated_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(37, this->_internal_repeated_fixed32(i), target);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  for (int i = 0, n = this->_internal_repeated_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(38, this->_internal_repeated_fixed64(i), target);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  for (int i = 0, n = this->_internal_repeated_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(39, this->_internal_repeated_sfixed32(i), target);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  for (int i = 0, n = this->_internal_repeated_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(40, this->_internal_repeated_sfixed64(i), target);
  }

  // repeated float repeated_float = 41;
  for (int i = 0, n = this->_internal_repeated_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(41, this->_internal_repeated_float(i), target);
  }

  // repeated double repeated_double = 42;
  for (int i = 0, n = this->_internal_repeated_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->_internal_repeated_double(i), target);
  }

  // repeated bool repeated_bool = 43;
  for (int i = 0, n = this->_internal_repeated_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_repeated_bool(i), target);
  }

  // repeated string repeated_string = 44;
  for (int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string");
    target = stream->WriteString(44, s, target);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(45, s, target);
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_nested_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, this->_internal_repeated_nested_message(i), target, stream);
  }

  // repeated .protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message = 49;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_foreign_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, this->_internal_repeated_foreign_message(i), target, stream);
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum = 51;
  for (int i = 0, n = this->_internal_repeated_nested_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        51, this->_internal_repeated_nested_enum(i), target);
  }

  // repeated .protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum = 52;
  for (int i = 0, n = this->_internal_repeated_foreign_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        52, this->_internal_repeated_foreign_enum(i), target);
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_repeated_string_piece_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string_piece(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece");
    target = stream->WriteString(54, s, target);
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  for (int i = 0, n = this->_internal_repeated_cord_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_cord(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord");
    target = stream->WriteString(55, s, target);
  }

  // map<int32, int32> map_int32_int32 = 56;
  if (!this->_internal_map_int32_int32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_int32_int32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_int32_int32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_int32_int32().begin();
          it != this->_internal_map_int32_int32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::Funcs::InternalSerialize(56, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_int32_int32().begin();
          it != this->_internal_map_int32_int32().end(); ++it) {
        target = TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::Funcs::InternalSerialize(56, it->first, it->second, target, stream);
      }
    }
  }

  // map<int64, int64> map_int64_int64 = 57;
  if (!this->_internal_map_int64_int64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_int64_int64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_int64_int64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_int64_int64().begin();
          it != this->_internal_map_int64_int64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::Funcs::InternalSerialize(57, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_int64_int64().begin();
          it != this->_internal_map_int64_int64().end(); ++it) {
        target = TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::Funcs::InternalSerialize(57, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint32, uint32> map_uint32_uint32 = 58;
  if (!this->_internal_map_uint32_uint32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_uint32_uint32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_uint32_uint32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_map_uint32_uint32().begin();
          it != this->_internal_map_uint32_uint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::Funcs::InternalSerialize(58, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_map_uint32_uint32().begin();
          it != this->_internal_map_uint32_uint32().end(); ++it) {
        target = TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::Funcs::InternalSerialize(58, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint64, uint64> map_uint64_uint64 = 59;
  if (!this->_internal_map_uint64_uint64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_uint64_uint64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_uint64_uint64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_map_uint64_uint64().begin();
          it != this->_internal_map_uint64_uint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::Funcs::InternalSerialize(59, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_map_uint64_uint64().begin();
          it != this->_internal_map_uint64_uint64().end(); ++it) {
        target = TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::Funcs::InternalSerialize(59, it->first, it->second, target, stream);
      }
    }
  }

  // map<sint32, sint32> map_sint32_sint32 = 60;
  if (!this->_internal_map_sint32_sint32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_sint32_sint32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_sint32_sint32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_sint32_sint32().begin();
          it != this->_internal_map_sint32_sint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::Funcs::InternalSerialize(60, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_sint32_sint32().begin();
          it != this->_internal_map_sint32_sint32().end(); ++it) {
        target = TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::Funcs::InternalSerialize(60, it->first, it->second, target, stream);
      }
    }
  }

  // map<sint64, sint64> map_sint64_sint64 = 61;
  if (!this->_internal_map_sint64_sint64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_sint64_sint64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_sint64_sint64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_sint64_sint64().begin();
          it != this->_internal_map_sint64_sint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::Funcs::InternalSerialize(61, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_sint64_sint64().begin();
          it != this->_internal_map_sint64_sint64().end(); ++it) {
        target = TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::Funcs::InternalSerialize(61, it->first, it->second, target, stream);
      }
    }
  }

  // map<fixed32, fixed32> map_fixed32_fixed32 = 62;
  if (!this->_internal_map_fixed32_fixed32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_fixed32_fixed32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_fixed32_fixed32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_map_fixed32_fixed32().begin();
          it != this->_internal_map_fixed32_fixed32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::Funcs::InternalSerialize(62, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_map_fixed32_fixed32().begin();
          it != this->_internal_map_fixed32_fixed32().end(); ++it) {
        target = TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::Funcs::InternalSerialize(62, it->first, it->second, target, stream);
      }
    }
  }

  // map<fixed64, fixed64> map_fixed64_fixed64 = 63;
  if (!this->_internal_map_fixed64_fixed64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_fixed64_fixed64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_fixed64_fixed64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_map_fixed64_fixed64().begin();
          it != this->_internal_map_fixed64_fixed64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::Funcs::InternalSerialize(63, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_map_fixed64_fixed64().begin();
          it != this->_internal_map_fixed64_fixed64().end(); ++it) {
        target = TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::Funcs::InternalSerialize(63, it->first, it->second, target, stream);
      }
    }
  }

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
  if (!this->_internal_map_sfixed32_sfixed32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_sfixed32_sfixed32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_sfixed32_sfixed32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_sfixed32_sfixed32().begin();
          it != this->_internal_map_sfixed32_sfixed32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::Funcs::InternalSerialize(64, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_sfixed32_sfixed32().begin();
          it != this->_internal_map_sfixed32_sfixed32().end(); ++it) {
        target = TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::Funcs::InternalSerialize(64, it->first, it->second, target, stream);
      }
    }
  }

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
  if (!this->_internal_map_sfixed64_sfixed64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_sfixed64_sfixed64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_sfixed64_sfixed64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_sfixed64_sfixed64().begin();
          it != this->_internal_map_sfixed64_sfixed64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::Funcs::InternalSerialize(65, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_sfixed64_sfixed64().begin();
          it != this->_internal_map_sfixed64_sfixed64().end(); ++it) {
        target = TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::Funcs::InternalSerialize(65, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, float> map_int32_float = 66;
  if (!this->_internal_map_int32_float().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_int32_float().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_int32_float().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_map_int32_float().begin();
          it != this->_internal_map_int32_float().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::Funcs::InternalSerialize(66, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_map_int32_float().begin();
          it != this->_internal_map_int32_float().end(); ++it) {
        target = TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::Funcs::InternalSerialize(66, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, double> map_int32_double = 67;
  if (!this->_internal_map_int32_double().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, double >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_int32_double().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_int32_double().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, double >::const_iterator
          it = this->_internal_map_int32_double().begin();
          it != this->_internal_map_int32_double().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::Funcs::InternalSerialize(67, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, double >::const_iterator
          it = this->_internal_map_int32_double().begin();
          it != this->_internal_map_int32_double().end(); ++it) {
        target = TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::Funcs::InternalSerialize(67, it->first, it->second, target, stream);
      }
    }
  }

  // map<bool, bool> map_bool_bool = 68;
  if (!this->_internal_map_bool_bool().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_bool_bool().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_bool_bool().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_iterator
          it = this->_internal_map_bool_bool().begin();
          it != this->_internal_map_bool_bool().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::Funcs::InternalSerialize(68, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_iterator
          it = this->_internal_map_bool_bool().begin();
          it != this->_internal_map_bool_bool().end(); ++it) {
        target = TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::Funcs::InternalSerialize(68, it->first, it->second, target, stream);
      }
    }
  }

  // map<string, string> map_string_string = 69;
  if (!this->_internal_map_string_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringStringEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringStringEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_string().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_string_string().begin();
          it != this->_internal_map_string_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapStringStringEntry_DoNotUse::Funcs::InternalSerialize(69, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_string_string().begin();
          it != this->_internal_map_string_string().end(); ++it) {
        target = TestAllTypesProto2_MapStringStringEntry_DoNotUse::Funcs::InternalSerialize(69, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, bytes> map_string_bytes = 70;
  if (!this->_internal_map_string_bytes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringBytesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_bytes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_bytes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_string_bytes().begin();
          it != this->_internal_map_string_bytes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapStringBytesEntry_DoNotUse::Funcs::InternalSerialize(70, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_string_bytes().begin();
          it != this->_internal_map_string_bytes().end(); ++it) {
        target = TestAllTypesProto2_MapStringBytesEntry_DoNotUse::Funcs::InternalSerialize(70, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message = 71;
  if (!this->_internal_map_string_nested_message().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringNestedMessageEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_nested_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_nested_message().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >::const_iterator
          it = this->_internal_map_string_nested_message().begin();
          it != this->_internal_map_string_nested_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::Funcs::InternalSerialize(71, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >::const_iterator
          it = this->_internal_map_string_nested_message().begin();
          it != this->_internal_map_string_nested_message().end(); ++it) {
        target = TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::Funcs::InternalSerialize(71, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message = 72;
  if (!this->_internal_map_string_foreign_message().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringForeignMessageEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_foreign_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_foreign_message().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >::const_iterator
          it = this->_internal_map_string_foreign_message().begin();
          it != this->_internal_map_string_foreign_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::Funcs::InternalSerialize(72, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >::const_iterator
          it = this->_internal_map_string_foreign_message().begin();
          it != this->_internal_map_string_foreign_message().end(); ++it) {
        target = TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::Funcs::InternalSerialize(72, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum = 73;
  if (!this->_internal_map_string_nested_enum().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringNestedEnumEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_nested_enum().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_nested_enum().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >::const_iterator
          it = this->_internal_map_string_nested_enum().begin();
          it != this->_internal_map_string_nested_enum().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::Funcs::InternalSerialize(73, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >::const_iterator
          it = this->_internal_map_string_nested_enum().begin();
          it != this->_internal_map_string_nested_enum().end(); ++it) {
        target = TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::Funcs::InternalSerialize(73, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum = 74;
  if (!this->_internal_map_string_foreign_enum().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringForeignEnumEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_foreign_enum().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_foreign_enum().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >::const_iterator
          it = this->_internal_map_string_foreign_enum().begin();
          it != this->_internal_map_string_foreign_enum().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::Funcs::InternalSerialize(74, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >::const_iterator
          it = this->_internal_map_string_foreign_enum().begin();
          it != this->_internal_map_string_foreign_enum().end(); ++it) {
        target = TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::Funcs::InternalSerialize(74, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated int32 packed_int32 = 75 [packed = true];
  {
    int byte_size = _packed_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          75, _internal_packed_int32(), byte_size, target);
    }
  }

  // repeated int64 packed_int64 = 76 [packed = true];
  {
    int byte_size = _packed_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          76, _internal_packed_int64(), byte_size, target);
    }
  }

  // repeated uint32 packed_uint32 = 77 [packed = true];
  {
    int byte_size = _packed_uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          77, _internal_packed_uint32(), byte_size, target);
    }
  }

  // repeated uint64 packed_uint64 = 78 [packed = true];
  {
    int byte_size = _packed_uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          78, _internal_packed_uint64(), byte_size, target);
    }
  }

  // repeated sint32 packed_sint32 = 79 [packed = true];
  {
    int byte_size = _packed_sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          79, _internal_packed_sint32(), byte_size, target);
    }
  }

  // repeated sint64 packed_sint64 = 80 [packed = true];
  {
    int byte_size = _packed_sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          80, _internal_packed_sint64(), byte_size, target);
    }
  }

  // repeated fixed32 packed_fixed32 = 81 [packed = true];
  if (this->_internal_packed_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(81, _internal_packed_fixed32(), target);
  }

  // repeated fixed64 packed_fixed64 = 82 [packed = true];
  if (this->_internal_packed_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(82, _internal_packed_fixed64(), target);
  }

  // repeated sfixed32 packed_sfixed32 = 83 [packed = true];
  if (this->_internal_packed_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(83, _internal_packed_sfixed32(), target);
  }

  // repeated sfixed64 packed_sfixed64 = 84 [packed = true];
  if (this->_internal_packed_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(84, _internal_packed_sfixed64(), target);
  }

  // repeated float packed_float = 85 [packed = true];
  if (this->_internal_packed_float_size() > 0) {
    target = stream->WriteFixedPacked(85, _internal_packed_float(), target);
  }

  // repeated double packed_double = 86 [packed = true];
  if (this->_internal_packed_double_size() > 0) {
    target = stream->WriteFixedPacked(86, _internal_packed_double(), target);
  }

  // repeated bool packed_bool = 87 [packed = true];
  if (this->_internal_packed_bool_size() > 0) {
    target = stream->WriteFixedPacked(87, _internal_packed_bool(), target);
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true];
  {
    int byte_size = _packed_nested_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          88, packed_nested_enum_, byte_size, target);
    }
  }

  // repeated int32 unpacked_int32 = 89 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(89, this->_internal_unpacked_int32(i), target);
  }

  // repeated int64 unpacked_int64 = 90 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(90, this->_internal_unpacked_int64(i), target);
  }

  // repeated uint32 unpacked_uint32 = 91 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(91, this->_internal_unpacked_uint32(i), target);
  }

  // repeated uint64 unpacked_uint64 = 92 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(92, this->_internal_unpacked_uint64(i), target);
  }

  // repeated sint32 unpacked_sint32 = 93 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(93, this->_internal_unpacked_sint32(i), target);
  }

  // repeated sint64 unpacked_sint64 = 94 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(94, this->_internal_unpacked_sint64(i), target);
  }

  // repeated fixed32 unpacked_fixed32 = 95 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(95, this->_internal_unpacked_fixed32(i), target);
  }

  // repeated fixed64 unpacked_fixed64 = 96 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(96, this->_internal_unpacked_fixed64(i), target);
  }

  // repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(97, this->_internal_unpacked_sfixed32(i), target);
  }

  // repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(98, this->_internal_unpacked_sfixed64(i), target);
  }

  // repeated float unpacked_float = 99 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(99, this->_internal_unpacked_float(i), target);
  }

  // repeated double unpacked_double = 100 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(100, this->_internal_unpacked_double(i), target);
  }

  // repeated bool unpacked_bool = 101 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(101, this->_internal_unpacked_bool(i), target);
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_nested_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        102, this->_internal_unpacked_nested_enum(i), target);
  }

  switch (oneof_field_case()) {
    case kOneofUint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(111, this->_internal_oneof_uint32(), target);
      break;
    }
    case kOneofNestedMessage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          112, _Internal::oneof_nested_message(this), target, stream);
      break;
    }
    case kOneofString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_test_messages.proto2.TestAllTypesProto2.oneof_string");
      target = stream->WriteStringMaybeAliased(
          113, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          114, this->_internal_oneof_bytes(), target);
      break;
    }
    case kOneofBool: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(115, this->_internal_oneof_bool(), target);
      break;
    }
    case kOneofUint64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(116, this->_internal_oneof_uint64(), target);
      break;
    }
    case kOneofFloat: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(117, this->_internal_oneof_float(), target);
      break;
    }
    case kOneofDouble: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(118, this->_internal_oneof_double(), target);
      break;
    }
    case kOneofEnum: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        119, this->_internal_oneof_enum(), target);
      break;
    }
    default: ;
  }
  // Extension range [120, 201)
  target = _extensions_._InternalSerialize(
      120, 201, target, stream);

  // optional group Data = 201 { ... };
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        201, _Internal::data(this), target, stream);
  }

  // optional int32 fieldname1 = 401;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(401, this->_internal_fieldname1(), target);
  }

  // optional int32 field_name2 = 402;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(402, this->_internal_field_name2(), target);
  }

  // optional int32 _field_name3 = 403;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(403, this->_internal__field_name3(), target);
  }

  // optional int32 field__name4_ = 404;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(404, this->_internal_field__name4_(), target);
  }

  // optional int32 field0name5 = 405;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(405, this->_internal_field0name5(), target);
  }

  // optional int32 field_0_name6 = 406;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(406, this->_internal_field_0_name6(), target);
  }

  // optional int32 fieldName7 = 407;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(407, this->_internal_fieldname7(), target);
  }

  // optional int32 FieldName8 = 408;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(408, this->_internal_fieldname8(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 field_Name9 = 409;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(409, this->_internal_field_name9(), target);
  }

  // optional int32 Field_Name10 = 410;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(410, this->_internal_field_name10(), target);
  }

  // optional int32 FIELD_NAME11 = 411;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(411, this->_internal_field_name11(), target);
  }

  // optional int32 FIELD_name12 = 412;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(412, this->_internal_field_name12(), target);
  }

  // optional int32 __field_name13 = 413;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(413, this->_internal___field_name13(), target);
  }

  // optional int32 __Field_name14 = 414;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(414, this->_internal___field_name14(), target);
  }

  // optional int32 field__name15 = 415;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(415, this->_internal_field__name15(), target);
  }

  // optional int32 field__Name16 = 416;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(416, this->_internal_field__name16(), target);
  }

  // optional int32 field_name17__ = 417;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(417, this->_internal_field_name17__(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 Field_name18__ = 418;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(418, this->_internal_field_name18__(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.TestAllTypesProto2)
  return target;
}

size_t TestAllTypesProto2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 32;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int64_size());
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 37;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sfixed64_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_float_size());
    total_size += data_size;
  }

  // repeated double repeated_double = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_double_size());
    total_size += data_size;
  }

  // repeated bool repeated_bool = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_bool_size());
    total_size += data_size;
  }

  // repeated string repeated_string = 44;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_.size());
  for (int i = 0, n = repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 45;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_bytes_.size());
  for (int i = 0, n = repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      repeated_bytes_.Get(i));
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message = 48;
  total_size += 2UL * this->_internal_repeated_nested_message_size();
  for (const auto& msg : this->repeated_nested_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message = 49;
  total_size += 2UL * this->_internal_repeated_foreign_message_size();
  for (const auto& msg : this->repeated_foreign_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum = 51;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_nested_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum = 52;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_foreign_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_foreign_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_piece_.size());
  for (int i = 0, n = repeated_string_piece_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_piece_.Get(i));
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_cord_.size());
  for (int i = 0, n = repeated_cord_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_cord_.Get(i));
  }

  // map<int32, int32> map_int32_int32 = 56;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_int32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_map_int32_int32().begin();
      it != this->_internal_map_int32_int32().end(); ++it) {
    total_size += TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, int64> map_int64_int64 = 57;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int64_int64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_map_int64_int64().begin();
      it != this->_internal_map_int64_int64().end(); ++it) {
    total_size += TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> map_uint32_uint32 = 58;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint32_uint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_map_uint32_uint32().begin();
      it != this->_internal_map_uint32_uint32().end(); ++it) {
    total_size += TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, uint64> map_uint64_uint64 = 59;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint64_uint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
      it = this->_internal_map_uint64_uint64().begin();
      it != this->_internal_map_uint64_uint64().end(); ++it) {
    total_size += TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint32, sint32> map_sint32_sint32 = 60;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sint32_sint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_map_sint32_sint32().begin();
      it != this->_internal_map_sint32_sint32().end(); ++it) {
    total_size += TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint64, sint64> map_sint64_sint64 = 61;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sint64_sint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_map_sint64_sint64().begin();
      it != this->_internal_map_sint64_sint64().end(); ++it) {
    total_size += TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed32, fixed32> map_fixed32_fixed32 = 62;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_fixed32_fixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_map_fixed32_fixed32().begin();
      it != this->_internal_map_fixed32_fixed32().end(); ++it) {
    total_size += TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed64, fixed64> map_fixed64_fixed64 = 63;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_fixed64_fixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
      it = this->_internal_map_fixed64_fixed64().begin();
      it != this->_internal_map_fixed64_fixed64().end(); ++it) {
    total_size += TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sfixed32_sfixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_map_sfixed32_sfixed32().begin();
      it != this->_internal_map_sfixed32_sfixed32().end(); ++it) {
    total_size += TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sfixed64_sfixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_map_sfixed64_sfixed64().begin();
      it != this->_internal_map_sfixed64_sfixed64().end(); ++it) {
    total_size += TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, float> map_int32_float = 66;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_float_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
      it = this->_internal_map_int32_float().begin();
      it != this->_internal_map_int32_float().end(); ++it) {
    total_size += TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, double> map_int32_double = 67;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_double_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, double >::const_iterator
      it = this->_internal_map_int32_double().begin();
      it != this->_internal_map_int32_double().end(); ++it) {
    total_size += TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<bool, bool> map_bool_bool = 68;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_bool_bool_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_iterator
      it = this->_internal_map_bool_bool().begin();
      it != this->_internal_map_bool_bool().end(); ++it) {
    total_size += TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> map_string_string = 69;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_string_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_string_string().begin();
      it != this->_internal_map_string_string().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bytes> map_string_bytes = 70;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_bytes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_string_bytes().begin();
      it != this->_internal_map_string_bytes().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringBytesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message = 71;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_nested_message_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >::const_iterator
      it = this->_internal_map_string_nested_message().begin();
      it != this->_internal_map_string_nested_message().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message = 72;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_foreign_message_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >::const_iterator
      it = this->_internal_map_string_foreign_message().begin();
      it != this->_internal_map_string_foreign_message().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum = 73;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_nested_enum_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >::const_iterator
      it = this->_internal_map_string_nested_enum().begin();
      it != this->_internal_map_string_nested_enum().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum = 74;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_foreign_enum_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >::const_iterator
      it = this->_internal_map_string_foreign_enum().begin();
      it != this->_internal_map_string_foreign_enum().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 packed_int32 = 75 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->packed_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 packed_int64 = 76 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->packed_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 packed_uint32 = 77 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->packed_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 packed_uint64 = 78 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->packed_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 packed_sint32 = 79 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->packed_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 packed_sint64 = 80 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->packed_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 packed_fixed32 = 81 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_fixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 packed_fixed64 = 82 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_fixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed32 packed_sfixed32 = 83 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sfixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed64 packed_sfixed64 = 84 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sfixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float packed_float = 85 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_float_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double packed_double = 86 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_double_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool packed_bool = 87 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_bool_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_packed_nested_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_nested_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 unpacked_int32 = 89 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->unpacked_int32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_int32_size());
    total_size += data_size;
  }

  // repeated int64 unpacked_int64 = 90 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->unpacked_int64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_int64_size());
    total_size += data_size;
  }

  // repeated uint32 unpacked_uint32 = 91 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unpacked_uint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 unpacked_uint64 = 92 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->unpacked_uint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 unpacked_sint32 = 93 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->unpacked_sint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 unpacked_sint64 = 94 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->unpacked_sint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 unpacked_fixed32 = 95 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 unpacked_fixed64 = 96 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sfixed64_size());
    total_size += data_size;
  }

  // repeated float unpacked_float = 99 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_float_size());
    total_size += data_size;
  }

  // repeated double unpacked_double = 100 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_double_size());
    total_size += data_size;
  }

  // repeated bool unpacked_bool = 101 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_bool_size());
    total_size += data_size;
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_unpacked_nested_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string optional_string = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional bytes optional_bytes = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

    // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string_piece());
    }

    // optional string optional_cord = 25 [ctype = CORD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_cord());
    }

    // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_nested_message_);
    }

    // optional .protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message = 19;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_foreign_message_);
    }

    // optional .protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recursive_message_);
    }

    // optional group Data = 201 { ... };
    if (cached_has_bits & 0x00000080u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *data_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 optional_int64 = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_optional_int64());
    }

    // optional int32 optional_int32 = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_optional_int32());
    }

    // optional uint32 optional_uint32 = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_optional_uint32());
    }

    // optional uint64 optional_uint64 = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_optional_uint64());
    }

    // optional sint64 optional_sint64 = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_optional_sint64());
    }

    // optional sint32 optional_sint32 = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_optional_sint32());
    }

    // optional fixed32 optional_fixed32 = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional fixed64 optional_fixed64 = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional sfixed64 optional_sfixed64 = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional sfixed32 optional_sfixed32 = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float optional_float = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional double optional_double = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional bool optional_bool = 13;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_nested_enum());
    }

    // optional int32 Field_name18__ = 418;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field_name18__());
    }

    // optional .protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_foreign_enum());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 fieldname1 = 401;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fieldname1());
    }

    // optional int32 field_name2 = 402;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field_name2());
    }

    // optional int32 _field_name3 = 403;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal__field_name3());
    }

    // optional int32 field__name4_ = 404;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field__name4_());
    }

    // optional int32 field0name5 = 405;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field0name5());
    }

    // optional int32 field_0_name6 = 406;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field_0_name6());
    }

    // optional int32 fieldName7 = 407;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fieldname7());
    }

    // optional int32 FieldName8 = 408;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fieldname8());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 field_Name9 = 409;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field_name9());
    }

    // optional int32 Field_Name10 = 410;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field_name10());
    }

    // optional int32 FIELD_NAME11 = 411;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field_name11());
    }

    // optional int32 FIELD_name12 = 412;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field_name12());
    }

    // optional int32 __field_name13 = 413;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal___field_name13());
    }

    // optional int32 __Field_name14 = 414;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal___field_name14());
    }

    // optional int32 field__name15 = 415;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field__name15());
    }

    // optional int32 field__Name16 = 416;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_field__name16());
    }

  }
  // optional int32 field_name17__ = 417;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_name17__());
  }

  switch (oneof_field_case()) {
    // uint32 oneof_uint32 = 111;
    case kOneofUint32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage oneof_nested_message = 112;
    case kOneofNestedMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_nested_message_);
      break;
    }
    // string oneof_string = 113;
    case kOneofString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 114;
    case kOneofBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    // bool oneof_bool = 115;
    case kOneofBool: {
      total_size += 2 + 1;
      break;
    }
    // uint64 oneof_uint64 = 116;
    case kOneofUint64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_oneof_uint64());
      break;
    }
    // float oneof_float = 117;
    case kOneofFloat: {
      total_size += 2 + 4;
      break;
    }
    // double oneof_double = 118;
    case kOneofDouble: {
      total_size += 2 + 8;
      break;
    }
    // .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum oneof_enum = 119;
    case kOneofEnum: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesProto2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypesProto2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypesProto2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto2.TestAllTypesProto2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto2.TestAllTypesProto2)
    MergeFrom(*source);
  }
}

void TestAllTypesProto2::MergeFrom(const TestAllTypesProto2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  repeated_foreign_message_.MergeFrom(from.repeated_foreign_message_);
  repeated_nested_enum_.MergeFrom(from.repeated_nested_enum_);
  repeated_foreign_enum_.MergeFrom(from.repeated_foreign_enum_);
  repeated_string_piece_.MergeFrom(from.repeated_string_piece_);
  repeated_cord_.MergeFrom(from.repeated_cord_);
  map_int32_int32_.MergeFrom(from.map_int32_int32_);
  map_int64_int64_.MergeFrom(from.map_int64_int64_);
  map_uint32_uint32_.MergeFrom(from.map_uint32_uint32_);
  map_uint64_uint64_.MergeFrom(from.map_uint64_uint64_);
  map_sint32_sint32_.MergeFrom(from.map_sint32_sint32_);
  map_sint64_sint64_.MergeFrom(from.map_sint64_sint64_);
  map_fixed32_fixed32_.MergeFrom(from.map_fixed32_fixed32_);
  map_fixed64_fixed64_.MergeFrom(from.map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.MergeFrom(from.map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.MergeFrom(from.map_sfixed64_sfixed64_);
  map_int32_float_.MergeFrom(from.map_int32_float_);
  map_int32_double_.MergeFrom(from.map_int32_double_);
  map_bool_bool_.MergeFrom(from.map_bool_bool_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_string_bytes_.MergeFrom(from.map_string_bytes_);
  map_string_nested_message_.MergeFrom(from.map_string_nested_message_);
  map_string_foreign_message_.MergeFrom(from.map_string_foreign_message_);
  map_string_nested_enum_.MergeFrom(from.map_string_nested_enum_);
  map_string_foreign_enum_.MergeFrom(from.map_string_foreign_enum_);
  packed_int32_.MergeFrom(from.packed_int32_);
  packed_int64_.MergeFrom(from.packed_int64_);
  packed_uint32_.MergeFrom(from.packed_uint32_);
  packed_uint64_.MergeFrom(from.packed_uint64_);
  packed_sint32_.MergeFrom(from.packed_sint32_);
  packed_sint64_.MergeFrom(from.packed_sint64_);
  packed_fixed32_.MergeFrom(from.packed_fixed32_);
  packed_fixed64_.MergeFrom(from.packed_fixed64_);
  packed_sfixed32_.MergeFrom(from.packed_sfixed32_);
  packed_sfixed64_.MergeFrom(from.packed_sfixed64_);
  packed_float_.MergeFrom(from.packed_float_);
  packed_double_.MergeFrom(from.packed_double_);
  packed_bool_.MergeFrom(from.packed_bool_);
  packed_nested_enum_.MergeFrom(from.packed_nested_enum_);
  unpacked_int32_.MergeFrom(from.unpacked_int32_);
  unpacked_int64_.MergeFrom(from.unpacked_int64_);
  unpacked_uint32_.MergeFrom(from.unpacked_uint32_);
  unpacked_uint64_.MergeFrom(from.unpacked_uint64_);
  unpacked_sint32_.MergeFrom(from.unpacked_sint32_);
  unpacked_sint64_.MergeFrom(from.unpacked_sint64_);
  unpacked_fixed32_.MergeFrom(from.unpacked_fixed32_);
  unpacked_fixed64_.MergeFrom(from.unpacked_fixed64_);
  unpacked_sfixed32_.MergeFrom(from.unpacked_sfixed32_);
  unpacked_sfixed64_.MergeFrom(from.unpacked_sfixed64_);
  unpacked_float_.MergeFrom(from.unpacked_float_);
  unpacked_double_.MergeFrom(from.unpacked_double_);
  unpacked_bool_.MergeFrom(from.unpacked_bool_);
  unpacked_nested_enum_.MergeFrom(from.unpacked_nested_enum_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_optional_string_piece(from._internal_optional_string_piece());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_optional_cord(from._internal_optional_cord());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_optional_nested_message()->::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage::MergeFrom(from._internal_optional_nested_message());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_optional_foreign_message()->::protobuf_test_messages::proto2::ForeignMessageProto2::MergeFrom(from._internal_optional_foreign_message());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_recursive_message()->::protobuf_test_messages::proto2::TestAllTypesProto2::MergeFrom(from._internal_recursive_message());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_data()->::protobuf_test_messages::proto2::TestAllTypesProto2_Data::MergeFrom(from._internal_data());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      optional_int64_ = from.optional_int64_;
    }
    if (cached_has_bits & 0x00000200u) {
      optional_int32_ = from.optional_int32_;
    }
    if (cached_has_bits & 0x00000400u) {
      optional_uint32_ = from.optional_uint32_;
    }
    if (cached_has_bits & 0x00000800u) {
      optional_uint64_ = from.optional_uint64_;
    }
    if (cached_has_bits & 0x00001000u) {
      optional_sint64_ = from.optional_sint64_;
    }
    if (cached_has_bits & 0x00002000u) {
      optional_sint32_ = from.optional_sint32_;
    }
    if (cached_has_bits & 0x00004000u) {
      optional_fixed32_ = from.optional_fixed32_;
    }
    if (cached_has_bits & 0x00008000u) {
      optional_fixed64_ = from.optional_fixed64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      optional_sfixed64_ = from.optional_sfixed64_;
    }
    if (cached_has_bits & 0x00020000u) {
      optional_sfixed32_ = from.optional_sfixed32_;
    }
    if (cached_has_bits & 0x00040000u) {
      optional_float_ = from.optional_float_;
    }
    if (cached_has_bits & 0x00080000u) {
      optional_double_ = from.optional_double_;
    }
    if (cached_has_bits & 0x00100000u) {
      optional_bool_ = from.optional_bool_;
    }
    if (cached_has_bits & 0x00200000u) {
      optional_nested_enum_ = from.optional_nested_enum_;
    }
    if (cached_has_bits & 0x00400000u) {
      field_name18___ = from.field_name18___;
    }
    if (cached_has_bits & 0x00800000u) {
      optional_foreign_enum_ = from.optional_foreign_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      fieldname1_ = from.fieldname1_;
    }
    if (cached_has_bits & 0x02000000u) {
      field_name2_ = from.field_name2_;
    }
    if (cached_has_bits & 0x04000000u) {
      _field_name3_ = from._field_name3_;
    }
    if (cached_has_bits & 0x08000000u) {
      field__name4__ = from.field__name4__;
    }
    if (cached_has_bits & 0x10000000u) {
      field0name5_ = from.field0name5_;
    }
    if (cached_has_bits & 0x20000000u) {
      field_0_name6_ = from.field_0_name6_;
    }
    if (cached_has_bits & 0x40000000u) {
      fieldname7_ = from.fieldname7_;
    }
    if (cached_has_bits & 0x80000000u) {
      fieldname8_ = from.fieldname8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      field_name9_ = from.field_name9_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_name10_ = from.field_name10_;
    }
    if (cached_has_bits & 0x00000004u) {
      field_name11_ = from.field_name11_;
    }
    if (cached_has_bits & 0x00000008u) {
      field_name12_ = from.field_name12_;
    }
    if (cached_has_bits & 0x00000010u) {
      __field_name13_ = from.__field_name13_;
    }
    if (cached_has_bits & 0x00000020u) {
      __field_name14_ = from.__field_name14_;
    }
    if (cached_has_bits & 0x00000040u) {
      field__name15_ = from.field__name15_;
    }
    if (cached_has_bits & 0x00000080u) {
      field__name16_ = from.field__name16_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_field_name17__(from._internal_field_name17__());
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofBool: {
      _internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofUint64: {
      _internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofFloat: {
      _internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofDouble: {
      _internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
}

void TestAllTypesProto2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypesProto2::CopyFrom(const TestAllTypesProto2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(repeated_nested_message_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(map_string_nested_message_)) return false;
  if (_internal_has_optional_nested_message()) {
    if (!optional_nested_message_->IsInitialized()) return false;
  }
  if (_internal_has_recursive_message()) {
    if (!recursive_message_->IsInitialized()) return false;
  }
  switch (oneof_field_case()) {
    case kOneofUint32: {
      break;
    }
    case kOneofNestedMessage: {
      if (has_oneof_nested_message()) {
        if (!this->oneof_nested_message().IsInitialized()) return false;
      }
      break;
    }
    case kOneofString: {
      break;
    }
    case kOneofBytes: {
      break;
    }
    case kOneofBool: {
      break;
    }
    case kOneofUint64: {
      break;
    }
    case kOneofFloat: {
      break;
    }
    case kOneofDouble: {
      break;
    }
    case kOneofEnum: {
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  return true;
}

void TestAllTypesProto2::InternalSwap(TestAllTypesProto2* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_sint32_.InternalSwap(&other->repeated_sint32_);
  repeated_sint64_.InternalSwap(&other->repeated_sint64_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_sfixed32_.InternalSwap(&other->repeated_sfixed32_);
  repeated_sfixed64_.InternalSwap(&other->repeated_sfixed64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  repeated_nested_message_.InternalSwap(&other->repeated_nested_message_);
  repeated_foreign_message_.InternalSwap(&other->repeated_foreign_message_);
  repeated_nested_enum_.InternalSwap(&other->repeated_nested_enum_);
  repeated_foreign_enum_.InternalSwap(&other->repeated_foreign_enum_);
  repeated_string_piece_.InternalSwap(&other->repeated_string_piece_);
  repeated_cord_.InternalSwap(&other->repeated_cord_);
  map_int32_int32_.Swap(&other->map_int32_int32_);
  map_int64_int64_.Swap(&other->map_int64_int64_);
  map_uint32_uint32_.Swap(&other->map_uint32_uint32_);
  map_uint64_uint64_.Swap(&other->map_uint64_uint64_);
  map_sint32_sint32_.Swap(&other->map_sint32_sint32_);
  map_sint64_sint64_.Swap(&other->map_sint64_sint64_);
  map_fixed32_fixed32_.Swap(&other->map_fixed32_fixed32_);
  map_fixed64_fixed64_.Swap(&other->map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.Swap(&other->map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.Swap(&other->map_sfixed64_sfixed64_);
  map_int32_float_.Swap(&other->map_int32_float_);
  map_int32_double_.Swap(&other->map_int32_double_);
  map_bool_bool_.Swap(&other->map_bool_bool_);
  map_string_string_.Swap(&other->map_string_string_);
  map_string_bytes_.Swap(&other->map_string_bytes_);
  map_string_nested_message_.Swap(&other->map_string_nested_message_);
  map_string_foreign_message_.Swap(&other->map_string_foreign_message_);
  map_string_nested_enum_.Swap(&other->map_string_nested_enum_);
  map_string_foreign_enum_.Swap(&other->map_string_foreign_enum_);
  packed_int32_.InternalSwap(&other->packed_int32_);
  packed_int64_.InternalSwap(&other->packed_int64_);
  packed_uint32_.InternalSwap(&other->packed_uint32_);
  packed_uint64_.InternalSwap(&other->packed_uint64_);
  packed_sint32_.InternalSwap(&other->packed_sint32_);
  packed_sint64_.InternalSwap(&other->packed_sint64_);
  packed_fixed32_.InternalSwap(&other->packed_fixed32_);
  packed_fixed64_.InternalSwap(&other->packed_fixed64_);
  packed_sfixed32_.InternalSwap(&other->packed_sfixed32_);
  packed_sfixed64_.InternalSwap(&other->packed_sfixed64_);
  packed_float_.InternalSwap(&other->packed_float_);
  packed_double_.InternalSwap(&other->packed_double_);
  packed_bool_.InternalSwap(&other->packed_bool_);
  packed_nested_enum_.InternalSwap(&other->packed_nested_enum_);
  unpacked_int32_.InternalSwap(&other->unpacked_int32_);
  unpacked_int64_.InternalSwap(&other->unpacked_int64_);
  unpacked_uint32_.InternalSwap(&other->unpacked_uint32_);
  unpacked_uint64_.InternalSwap(&other->unpacked_uint64_);
  unpacked_sint32_.InternalSwap(&other->unpacked_sint32_);
  unpacked_sint64_.InternalSwap(&other->unpacked_sint64_);
  unpacked_fixed32_.InternalSwap(&other->unpacked_fixed32_);
  unpacked_fixed64_.InternalSwap(&other->unpacked_fixed64_);
  unpacked_sfixed32_.InternalSwap(&other->unpacked_sfixed32_);
  unpacked_sfixed64_.InternalSwap(&other->unpacked_sfixed64_);
  unpacked_float_.InternalSwap(&other->unpacked_float_);
  unpacked_double_.InternalSwap(&other->unpacked_double_);
  unpacked_bool_.InternalSwap(&other->unpacked_bool_);
  unpacked_nested_enum_.InternalSwap(&other->unpacked_nested_enum_);
  optional_string_.Swap(&other->optional_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_bytes_.Swap(&other->optional_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_string_piece_.Swap(&other->optional_string_piece_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_cord_.Swap(&other->optional_cord_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypesProto2, field_name17___)
      + sizeof(TestAllTypesProto2::field_name17___)
      - PROTOBUF_FIELD_OFFSET(TestAllTypesProto2, optional_nested_message_)>(
          reinterpret_cast<char*>(&optional_nested_message_),
          reinterpret_cast<char*>(&other->optional_nested_message_));
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForeignMessageProto2::InitAsDefaultInstance() {
}
class ForeignMessageProto2::_Internal {
 public:
  using HasBits = decltype(std::declval<ForeignMessageProto2>()._has_bits_);
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ForeignMessageProto2::ForeignMessageProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.ForeignMessageProto2)
}
ForeignMessageProto2::ForeignMessageProto2(const ForeignMessageProto2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  c_ = from.c_;
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.ForeignMessageProto2)
}

void ForeignMessageProto2::SharedCtor() {
  c_ = 0;
}

ForeignMessageProto2::~ForeignMessageProto2() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.ForeignMessageProto2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForeignMessageProto2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ForeignMessageProto2::ArenaDtor(void* object) {
  ForeignMessageProto2* _this = reinterpret_cast< ForeignMessageProto2* >(object);
  (void)_this;
}
void ForeignMessageProto2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForeignMessageProto2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForeignMessageProto2& ForeignMessageProto2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForeignMessageProto2_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  return *internal_default_instance();
}


void ForeignMessageProto2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForeignMessageProto2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForeignMessageProto2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 c = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.ForeignMessageProto2)
  return target;
}

size_t ForeignMessageProto2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 c = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_c());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForeignMessageProto2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  GOOGLE_DCHECK_NE(&from, this);
  const ForeignMessageProto2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForeignMessageProto2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto2.ForeignMessageProto2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto2.ForeignMessageProto2)
    MergeFrom(*source);
  }
}

void ForeignMessageProto2::MergeFrom(const ForeignMessageProto2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_c()) {
    _internal_set_c(from._internal_c());
  }
}

void ForeignMessageProto2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForeignMessageProto2::CopyFrom(const ForeignMessageProto2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessageProto2::IsInitialized() const {
  return true;
}

void ForeignMessageProto2::InternalSwap(ForeignMessageProto2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(c_, other->c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForeignMessageProto2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnknownToTestAllTypes_OptionalGroup::InitAsDefaultInstance() {
}
class UnknownToTestAllTypes_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownToTestAllTypes_OptionalGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnknownToTestAllTypes_OptionalGroup::UnknownToTestAllTypes_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
}
UnknownToTestAllTypes_OptionalGroup::UnknownToTestAllTypes_OptionalGroup(const UnknownToTestAllTypes_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
}

void UnknownToTestAllTypes_OptionalGroup::SharedCtor() {
  a_ = 0;
}

UnknownToTestAllTypes_OptionalGroup::~UnknownToTestAllTypes_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnknownToTestAllTypes_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnknownToTestAllTypes_OptionalGroup::ArenaDtor(void* object) {
  UnknownToTestAllTypes_OptionalGroup* _this = reinterpret_cast< UnknownToTestAllTypes_OptionalGroup* >(object);
  (void)_this;
}
void UnknownToTestAllTypes_OptionalGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnknownToTestAllTypes_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnknownToTestAllTypes_OptionalGroup& UnknownToTestAllTypes_OptionalGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnknownToTestAllTypes_OptionalGroup_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  return *internal_default_instance();
}


void UnknownToTestAllTypes_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownToTestAllTypes_OptionalGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnknownToTestAllTypes_OptionalGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  return target;
}

size_t UnknownToTestAllTypes_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownToTestAllTypes_OptionalGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const UnknownToTestAllTypes_OptionalGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnknownToTestAllTypes_OptionalGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
    MergeFrom(*source);
  }
}

void UnknownToTestAllTypes_OptionalGroup::MergeFrom(const UnknownToTestAllTypes_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void UnknownToTestAllTypes_OptionalGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownToTestAllTypes_OptionalGroup::CopyFrom(const UnknownToTestAllTypes_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownToTestAllTypes_OptionalGroup::IsInitialized() const {
  return true;
}

void UnknownToTestAllTypes_OptionalGroup::InternalSwap(UnknownToTestAllTypes_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownToTestAllTypes_OptionalGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnknownToTestAllTypes::InitAsDefaultInstance() {
  ::protobuf_test_messages::proto2::_UnknownToTestAllTypes_default_instance_._instance.get_mutable()->nested_message_ = const_cast< ::protobuf_test_messages::proto2::ForeignMessageProto2*>(
      ::protobuf_test_messages::proto2::ForeignMessageProto2::internal_default_instance());
  ::protobuf_test_messages::proto2::_UnknownToTestAllTypes_default_instance_._instance.get_mutable()->optionalgroup_ = const_cast< ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup*>(
      ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup::internal_default_instance());
}
class UnknownToTestAllTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownToTestAllTypes>()._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_test_messages::proto2::ForeignMessageProto2& nested_message(const UnknownToTestAllTypes* msg);
  static void set_has_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup& optionalgroup(const UnknownToTestAllTypes* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::protobuf_test_messages::proto2::ForeignMessageProto2&
UnknownToTestAllTypes::_Internal::nested_message(const UnknownToTestAllTypes* msg) {
  return *msg->nested_message_;
}
const ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup&
UnknownToTestAllTypes::_Internal::optionalgroup(const UnknownToTestAllTypes* msg) {
  return *msg->optionalgroup_;
}
UnknownToTestAllTypes::UnknownToTestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  repeated_int32_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.UnknownToTestAllTypes)
}
UnknownToTestAllTypes::UnknownToTestAllTypes(const UnknownToTestAllTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_int32_(from.repeated_int32_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_string()) {
    optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string(),
      GetArena());
  }
  if (from._internal_has_nested_message()) {
    nested_message_ = new ::protobuf_test_messages::proto2::ForeignMessageProto2(*from.nested_message_);
  } else {
    nested_message_ = nullptr;
  }
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  ::memcpy(&optional_int32_, &from.optional_int32_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_bool_) -
    reinterpret_cast<char*>(&optional_int32_)) + sizeof(optional_bool_));
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.UnknownToTestAllTypes)
}

void UnknownToTestAllTypes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnknownToTestAllTypes_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nested_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_bool_) -
      reinterpret_cast<char*>(&nested_message_)) + sizeof(optional_bool_));
}

UnknownToTestAllTypes::~UnknownToTestAllTypes() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnknownToTestAllTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nested_message_;
  if (this != internal_default_instance()) delete optionalgroup_;
}

void UnknownToTestAllTypes::ArenaDtor(void* object) {
  UnknownToTestAllTypes* _this = reinterpret_cast< UnknownToTestAllTypes* >(object);
  (void)_this;
}
void UnknownToTestAllTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnknownToTestAllTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnknownToTestAllTypes& UnknownToTestAllTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnknownToTestAllTypes_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto.base);
  return *internal_default_instance();
}


void UnknownToTestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(nested_message_ != nullptr);
      nested_message_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&optional_int32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_bool_) -
        reinterpret_cast<char*>(&optional_int32_)) + sizeof(optional_bool_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownToTestAllTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_optional_int32(&has_bits);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string optional_string = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.ForeignMessageProto2 nested_message = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group OptionalGroup = 1004 { ... };
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 99)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 8035);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optional_bool = 1006;
      case 1006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_optional_bool(&has_bits);
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 1011;
      case 1011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8088>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnknownToTestAllTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 optional_int32 = 1001;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1001, this->_internal_optional_int32(), target);
  }

  // optional string optional_string = 1002;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_string");
    target = stream->WriteStringMaybeAliased(
        1002, this->_internal_optional_string(), target);
  }

  // optional .protobuf_test_messages.proto2.ForeignMessageProto2 nested_message = 1003;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1003, _Internal::nested_message(this), target, stream);
  }

  // optional group OptionalGroup = 1004 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        1004, _Internal::optionalgroup(this), target, stream);
  }

  // optional bool optional_bool = 1006;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1006, this->_internal_optional_bool(), target);
  }

  // repeated int32 repeated_int32 = 1011;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1011, this->_internal_repeated_int32(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  return target;
}

size_t UnknownToTestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 1011;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string optional_string = 1002;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional .protobuf_test_messages.proto2.ForeignMessageProto2 nested_message = 1003;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nested_message_);
    }

    // optional group OptionalGroup = 1004 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

    // optional int32 optional_int32 = 1001;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_optional_int32());
    }

    // optional bool optional_bool = 1006;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownToTestAllTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const UnknownToTestAllTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnknownToTestAllTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto2.UnknownToTestAllTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto2.UnknownToTestAllTypes)
    MergeFrom(*source);
  }
}

void UnknownToTestAllTypes::MergeFrom(const UnknownToTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_nested_message()->::protobuf_test_messages::proto2::ForeignMessageProto2::MergeFrom(from._internal_nested_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optionalgroup()->::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
    if (cached_has_bits & 0x00000008u) {
      optional_int32_ = from.optional_int32_;
    }
    if (cached_has_bits & 0x00000010u) {
      optional_bool_ = from.optional_bool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnknownToTestAllTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownToTestAllTypes::CopyFrom(const UnknownToTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownToTestAllTypes::IsInitialized() const {
  return true;
}

void UnknownToTestAllTypes::InternalSwap(UnknownToTestAllTypes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  optional_string_.Swap(&other->optional_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnknownToTestAllTypes, optional_bool_)
      + sizeof(UnknownToTestAllTypes::optional_bool_)
      - PROTOBUF_FIELD_OFFSET(UnknownToTestAllTypes, nested_message_)>(
          reinterpret_cast<char*>(&nested_message_),
          reinterpret_cast<char*>(&other->nested_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownToTestAllTypes::GetMetadata() const {
  return GetMetadataStatic();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestAllTypesProto2_MessageSetCorrectExtension1::kMessageSetExtensionFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1 >, 11, false >
  TestAllTypesProto2_MessageSetCorrectExtension1::message_set_extension(kMessageSetExtensionFieldNumber, ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestAllTypesProto2_MessageSetCorrectExtension2::kMessageSetExtensionFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2 >, 11, false >
  TestAllTypesProto2_MessageSetCorrectExtension2::message_set_extension(kMessageSetExtensionFieldNumber, ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2::default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_test_messages::proto2::TestAllTypesProto2,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  extension_int32(kExtensionInt32FieldNumber, 0);

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto2
}  // namespace protobuf_test_messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::ForeignMessageProto2* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::ForeignMessageProto2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::ForeignMessageProto2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::UnknownToTestAllTypes* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::UnknownToTestAllTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::UnknownToTestAllTypes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
