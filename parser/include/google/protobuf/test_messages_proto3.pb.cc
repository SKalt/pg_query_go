// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/test_messages_proto3.proto

#include "google/protobuf/test_messages_proto3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BytesValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForeignMessage_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<33> scc_info_TestAllTypesProto3_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto;
namespace protobuf_test_messages {
namespace proto3 {
class TestAllTypesProto3_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_NestedMessage> _instance;
} _TestAllTypesProto3_NestedMessage_default_instance_;
class TestAllTypesProto3_MapInt32Int32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapInt32Int32Entry_DoNotUse> _instance;
} _TestAllTypesProto3_MapInt32Int32Entry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapInt64Int64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapInt64Int64Entry_DoNotUse> _instance;
} _TestAllTypesProto3_MapInt64Int64Entry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse> _instance;
} _TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse> _instance;
} _TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse> _instance;
} _TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse> _instance;
} _TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse> _instance;
} _TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse> _instance;
} _TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse> _instance;
} _TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse> _instance;
} _TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapInt32FloatEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapInt32FloatEntry_DoNotUse> _instance;
} _TestAllTypesProto3_MapInt32FloatEntry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse> _instance;
} _TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapBoolBoolEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapBoolBoolEntry_DoNotUse> _instance;
} _TestAllTypesProto3_MapBoolBoolEntry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapStringStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapStringStringEntry_DoNotUse> _instance;
} _TestAllTypesProto3_MapStringStringEntry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapStringBytesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapStringBytesEntry_DoNotUse> _instance;
} _TestAllTypesProto3_MapStringBytesEntry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse> _instance;
} _TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse> _instance;
} _TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse> _instance;
} _TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse_default_instance_;
class TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse> _instance;
} _TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse_default_instance_;
class TestAllTypesProto3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAllTypesProto3> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 oneof_uint32_;
  const ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage* oneof_nested_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
  bool oneof_bool_;
  ::PROTOBUF_NAMESPACE_ID::uint64 oneof_uint64_;
  float oneof_float_;
  double oneof_double_;
  int oneof_enum_;
} _TestAllTypesProto3_default_instance_;
class ForeignMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForeignMessage> _instance;
} _ForeignMessage_default_instance_;
}  // namespace proto3
}  // namespace protobuf_test_messages
static void InitDefaultsscc_info_ForeignMessage_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_ForeignMessage_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::ForeignMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_test_messages::proto3::ForeignMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForeignMessage_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForeignMessage_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_NestedMessage_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse();
  }
  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage::InitAsDefaultInstance();
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse::InitAsDefaultInstance();
  ::protobuf_test_messages::proto3::TestAllTypesProto3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<33> scc_info_TestAllTypesProto3_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 33, 0, InitDefaultsscc_info_TestAllTypesProto3_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {
      &scc_info_ForeignMessage_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_UInt64Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BytesValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapBoolBoolEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapInt32FloatEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapInt32Int32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapInt64Int64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringBytesEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringBytesEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringBytesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {
      &scc_info_ForeignMessage_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringStringEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringStringEntry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringStringEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static void InitDefaultsscc_info_TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_test_messages::proto3::_TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse();
  }
  ::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage, corecursive_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringStringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringStringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringStringEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringBytesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringBytesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringBytesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringBytesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_aliased_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, recursive_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, packed_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, unpacked_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_int32_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_int64_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_uint32_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_uint64_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_sint32_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_sint64_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_fixed32_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_fixed64_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_sfixed32_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_sfixed64_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_int32_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_int32_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_bool_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_string_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_string_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_string_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_string_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_string_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, map_string_foreign_enum_),
  offsetof(::protobuf_test_messages::proto3::TestAllTypesProto3DefaultTypeInternal, oneof_uint32_),
  offsetof(::protobuf_test_messages::proto3::TestAllTypesProto3DefaultTypeInternal, oneof_nested_message_),
  offsetof(::protobuf_test_messages::proto3::TestAllTypesProto3DefaultTypeInternal, oneof_string_),
  offsetof(::protobuf_test_messages::proto3::TestAllTypesProto3DefaultTypeInternal, oneof_bytes_),
  offsetof(::protobuf_test_messages::proto3::TestAllTypesProto3DefaultTypeInternal, oneof_bool_),
  offsetof(::protobuf_test_messages::proto3::TestAllTypesProto3DefaultTypeInternal, oneof_uint64_),
  offsetof(::protobuf_test_messages::proto3::TestAllTypesProto3DefaultTypeInternal, oneof_float_),
  offsetof(::protobuf_test_messages::proto3::TestAllTypesProto3DefaultTypeInternal, oneof_double_),
  offsetof(::protobuf_test_messages::proto3::TestAllTypesProto3DefaultTypeInternal, oneof_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_bool_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_int32_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_int64_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_uint32_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_uint64_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_float_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_double_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_string_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_bytes_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_bool_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_int32_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_int64_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_uint32_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_uint64_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_float_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_double_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_string_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_bytes_wrapper_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_duration_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_timestamp_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_field_mask_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_struct_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_any_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, optional_value_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_duration_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_timestamp_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_fieldmask_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_struct_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_any_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_value_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, repeated_list_value_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, fieldname1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field_name2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, _field_name3_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field__name4__),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field0name5_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field_0_name6_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, fieldname7_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, fieldname8_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field_name9_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field_name10_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field_name11_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field_name12_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, __field_name13_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, __field_name14_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field__name15_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field__name16_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field_name17___),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, field_name18___),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::TestAllTypesProto3, oneof_field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::ForeignMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto3::ForeignMessage, c_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage)},
  { 7, 14, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse)},
  { 16, 23, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse)},
  { 25, 32, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse)},
  { 34, 41, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse)},
  { 43, 50, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse)},
  { 52, 59, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse)},
  { 61, 68, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse)},
  { 70, 77, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse)},
  { 79, 86, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse)},
  { 88, 95, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse)},
  { 97, 104, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse)},
  { 106, 113, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse)},
  { 115, 122, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse)},
  { 124, 131, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringStringEntry_DoNotUse)},
  { 133, 140, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringBytesEntry_DoNotUse)},
  { 142, 149, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse)},
  { 151, 158, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse)},
  { 160, 167, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse)},
  { 169, 176, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse)},
  { 178, -1, sizeof(::protobuf_test_messages::proto3::TestAllTypesProto3)},
  { 333, -1, sizeof(::protobuf_test_messages::proto3::ForeignMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapInt32Int32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapInt64Int64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapInt32FloatEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapBoolBoolEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringBytesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_test_messages::proto3::_ForeignMessage_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*google/protobuf/test_messages_proto3.p"
  "roto\022\035protobuf_test_messages.proto3\032\031goo"
  "gle/protobuf/any.proto\032\036google/protobuf/"
  "duration.proto\032 google/protobuf/field_ma"
  "sk.proto\032\034google/protobuf/struct.proto\032\037"
  "google/protobuf/timestamp.proto\032\036google/"
  "protobuf/wrappers.proto\"\277D\n\022TestAllTypes"
  "Proto3\022\026\n\016optional_int32\030\001 \001(\005\022\026\n\016option"
  "al_int64\030\002 \001(\003\022\027\n\017optional_uint32\030\003 \001(\r\022"
  "\027\n\017optional_uint64\030\004 \001(\004\022\027\n\017optional_sin"
  "t32\030\005 \001(\021\022\027\n\017optional_sint64\030\006 \001(\022\022\030\n\020op"
  "tional_fixed32\030\007 \001(\007\022\030\n\020optional_fixed64"
  "\030\010 \001(\006\022\031\n\021optional_sfixed32\030\t \001(\017\022\031\n\021opt"
  "ional_sfixed64\030\n \001(\020\022\026\n\016optional_float\030\013"
  " \001(\002\022\027\n\017optional_double\030\014 \001(\001\022\025\n\roptiona"
  "l_bool\030\r \001(\010\022\027\n\017optional_string\030\016 \001(\t\022\026\n"
  "\016optional_bytes\030\017 \001(\014\022`\n\027optional_nested"
  "_message\030\022 \001(\0132\?.protobuf_test_messages."
  "proto3.TestAllTypesProto3.NestedMessage\022"
  "O\n\030optional_foreign_message\030\023 \001(\0132-.prot"
  "obuf_test_messages.proto3.ForeignMessage"
  "\022Z\n\024optional_nested_enum\030\025 \001(\0162<.protobu"
  "f_test_messages.proto3.TestAllTypesProto"
  "3.NestedEnum\022I\n\025optional_foreign_enum\030\026 "
  "\001(\0162*.protobuf_test_messages.proto3.Fore"
  "ignEnum\022\\\n\025optional_aliased_enum\030\027 \001(\0162="
  ".protobuf_test_messages.proto3.TestAllTy"
  "pesProto3.AliasedEnum\022!\n\025optional_string"
  "_piece\030\030 \001(\tB\002\010\002\022\031\n\roptional_cord\030\031 \001(\tB"
  "\002\010\001\022L\n\021recursive_message\030\033 \001(\01321.protobu"
  "f_test_messages.proto3.TestAllTypesProto"
  "3\022\026\n\016repeated_int32\030\037 \003(\005\022\026\n\016repeated_in"
  "t64\030  \003(\003\022\027\n\017repeated_uint32\030! \003(\r\022\027\n\017re"
  "peated_uint64\030\" \003(\004\022\027\n\017repeated_sint32\030#"
  " \003(\021\022\027\n\017repeated_sint64\030$ \003(\022\022\030\n\020repeate"
  "d_fixed32\030% \003(\007\022\030\n\020repeated_fixed64\030& \003("
  "\006\022\031\n\021repeated_sfixed32\030\' \003(\017\022\031\n\021repeated"
  "_sfixed64\030( \003(\020\022\026\n\016repeated_float\030) \003(\002\022"
  "\027\n\017repeated_double\030* \003(\001\022\025\n\rrepeated_boo"
  "l\030+ \003(\010\022\027\n\017repeated_string\030, \003(\t\022\026\n\016repe"
  "ated_bytes\030- \003(\014\022`\n\027repeated_nested_mess"
  "age\0300 \003(\0132\?.protobuf_test_messages.proto"
  "3.TestAllTypesProto3.NestedMessage\022O\n\030re"
  "peated_foreign_message\0301 \003(\0132-.protobuf_"
  "test_messages.proto3.ForeignMessage\022Z\n\024r"
  "epeated_nested_enum\0303 \003(\0162<.protobuf_tes"
  "t_messages.proto3.TestAllTypesProto3.Nes"
  "tedEnum\022I\n\025repeated_foreign_enum\0304 \003(\0162*"
  ".protobuf_test_messages.proto3.ForeignEn"
  "um\022!\n\025repeated_string_piece\0306 \003(\tB\002\010\002\022\031\n"
  "\rrepeated_cord\0307 \003(\tB\002\010\001\022\030\n\014packed_int32"
  "\030K \003(\005B\002\020\001\022\030\n\014packed_int64\030L \003(\003B\002\020\001\022\031\n\r"
  "packed_uint32\030M \003(\rB\002\020\001\022\031\n\rpacked_uint64"
  "\030N \003(\004B\002\020\001\022\031\n\rpacked_sint32\030O \003(\021B\002\020\001\022\031\n"
  "\rpacked_sint64\030P \003(\022B\002\020\001\022\032\n\016packed_fixed"
  "32\030Q \003(\007B\002\020\001\022\032\n\016packed_fixed64\030R \003(\006B\002\020\001"
  "\022\033\n\017packed_sfixed32\030S \003(\017B\002\020\001\022\033\n\017packed_"
  "sfixed64\030T \003(\020B\002\020\001\022\030\n\014packed_float\030U \003(\002"
  "B\002\020\001\022\031\n\rpacked_double\030V \003(\001B\002\020\001\022\027\n\013packe"
  "d_bool\030W \003(\010B\002\020\001\022\\\n\022packed_nested_enum\030X"
  " \003(\0162<.protobuf_test_messages.proto3.Tes"
  "tAllTypesProto3.NestedEnumB\002\020\001\022\032\n\016unpack"
  "ed_int32\030Y \003(\005B\002\020\000\022\032\n\016unpacked_int64\030Z \003"
  "(\003B\002\020\000\022\033\n\017unpacked_uint32\030[ \003(\rB\002\020\000\022\033\n\017u"
  "npacked_uint64\030\\ \003(\004B\002\020\000\022\033\n\017unpacked_sin"
  "t32\030] \003(\021B\002\020\000\022\033\n\017unpacked_sint64\030^ \003(\022B\002"
  "\020\000\022\034\n\020unpacked_fixed32\030_ \003(\007B\002\020\000\022\034\n\020unpa"
  "cked_fixed64\030` \003(\006B\002\020\000\022\035\n\021unpacked_sfixe"
  "d32\030a \003(\017B\002\020\000\022\035\n\021unpacked_sfixed64\030b \003(\020"
  "B\002\020\000\022\032\n\016unpacked_float\030c \003(\002B\002\020\000\022\033\n\017unpa"
  "cked_double\030d \003(\001B\002\020\000\022\031\n\runpacked_bool\030e"
  " \003(\010B\002\020\000\022^\n\024unpacked_nested_enum\030f \003(\0162<"
  ".protobuf_test_messages.proto3.TestAllTy"
  "pesProto3.NestedEnumB\002\020\000\022]\n\017map_int32_in"
  "t32\0308 \003(\0132D.protobuf_test_messages.proto"
  "3.TestAllTypesProto3.MapInt32Int32Entry\022"
  "]\n\017map_int64_int64\0309 \003(\0132D.protobuf_test"
  "_messages.proto3.TestAllTypesProto3.MapI"
  "nt64Int64Entry\022a\n\021map_uint32_uint32\030: \003("
  "\0132F.protobuf_test_messages.proto3.TestAl"
  "lTypesProto3.MapUint32Uint32Entry\022a\n\021map"
  "_uint64_uint64\030; \003(\0132F.protobuf_test_mes"
  "sages.proto3.TestAllTypesProto3.MapUint6"
  "4Uint64Entry\022a\n\021map_sint32_sint32\030< \003(\0132"
  "F.protobuf_test_messages.proto3.TestAllT"
  "ypesProto3.MapSint32Sint32Entry\022a\n\021map_s"
  "int64_sint64\030= \003(\0132F.protobuf_test_messa"
  "ges.proto3.TestAllTypesProto3.MapSint64S"
  "int64Entry\022e\n\023map_fixed32_fixed32\030> \003(\0132"
  "H.protobuf_test_messages.proto3.TestAllT"
  "ypesProto3.MapFixed32Fixed32Entry\022e\n\023map"
  "_fixed64_fixed64\030\? \003(\0132H.protobuf_test_m"
  "essages.proto3.TestAllTypesProto3.MapFix"
  "ed64Fixed64Entry\022i\n\025map_sfixed32_sfixed3"
  "2\030@ \003(\0132J.protobuf_test_messages.proto3."
  "TestAllTypesProto3.MapSfixed32Sfixed32En"
  "try\022i\n\025map_sfixed64_sfixed64\030A \003(\0132J.pro"
  "tobuf_test_messages.proto3.TestAllTypesP"
  "roto3.MapSfixed64Sfixed64Entry\022]\n\017map_in"
  "t32_float\030B \003(\0132D.protobuf_test_messages"
  ".proto3.TestAllTypesProto3.MapInt32Float"
  "Entry\022_\n\020map_int32_double\030C \003(\0132E.protob"
  "uf_test_messages.proto3.TestAllTypesProt"
  "o3.MapInt32DoubleEntry\022Y\n\rmap_bool_bool\030"
  "D \003(\0132B.protobuf_test_messages.proto3.Te"
  "stAllTypesProto3.MapBoolBoolEntry\022a\n\021map"
  "_string_string\030E \003(\0132F.protobuf_test_mes"
  "sages.proto3.TestAllTypesProto3.MapStrin"
  "gStringEntry\022_\n\020map_string_bytes\030F \003(\0132E"
  ".protobuf_test_messages.proto3.TestAllTy"
  "pesProto3.MapStringBytesEntry\022p\n\031map_str"
  "ing_nested_message\030G \003(\0132M.protobuf_test"
  "_messages.proto3.TestAllTypesProto3.MapS"
  "tringNestedMessageEntry\022r\n\032map_string_fo"
  "reign_message\030H \003(\0132N.protobuf_test_mess"
  "ages.proto3.TestAllTypesProto3.MapString"
  "ForeignMessageEntry\022j\n\026map_string_nested"
  "_enum\030I \003(\0132J.protobuf_test_messages.pro"
  "to3.TestAllTypesProto3.MapStringNestedEn"
  "umEntry\022l\n\027map_string_foreign_enum\030J \003(\013"
  "2K.protobuf_test_messages.proto3.TestAll"
  "TypesProto3.MapStringForeignEnumEntry\022\026\n"
  "\014oneof_uint32\030o \001(\rH\000\022_\n\024oneof_nested_me"
  "ssage\030p \001(\0132\?.protobuf_test_messages.pro"
  "to3.TestAllTypesProto3.NestedMessageH\000\022\026"
  "\n\014oneof_string\030q \001(\tH\000\022\025\n\013oneof_bytes\030r "
  "\001(\014H\000\022\024\n\noneof_bool\030s \001(\010H\000\022\026\n\014oneof_uin"
  "t64\030t \001(\004H\000\022\025\n\013oneof_float\030u \001(\002H\000\022\026\n\014on"
  "eof_double\030v \001(\001H\000\022R\n\noneof_enum\030w \001(\0162<"
  ".protobuf_test_messages.proto3.TestAllTy"
  "pesProto3.NestedEnumH\000\022:\n\025optional_bool_"
  "wrapper\030\311\001 \001(\0132\032.google.protobuf.BoolVal"
  "ue\022<\n\026optional_int32_wrapper\030\312\001 \001(\0132\033.go"
  "ogle.protobuf.Int32Value\022<\n\026optional_int"
  "64_wrapper\030\313\001 \001(\0132\033.google.protobuf.Int6"
  "4Value\022>\n\027optional_uint32_wrapper\030\314\001 \001(\013"
  "2\034.google.protobuf.UInt32Value\022>\n\027option"
  "al_uint64_wrapper\030\315\001 \001(\0132\034.google.protob"
  "uf.UInt64Value\022<\n\026optional_float_wrapper"
  "\030\316\001 \001(\0132\033.google.protobuf.FloatValue\022>\n\027"
  "optional_double_wrapper\030\317\001 \001(\0132\034.google."
  "protobuf.DoubleValue\022>\n\027optional_string_"
  "wrapper\030\320\001 \001(\0132\034.google.protobuf.StringV"
  "alue\022<\n\026optional_bytes_wrapper\030\321\001 \001(\0132\033."
  "google.protobuf.BytesValue\022:\n\025repeated_b"
  "ool_wrapper\030\323\001 \003(\0132\032.google.protobuf.Boo"
  "lValue\022<\n\026repeated_int32_wrapper\030\324\001 \003(\0132"
  "\033.google.protobuf.Int32Value\022<\n\026repeated"
  "_int64_wrapper\030\325\001 \003(\0132\033.google.protobuf."
  "Int64Value\022>\n\027repeated_uint32_wrapper\030\326\001"
  " \003(\0132\034.google.protobuf.UInt32Value\022>\n\027re"
  "peated_uint64_wrapper\030\327\001 \003(\0132\034.google.pr"
  "otobuf.UInt64Value\022<\n\026repeated_float_wra"
  "pper\030\330\001 \003(\0132\033.google.protobuf.FloatValue"
  "\022>\n\027repeated_double_wrapper\030\331\001 \003(\0132\034.goo"
  "gle.protobuf.DoubleValue\022>\n\027repeated_str"
  "ing_wrapper\030\332\001 \003(\0132\034.google.protobuf.Str"
  "ingValue\022<\n\026repeated_bytes_wrapper\030\333\001 \003("
  "\0132\033.google.protobuf.BytesValue\0225\n\021option"
  "al_duration\030\255\002 \001(\0132\031.google.protobuf.Dur"
  "ation\0227\n\022optional_timestamp\030\256\002 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\0228\n\023optional_field"
  "_mask\030\257\002 \001(\0132\032.google.protobuf.FieldMask"
  "\0221\n\017optional_struct\030\260\002 \001(\0132\027.google.prot"
  "obuf.Struct\022+\n\014optional_any\030\261\002 \001(\0132\024.goo"
  "gle.protobuf.Any\022/\n\016optional_value\030\262\002 \001("
  "\0132\026.google.protobuf.Value\0225\n\021repeated_du"
  "ration\030\267\002 \003(\0132\031.google.protobuf.Duration"
  "\0227\n\022repeated_timestamp\030\270\002 \003(\0132\032.google.p"
  "rotobuf.Timestamp\0227\n\022repeated_fieldmask\030"
  "\271\002 \003(\0132\032.google.protobuf.FieldMask\0221\n\017re"
  "peated_struct\030\304\002 \003(\0132\027.google.protobuf.S"
  "truct\022+\n\014repeated_any\030\273\002 \003(\0132\024.google.pr"
  "otobuf.Any\022/\n\016repeated_value\030\274\002 \003(\0132\026.go"
  "ogle.protobuf.Value\0228\n\023repeated_list_val"
  "ue\030\275\002 \003(\0132\032.google.protobuf.ListValue\022\023\n"
  "\nfieldname1\030\221\003 \001(\005\022\024\n\013field_name2\030\222\003 \001(\005"
  "\022\025\n\014_field_name3\030\223\003 \001(\005\022\026\n\rfield__name4_"
  "\030\224\003 \001(\005\022\024\n\013field0name5\030\225\003 \001(\005\022\026\n\rfield_0"
  "_name6\030\226\003 \001(\005\022\023\n\nfieldName7\030\227\003 \001(\005\022\023\n\nFi"
  "eldName8\030\230\003 \001(\005\022\024\n\013field_Name9\030\231\003 \001(\005\022\025\n"
  "\014Field_Name10\030\232\003 \001(\005\022\025\n\014FIELD_NAME11\030\233\003 "
  "\001(\005\022\025\n\014FIELD_name12\030\234\003 \001(\005\022\027\n\016__field_na"
  "me13\030\235\003 \001(\005\022\027\n\016__Field_name14\030\236\003 \001(\005\022\026\n\r"
  "field__name15\030\237\003 \001(\005\022\026\n\rfield__Name16\030\240\003"
  " \001(\005\022\027\n\016field_name17__\030\241\003 \001(\005\022\027\n\016Field_n"
  "ame18__\030\242\003 \001(\005\032b\n\rNestedMessage\022\t\n\001a\030\001 \001"
  "(\005\022F\n\013corecursive\030\002 \001(\01321.protobuf_test_"
  "messages.proto3.TestAllTypesProto3\0324\n\022Ma"
  "pInt32Int32Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002"
  " \001(\005:\0028\001\0324\n\022MapInt64Int64Entry\022\013\n\003key\030\001 "
  "\001(\003\022\r\n\005value\030\002 \001(\003:\0028\001\0326\n\024MapUint32Uint3"
  "2Entry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\0326"
  "\n\024MapUint64Uint64Entry\022\013\n\003key\030\001 \001(\004\022\r\n\005v"
  "alue\030\002 \001(\004:\0028\001\0326\n\024MapSint32Sint32Entry\022\013"
  "\n\003key\030\001 \001(\021\022\r\n\005value\030\002 \001(\021:\0028\001\0326\n\024MapSin"
  "t64Sint64Entry\022\013\n\003key\030\001 \001(\022\022\r\n\005value\030\002 \001"
  "(\022:\0028\001\0328\n\026MapFixed32Fixed32Entry\022\013\n\003key\030"
  "\001 \001(\007\022\r\n\005value\030\002 \001(\007:\0028\001\0328\n\026MapFixed64Fi"
  "xed64Entry\022\013\n\003key\030\001 \001(\006\022\r\n\005value\030\002 \001(\006:\002"
  "8\001\032:\n\030MapSfixed32Sfixed32Entry\022\013\n\003key\030\001 "
  "\001(\017\022\r\n\005value\030\002 \001(\017:\0028\001\032:\n\030MapSfixed64Sfi"
  "xed64Entry\022\013\n\003key\030\001 \001(\020\022\r\n\005value\030\002 \001(\020:\002"
  "8\001\0324\n\022MapInt32FloatEntry\022\013\n\003key\030\001 \001(\005\022\r\n"
  "\005value\030\002 \001(\002:\0028\001\0325\n\023MapInt32DoubleEntry\022"
  "\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\001:\0028\001\0322\n\020MapBo"
  "olBoolEntry\022\013\n\003key\030\001 \001(\010\022\r\n\005value\030\002 \001(\010:"
  "\0028\001\0326\n\024MapStringStringEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\0325\n\023MapStringBytesEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\032~\n\033Ma"
  "pStringNestedMessageEntry\022\013\n\003key\030\001 \001(\t\022N"
  "\n\005value\030\002 \001(\0132\?.protobuf_test_messages.p"
  "roto3.TestAllTypesProto3.NestedMessage:\002"
  "8\001\032m\n\034MapStringForeignMessageEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022<\n\005value\030\002 \001(\0132-.protobuf_test_m"
  "essages.proto3.ForeignMessage:\0028\001\032x\n\030Map"
  "StringNestedEnumEntry\022\013\n\003key\030\001 \001(\t\022K\n\005va"
  "lue\030\002 \001(\0162<.protobuf_test_messages.proto"
  "3.TestAllTypesProto3.NestedEnum:\0028\001\032g\n\031M"
  "apStringForeignEnumEntry\022\013\n\003key\030\001 \001(\t\0229\n"
  "\005value\030\002 \001(\0162*.protobuf_test_messages.pr"
  "oto3.ForeignEnum:\0028\001\"9\n\nNestedEnum\022\007\n\003FO"
  "O\020\000\022\007\n\003BAR\020\001\022\007\n\003BAZ\020\002\022\020\n\003NEG\020\377\377\377\377\377\377\377\377\377\001\""
  "Y\n\013AliasedEnum\022\r\n\tALIAS_FOO\020\000\022\r\n\tALIAS_B"
  "AR\020\001\022\r\n\tALIAS_BAZ\020\002\022\007\n\003QUX\020\002\022\007\n\003qux\020\002\022\007\n"
  "\003bAz\020\002\032\002\020\001B\r\n\013oneof_fieldJ\006\010\365\003\020\377\003\"\033\n\016For"
  "eignMessage\022\t\n\001c\030\001 \001(\005*@\n\013ForeignEnum\022\017\n"
  "\013FOREIGN_FOO\020\000\022\017\n\013FOREIGN_BAR\020\001\022\017\n\013FOREI"
  "GN_BAZ\020\002B8\n(com.google.protobuf_test_mes"
  "sages.proto3H\001\370\001\001\242\002\006Proto3b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto_deps[6] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto_sccs[20] = {
  &scc_info_ForeignMessage_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapBoolBoolEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapInt32FloatEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapInt32Int32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapInt64Int64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapStringBytesEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapStringStringEntry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
  &scc_info_TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto = {
  false, false, descriptor_table_protodef_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto, "google/protobuf/test_messages_proto3.proto", 9194,
  &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto_once, descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto_sccs, descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto_deps, 20, 6,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto, 22, file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto, file_level_service_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto)), true);
namespace protobuf_test_messages {
namespace proto3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestAllTypesProto3_NestedEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto[0];
}
bool TestAllTypesProto3_NestedEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TestAllTypesProto3_NestedEnum TestAllTypesProto3::FOO;
constexpr TestAllTypesProto3_NestedEnum TestAllTypesProto3::BAR;
constexpr TestAllTypesProto3_NestedEnum TestAllTypesProto3::BAZ;
constexpr TestAllTypesProto3_NestedEnum TestAllTypesProto3::NEG;
constexpr TestAllTypesProto3_NestedEnum TestAllTypesProto3::NestedEnum_MIN;
constexpr TestAllTypesProto3_NestedEnum TestAllTypesProto3::NestedEnum_MAX;
constexpr int TestAllTypesProto3::NestedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestAllTypesProto3_AliasedEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto[1];
}
bool TestAllTypesProto3_AliasedEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TestAllTypesProto3_AliasedEnum TestAllTypesProto3::ALIAS_FOO;
constexpr TestAllTypesProto3_AliasedEnum TestAllTypesProto3::ALIAS_BAR;
constexpr TestAllTypesProto3_AliasedEnum TestAllTypesProto3::ALIAS_BAZ;
constexpr TestAllTypesProto3_AliasedEnum TestAllTypesProto3::QUX;
constexpr TestAllTypesProto3_AliasedEnum TestAllTypesProto3::qux;
constexpr TestAllTypesProto3_AliasedEnum TestAllTypesProto3::bAz;
constexpr TestAllTypesProto3_AliasedEnum TestAllTypesProto3::AliasedEnum_MIN;
constexpr TestAllTypesProto3_AliasedEnum TestAllTypesProto3::AliasedEnum_MAX;
constexpr int TestAllTypesProto3::AliasedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForeignEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto[2];
}
bool ForeignEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TestAllTypesProto3_NestedMessage::InitAsDefaultInstance() {
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_NestedMessage_default_instance_._instance.get_mutable()->corecursive_ = const_cast< ::protobuf_test_messages::proto3::TestAllTypesProto3*>(
      ::protobuf_test_messages::proto3::TestAllTypesProto3::internal_default_instance());
}
class TestAllTypesProto3_NestedMessage::_Internal {
 public:
  static const ::protobuf_test_messages::proto3::TestAllTypesProto3& corecursive(const TestAllTypesProto3_NestedMessage* msg);
};

const ::protobuf_test_messages::proto3::TestAllTypesProto3&
TestAllTypesProto3_NestedMessage::_Internal::corecursive(const TestAllTypesProto3_NestedMessage* msg) {
  return *msg->corecursive_;
}
TestAllTypesProto3_NestedMessage::TestAllTypesProto3_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
}
TestAllTypesProto3_NestedMessage::TestAllTypesProto3_NestedMessage(const TestAllTypesProto3_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_corecursive()) {
    corecursive_ = new ::protobuf_test_messages::proto3::TestAllTypesProto3(*from.corecursive_);
  } else {
    corecursive_ = nullptr;
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
}

void TestAllTypesProto3_NestedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestAllTypesProto3_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base);
  ::memset(&corecursive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&corecursive_)) + sizeof(a_));
}

TestAllTypesProto3_NestedMessage::~TestAllTypesProto3_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestAllTypesProto3_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete corecursive_;
}

void TestAllTypesProto3_NestedMessage::ArenaDtor(void* object) {
  TestAllTypesProto3_NestedMessage* _this = reinterpret_cast< TestAllTypesProto3_NestedMessage* >(object);
  (void)_this;
}
void TestAllTypesProto3_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypesProto3_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypesProto3_NestedMessage& TestAllTypesProto3_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypesProto3_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypesProto3_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && corecursive_ != nullptr) {
    delete corecursive_;
  }
  corecursive_ = nullptr;
  a_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto3_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto3.TestAllTypesProto3 corecursive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_corecursive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypesProto3_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a = 1;
  if (this->a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3 corecursive = 2;
  if (this->has_corecursive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::corecursive(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
  return target;
}

size_t TestAllTypesProto3_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protobuf_test_messages.proto3.TestAllTypesProto3 corecursive = 2;
  if (this->has_corecursive()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corecursive_);
  }

  // int32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesProto3_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypesProto3_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypesProto3_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
    MergeFrom(*source);
  }
}

void TestAllTypesProto3_NestedMessage::MergeFrom(const TestAllTypesProto3_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_corecursive()) {
    _internal_mutable_corecursive()->::protobuf_test_messages::proto3::TestAllTypesProto3::MergeFrom(from._internal_corecursive());
  }
  if (from.a() != 0) {
    _internal_set_a(from._internal_a());
  }
}

void TestAllTypesProto3_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypesProto3_NestedMessage::CopyFrom(const TestAllTypesProto3_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto3_NestedMessage::IsInitialized() const {
  return true;
}

void TestAllTypesProto3_NestedMessage::InternalSwap(TestAllTypesProto3_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypesProto3_NestedMessage, a_)
      + sizeof(TestAllTypesProto3_NestedMessage::a_)
      - PROTOBUF_FIELD_OFFSET(TestAllTypesProto3_NestedMessage, corecursive_)>(
          reinterpret_cast<char*>(&corecursive_),
          reinterpret_cast<char*>(&other->corecursive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TestAllTypesProto3_MapInt32Int32Entry_DoNotUse::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse() {}
TestAllTypesProto3_MapInt32Int32Entry_DoNotUse::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapInt32Int32Entry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapInt32Int32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapInt32Int32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapInt32Int32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapInt64Int64Entry_DoNotUse::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse() {}
TestAllTypesProto3_MapInt64Int64Entry_DoNotUse::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapInt64Int64Entry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapInt64Int64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapInt64Int64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapInt64Int64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse() {}
TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse() {}
TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse() {}
TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse() {}
TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse() {}
TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse() {}
TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse() {}
TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse() {}
TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapInt32FloatEntry_DoNotUse::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse() {}
TestAllTypesProto3_MapInt32FloatEntry_DoNotUse::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapInt32FloatEntry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapInt32FloatEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapInt32FloatEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapInt32FloatEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse() {}
TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapBoolBoolEntry_DoNotUse::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse() {}
TestAllTypesProto3_MapBoolBoolEntry_DoNotUse::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapBoolBoolEntry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapBoolBoolEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapBoolBoolEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapBoolBoolEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapStringStringEntry_DoNotUse::TestAllTypesProto3_MapStringStringEntry_DoNotUse() {}
TestAllTypesProto3_MapStringStringEntry_DoNotUse::TestAllTypesProto3_MapStringStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapStringStringEntry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapStringStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapStringStringEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapStringStringEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapStringBytesEntry_DoNotUse::TestAllTypesProto3_MapStringBytesEntry_DoNotUse() {}
TestAllTypesProto3_MapStringBytesEntry_DoNotUse::TestAllTypesProto3_MapStringBytesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapStringBytesEntry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapStringBytesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapStringBytesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapStringBytesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse() {}
TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse() {}
TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse() {}
TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse() {}
TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse::MergeFrom(const TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TestAllTypesProto3::InitAsDefaultInstance() {
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_nested_message_ = const_cast< ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage*>(
      ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_foreign_message_ = const_cast< ::protobuf_test_messages::proto3::ForeignMessage*>(
      ::protobuf_test_messages::proto3::ForeignMessage::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->recursive_message_ = const_cast< ::protobuf_test_messages::proto3::TestAllTypesProto3*>(
      ::protobuf_test_messages::proto3::TestAllTypesProto3::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_.oneof_uint32_ = 0u;
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_.oneof_nested_message_ = const_cast< ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage*>(
      ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_.oneof_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_.oneof_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_.oneof_bool_ = false;
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_.oneof_uint64_ = PROTOBUF_ULONGLONG(0);
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_.oneof_float_ = 0;
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_.oneof_double_ = 0;
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_.oneof_enum_ = 0;
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_bool_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_int32_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_int64_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_uint32_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_uint64_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt64Value*>(
      PROTOBUF_NAMESPACE_ID::UInt64Value::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_float_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_double_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_string_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_bytes_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::BytesValue*>(
      PROTOBUF_NAMESPACE_ID::BytesValue::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_duration_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_field_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_struct_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_any_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::protobuf_test_messages::proto3::_TestAllTypesProto3_default_instance_._instance.get_mutable()->optional_value_ = const_cast< PROTOBUF_NAMESPACE_ID::Value*>(
      PROTOBUF_NAMESPACE_ID::Value::internal_default_instance());
}
class TestAllTypesProto3::_Internal {
 public:
  static const ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage& optional_nested_message(const TestAllTypesProto3* msg);
  static const ::protobuf_test_messages::proto3::ForeignMessage& optional_foreign_message(const TestAllTypesProto3* msg);
  static const ::protobuf_test_messages::proto3::TestAllTypesProto3& recursive_message(const TestAllTypesProto3* msg);
  static const ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage& oneof_nested_message(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& optional_bool_wrapper(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& optional_int32_wrapper(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& optional_int64_wrapper(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& optional_uint32_wrapper(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& optional_uint64_wrapper(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& optional_float_wrapper(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& optional_double_wrapper(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& optional_string_wrapper(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::BytesValue& optional_bytes_wrapper(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& optional_duration(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& optional_timestamp(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& optional_field_mask(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& optional_struct(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& optional_any(const TestAllTypesProto3* msg);
  static const PROTOBUF_NAMESPACE_ID::Value& optional_value(const TestAllTypesProto3* msg);
};

const ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage&
TestAllTypesProto3::_Internal::optional_nested_message(const TestAllTypesProto3* msg) {
  return *msg->optional_nested_message_;
}
const ::protobuf_test_messages::proto3::ForeignMessage&
TestAllTypesProto3::_Internal::optional_foreign_message(const TestAllTypesProto3* msg) {
  return *msg->optional_foreign_message_;
}
const ::protobuf_test_messages::proto3::TestAllTypesProto3&
TestAllTypesProto3::_Internal::recursive_message(const TestAllTypesProto3* msg) {
  return *msg->recursive_message_;
}
const ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage&
TestAllTypesProto3::_Internal::oneof_nested_message(const TestAllTypesProto3* msg) {
  return *msg->oneof_field_.oneof_nested_message_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
TestAllTypesProto3::_Internal::optional_bool_wrapper(const TestAllTypesProto3* msg) {
  return *msg->optional_bool_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
TestAllTypesProto3::_Internal::optional_int32_wrapper(const TestAllTypesProto3* msg) {
  return *msg->optional_int32_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
TestAllTypesProto3::_Internal::optional_int64_wrapper(const TestAllTypesProto3* msg) {
  return *msg->optional_int64_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
TestAllTypesProto3::_Internal::optional_uint32_wrapper(const TestAllTypesProto3* msg) {
  return *msg->optional_uint32_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
TestAllTypesProto3::_Internal::optional_uint64_wrapper(const TestAllTypesProto3* msg) {
  return *msg->optional_uint64_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
TestAllTypesProto3::_Internal::optional_float_wrapper(const TestAllTypesProto3* msg) {
  return *msg->optional_float_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
TestAllTypesProto3::_Internal::optional_double_wrapper(const TestAllTypesProto3* msg) {
  return *msg->optional_double_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
TestAllTypesProto3::_Internal::optional_string_wrapper(const TestAllTypesProto3* msg) {
  return *msg->optional_string_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::BytesValue&
TestAllTypesProto3::_Internal::optional_bytes_wrapper(const TestAllTypesProto3* msg) {
  return *msg->optional_bytes_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
TestAllTypesProto3::_Internal::optional_duration(const TestAllTypesProto3* msg) {
  return *msg->optional_duration_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TestAllTypesProto3::_Internal::optional_timestamp(const TestAllTypesProto3* msg) {
  return *msg->optional_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
TestAllTypesProto3::_Internal::optional_field_mask(const TestAllTypesProto3* msg) {
  return *msg->optional_field_mask_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
TestAllTypesProto3::_Internal::optional_struct(const TestAllTypesProto3* msg) {
  return *msg->optional_struct_;
}
const PROTOBUF_NAMESPACE_ID::Any&
TestAllTypesProto3::_Internal::optional_any(const TestAllTypesProto3* msg) {
  return *msg->optional_any_;
}
const PROTOBUF_NAMESPACE_ID::Value&
TestAllTypesProto3::_Internal::optional_value(const TestAllTypesProto3* msg) {
  return *msg->optional_value_;
}
void TestAllTypesProto3::set_allocated_oneof_nested_message(::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage* oneof_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_oneof_field();
  if (oneof_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oneof_nested_message);
    if (message_arena != submessage_arena) {
      oneof_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_nested_message, submessage_arena);
    }
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto3.TestAllTypesProto3.oneof_nested_message)
}
void TestAllTypesProto3::clear_optional_bool_wrapper() {
  if (GetArena() == nullptr && optional_bool_wrapper_ != nullptr) {
    delete optional_bool_wrapper_;
  }
  optional_bool_wrapper_ = nullptr;
}
void TestAllTypesProto3::clear_optional_int32_wrapper() {
  if (GetArena() == nullptr && optional_int32_wrapper_ != nullptr) {
    delete optional_int32_wrapper_;
  }
  optional_int32_wrapper_ = nullptr;
}
void TestAllTypesProto3::clear_optional_int64_wrapper() {
  if (GetArena() == nullptr && optional_int64_wrapper_ != nullptr) {
    delete optional_int64_wrapper_;
  }
  optional_int64_wrapper_ = nullptr;
}
void TestAllTypesProto3::clear_optional_uint32_wrapper() {
  if (GetArena() == nullptr && optional_uint32_wrapper_ != nullptr) {
    delete optional_uint32_wrapper_;
  }
  optional_uint32_wrapper_ = nullptr;
}
void TestAllTypesProto3::clear_optional_uint64_wrapper() {
  if (GetArena() == nullptr && optional_uint64_wrapper_ != nullptr) {
    delete optional_uint64_wrapper_;
  }
  optional_uint64_wrapper_ = nullptr;
}
void TestAllTypesProto3::clear_optional_float_wrapper() {
  if (GetArena() == nullptr && optional_float_wrapper_ != nullptr) {
    delete optional_float_wrapper_;
  }
  optional_float_wrapper_ = nullptr;
}
void TestAllTypesProto3::clear_optional_double_wrapper() {
  if (GetArena() == nullptr && optional_double_wrapper_ != nullptr) {
    delete optional_double_wrapper_;
  }
  optional_double_wrapper_ = nullptr;
}
void TestAllTypesProto3::clear_optional_string_wrapper() {
  if (GetArena() == nullptr && optional_string_wrapper_ != nullptr) {
    delete optional_string_wrapper_;
  }
  optional_string_wrapper_ = nullptr;
}
void TestAllTypesProto3::clear_optional_bytes_wrapper() {
  if (GetArena() == nullptr && optional_bytes_wrapper_ != nullptr) {
    delete optional_bytes_wrapper_;
  }
  optional_bytes_wrapper_ = nullptr;
}
void TestAllTypesProto3::clear_repeated_bool_wrapper() {
  repeated_bool_wrapper_.Clear();
}
void TestAllTypesProto3::clear_repeated_int32_wrapper() {
  repeated_int32_wrapper_.Clear();
}
void TestAllTypesProto3::clear_repeated_int64_wrapper() {
  repeated_int64_wrapper_.Clear();
}
void TestAllTypesProto3::clear_repeated_uint32_wrapper() {
  repeated_uint32_wrapper_.Clear();
}
void TestAllTypesProto3::clear_repeated_uint64_wrapper() {
  repeated_uint64_wrapper_.Clear();
}
void TestAllTypesProto3::clear_repeated_float_wrapper() {
  repeated_float_wrapper_.Clear();
}
void TestAllTypesProto3::clear_repeated_double_wrapper() {
  repeated_double_wrapper_.Clear();
}
void TestAllTypesProto3::clear_repeated_string_wrapper() {
  repeated_string_wrapper_.Clear();
}
void TestAllTypesProto3::clear_repeated_bytes_wrapper() {
  repeated_bytes_wrapper_.Clear();
}
void TestAllTypesProto3::clear_optional_duration() {
  if (GetArena() == nullptr && optional_duration_ != nullptr) {
    delete optional_duration_;
  }
  optional_duration_ = nullptr;
}
void TestAllTypesProto3::clear_optional_timestamp() {
  if (GetArena() == nullptr && optional_timestamp_ != nullptr) {
    delete optional_timestamp_;
  }
  optional_timestamp_ = nullptr;
}
void TestAllTypesProto3::clear_optional_field_mask() {
  if (GetArena() == nullptr && optional_field_mask_ != nullptr) {
    delete optional_field_mask_;
  }
  optional_field_mask_ = nullptr;
}
void TestAllTypesProto3::clear_optional_struct() {
  if (GetArena() == nullptr && optional_struct_ != nullptr) {
    delete optional_struct_;
  }
  optional_struct_ = nullptr;
}
void TestAllTypesProto3::clear_optional_any() {
  if (GetArena() == nullptr && optional_any_ != nullptr) {
    delete optional_any_;
  }
  optional_any_ = nullptr;
}
void TestAllTypesProto3::clear_optional_value() {
  if (GetArena() == nullptr && optional_value_ != nullptr) {
    delete optional_value_;
  }
  optional_value_ = nullptr;
}
void TestAllTypesProto3::clear_repeated_duration() {
  repeated_duration_.Clear();
}
void TestAllTypesProto3::clear_repeated_timestamp() {
  repeated_timestamp_.Clear();
}
void TestAllTypesProto3::clear_repeated_fieldmask() {
  repeated_fieldmask_.Clear();
}
void TestAllTypesProto3::clear_repeated_struct() {
  repeated_struct_.Clear();
}
void TestAllTypesProto3::clear_repeated_any() {
  repeated_any_.Clear();
}
void TestAllTypesProto3::clear_repeated_value() {
  repeated_value_.Clear();
}
void TestAllTypesProto3::clear_repeated_list_value() {
  repeated_list_value_.Clear();
}
TestAllTypesProto3::TestAllTypesProto3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  repeated_int32_(arena),
  repeated_int64_(arena),
  repeated_uint32_(arena),
  repeated_uint64_(arena),
  repeated_sint32_(arena),
  repeated_sint64_(arena),
  repeated_fixed32_(arena),
  repeated_fixed64_(arena),
  repeated_sfixed32_(arena),
  repeated_sfixed64_(arena),
  repeated_float_(arena),
  repeated_double_(arena),
  repeated_bool_(arena),
  repeated_string_(arena),
  repeated_bytes_(arena),
  repeated_nested_message_(arena),
  repeated_foreign_message_(arena),
  repeated_nested_enum_(arena),
  repeated_foreign_enum_(arena),
  repeated_string_piece_(arena),
  repeated_cord_(arena),
  map_int32_int32_(arena),
  map_int64_int64_(arena),
  map_uint32_uint32_(arena),
  map_uint64_uint64_(arena),
  map_sint32_sint32_(arena),
  map_sint64_sint64_(arena),
  map_fixed32_fixed32_(arena),
  map_fixed64_fixed64_(arena),
  map_sfixed32_sfixed32_(arena),
  map_sfixed64_sfixed64_(arena),
  map_int32_float_(arena),
  map_int32_double_(arena),
  map_bool_bool_(arena),
  map_string_string_(arena),
  map_string_bytes_(arena),
  map_string_nested_message_(arena),
  map_string_foreign_message_(arena),
  map_string_nested_enum_(arena),
  map_string_foreign_enum_(arena),
  packed_int32_(arena),
  packed_int64_(arena),
  packed_uint32_(arena),
  packed_uint64_(arena),
  packed_sint32_(arena),
  packed_sint64_(arena),
  packed_fixed32_(arena),
  packed_fixed64_(arena),
  packed_sfixed32_(arena),
  packed_sfixed64_(arena),
  packed_float_(arena),
  packed_double_(arena),
  packed_bool_(arena),
  packed_nested_enum_(arena),
  unpacked_int32_(arena),
  unpacked_int64_(arena),
  unpacked_uint32_(arena),
  unpacked_uint64_(arena),
  unpacked_sint32_(arena),
  unpacked_sint64_(arena),
  unpacked_fixed32_(arena),
  unpacked_fixed64_(arena),
  unpacked_sfixed32_(arena),
  unpacked_sfixed64_(arena),
  unpacked_float_(arena),
  unpacked_double_(arena),
  unpacked_bool_(arena),
  unpacked_nested_enum_(arena),
  repeated_bool_wrapper_(arena),
  repeated_int32_wrapper_(arena),
  repeated_int64_wrapper_(arena),
  repeated_uint32_wrapper_(arena),
  repeated_uint64_wrapper_(arena),
  repeated_float_wrapper_(arena),
  repeated_double_wrapper_(arena),
  repeated_string_wrapper_(arena),
  repeated_bytes_wrapper_(arena),
  repeated_duration_(arena),
  repeated_timestamp_(arena),
  repeated_fieldmask_(arena),
  repeated_any_(arena),
  repeated_value_(arena),
  repeated_list_value_(arena),
  repeated_struct_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto3.TestAllTypesProto3)
}
TestAllTypesProto3::TestAllTypesProto3(const TestAllTypesProto3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_sfixed32_(from.repeated_sfixed32_),
      repeated_sfixed64_(from.repeated_sfixed64_),
      repeated_float_(from.repeated_float_),
      repeated_double_(from.repeated_double_),
      repeated_bool_(from.repeated_bool_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeated_nested_message_(from.repeated_nested_message_),
      repeated_foreign_message_(from.repeated_foreign_message_),
      repeated_nested_enum_(from.repeated_nested_enum_),
      repeated_foreign_enum_(from.repeated_foreign_enum_),
      repeated_string_piece_(from.repeated_string_piece_),
      repeated_cord_(from.repeated_cord_),
      packed_int32_(from.packed_int32_),
      packed_int64_(from.packed_int64_),
      packed_uint32_(from.packed_uint32_),
      packed_uint64_(from.packed_uint64_),
      packed_sint32_(from.packed_sint32_),
      packed_sint64_(from.packed_sint64_),
      packed_fixed32_(from.packed_fixed32_),
      packed_fixed64_(from.packed_fixed64_),
      packed_sfixed32_(from.packed_sfixed32_),
      packed_sfixed64_(from.packed_sfixed64_),
      packed_float_(from.packed_float_),
      packed_double_(from.packed_double_),
      packed_bool_(from.packed_bool_),
      packed_nested_enum_(from.packed_nested_enum_),
      unpacked_int32_(from.unpacked_int32_),
      unpacked_int64_(from.unpacked_int64_),
      unpacked_uint32_(from.unpacked_uint32_),
      unpacked_uint64_(from.unpacked_uint64_),
      unpacked_sint32_(from.unpacked_sint32_),
      unpacked_sint64_(from.unpacked_sint64_),
      unpacked_fixed32_(from.unpacked_fixed32_),
      unpacked_fixed64_(from.unpacked_fixed64_),
      unpacked_sfixed32_(from.unpacked_sfixed32_),
      unpacked_sfixed64_(from.unpacked_sfixed64_),
      unpacked_float_(from.unpacked_float_),
      unpacked_double_(from.unpacked_double_),
      unpacked_bool_(from.unpacked_bool_),
      unpacked_nested_enum_(from.unpacked_nested_enum_),
      repeated_bool_wrapper_(from.repeated_bool_wrapper_),
      repeated_int32_wrapper_(from.repeated_int32_wrapper_),
      repeated_int64_wrapper_(from.repeated_int64_wrapper_),
      repeated_uint32_wrapper_(from.repeated_uint32_wrapper_),
      repeated_uint64_wrapper_(from.repeated_uint64_wrapper_),
      repeated_float_wrapper_(from.repeated_float_wrapper_),
      repeated_double_wrapper_(from.repeated_double_wrapper_),
      repeated_string_wrapper_(from.repeated_string_wrapper_),
      repeated_bytes_wrapper_(from.repeated_bytes_wrapper_),
      repeated_duration_(from.repeated_duration_),
      repeated_timestamp_(from.repeated_timestamp_),
      repeated_fieldmask_(from.repeated_fieldmask_),
      repeated_any_(from.repeated_any_),
      repeated_value_(from.repeated_value_),
      repeated_list_value_(from.repeated_list_value_),
      repeated_struct_(from.repeated_struct_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_int32_int32_.MergeFrom(from.map_int32_int32_);
  map_int64_int64_.MergeFrom(from.map_int64_int64_);
  map_uint32_uint32_.MergeFrom(from.map_uint32_uint32_);
  map_uint64_uint64_.MergeFrom(from.map_uint64_uint64_);
  map_sint32_sint32_.MergeFrom(from.map_sint32_sint32_);
  map_sint64_sint64_.MergeFrom(from.map_sint64_sint64_);
  map_fixed32_fixed32_.MergeFrom(from.map_fixed32_fixed32_);
  map_fixed64_fixed64_.MergeFrom(from.map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.MergeFrom(from.map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.MergeFrom(from.map_sfixed64_sfixed64_);
  map_int32_float_.MergeFrom(from.map_int32_float_);
  map_int32_double_.MergeFrom(from.map_int32_double_);
  map_bool_bool_.MergeFrom(from.map_bool_bool_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_string_bytes_.MergeFrom(from.map_string_bytes_);
  map_string_nested_message_.MergeFrom(from.map_string_nested_message_);
  map_string_foreign_message_.MergeFrom(from.map_string_foreign_message_);
  map_string_nested_enum_.MergeFrom(from.map_string_nested_enum_);
  map_string_foreign_enum_.MergeFrom(from.map_string_foreign_enum_);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_optional_string().empty()) {
    optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string(),
      GetArena());
  }
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_optional_bytes().empty()) {
    optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_bytes(),
      GetArena());
  }
  optional_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_optional_string_piece().empty()) {
    optional_string_piece_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string_piece(),
      GetArena());
  }
  optional_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_optional_cord().empty()) {
    optional_cord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_cord(),
      GetArena());
  }
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  if (from._internal_has_optional_foreign_message()) {
    optional_foreign_message_ = new ::protobuf_test_messages::proto3::ForeignMessage(*from.optional_foreign_message_);
  } else {
    optional_foreign_message_ = nullptr;
  }
  if (from._internal_has_recursive_message()) {
    recursive_message_ = new ::protobuf_test_messages::proto3::TestAllTypesProto3(*from.recursive_message_);
  } else {
    recursive_message_ = nullptr;
  }
  if (from._internal_has_optional_bool_wrapper()) {
    optional_bool_wrapper_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.optional_bool_wrapper_);
  } else {
    optional_bool_wrapper_ = nullptr;
  }
  if (from._internal_has_optional_int32_wrapper()) {
    optional_int32_wrapper_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.optional_int32_wrapper_);
  } else {
    optional_int32_wrapper_ = nullptr;
  }
  if (from._internal_has_optional_int64_wrapper()) {
    optional_int64_wrapper_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.optional_int64_wrapper_);
  } else {
    optional_int64_wrapper_ = nullptr;
  }
  if (from._internal_has_optional_uint32_wrapper()) {
    optional_uint32_wrapper_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.optional_uint32_wrapper_);
  } else {
    optional_uint32_wrapper_ = nullptr;
  }
  if (from._internal_has_optional_uint64_wrapper()) {
    optional_uint64_wrapper_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.optional_uint64_wrapper_);
  } else {
    optional_uint64_wrapper_ = nullptr;
  }
  if (from._internal_has_optional_float_wrapper()) {
    optional_float_wrapper_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.optional_float_wrapper_);
  } else {
    optional_float_wrapper_ = nullptr;
  }
  if (from._internal_has_optional_double_wrapper()) {
    optional_double_wrapper_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.optional_double_wrapper_);
  } else {
    optional_double_wrapper_ = nullptr;
  }
  if (from._internal_has_optional_string_wrapper()) {
    optional_string_wrapper_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.optional_string_wrapper_);
  } else {
    optional_string_wrapper_ = nullptr;
  }
  if (from._internal_has_optional_bytes_wrapper()) {
    optional_bytes_wrapper_ = new PROTOBUF_NAMESPACE_ID::BytesValue(*from.optional_bytes_wrapper_);
  } else {
    optional_bytes_wrapper_ = nullptr;
  }
  if (from._internal_has_optional_duration()) {
    optional_duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.optional_duration_);
  } else {
    optional_duration_ = nullptr;
  }
  if (from._internal_has_optional_timestamp()) {
    optional_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.optional_timestamp_);
  } else {
    optional_timestamp_ = nullptr;
  }
  if (from._internal_has_optional_field_mask()) {
    optional_field_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.optional_field_mask_);
  } else {
    optional_field_mask_ = nullptr;
  }
  if (from._internal_has_optional_struct()) {
    optional_struct_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.optional_struct_);
  } else {
    optional_struct_ = nullptr;
  }
  if (from._internal_has_optional_any()) {
    optional_any_ = new PROTOBUF_NAMESPACE_ID::Any(*from.optional_any_);
  } else {
    optional_any_ = nullptr;
  }
  if (from._internal_has_optional_value()) {
    optional_value_ = new PROTOBUF_NAMESPACE_ID::Value(*from.optional_value_);
  } else {
    optional_value_ = nullptr;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_name18___) -
    reinterpret_cast<char*>(&optional_int64_)) + sizeof(field_name18___));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofBool: {
      _internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofUint64: {
      _internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofFloat: {
      _internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofDouble: {
      _internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto3.TestAllTypesProto3)
}

void TestAllTypesProto3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestAllTypesProto3_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&optional_nested_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_name18___) -
      reinterpret_cast<char*>(&optional_nested_message_)) + sizeof(field_name18___));
  clear_has_oneof_field();
}

TestAllTypesProto3::~TestAllTypesProto3() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto3.TestAllTypesProto3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestAllTypesProto3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_piece_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_cord_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optional_nested_message_;
  if (this != internal_default_instance()) delete optional_foreign_message_;
  if (this != internal_default_instance()) delete recursive_message_;
  if (this != internal_default_instance()) delete optional_bool_wrapper_;
  if (this != internal_default_instance()) delete optional_int32_wrapper_;
  if (this != internal_default_instance()) delete optional_int64_wrapper_;
  if (this != internal_default_instance()) delete optional_uint32_wrapper_;
  if (this != internal_default_instance()) delete optional_uint64_wrapper_;
  if (this != internal_default_instance()) delete optional_float_wrapper_;
  if (this != internal_default_instance()) delete optional_double_wrapper_;
  if (this != internal_default_instance()) delete optional_string_wrapper_;
  if (this != internal_default_instance()) delete optional_bytes_wrapper_;
  if (this != internal_default_instance()) delete optional_duration_;
  if (this != internal_default_instance()) delete optional_timestamp_;
  if (this != internal_default_instance()) delete optional_field_mask_;
  if (this != internal_default_instance()) delete optional_struct_;
  if (this != internal_default_instance()) delete optional_any_;
  if (this != internal_default_instance()) delete optional_value_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestAllTypesProto3::ArenaDtor(void* object) {
  TestAllTypesProto3* _this = reinterpret_cast< TestAllTypesProto3* >(object);
  (void)_this;
}
void TestAllTypesProto3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAllTypesProto3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAllTypesProto3& TestAllTypesProto3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAllTypesProto3_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base);
  return *internal_default_instance();
}


void TestAllTypesProto3::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_test_messages.proto3.TestAllTypesProto3)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofNestedMessage: {
      if (GetArena() == nullptr) {
        delete oneof_field_.oneof_nested_message_;
      }
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kOneofBool: {
      // No need to clear
      break;
    }
    case kOneofUint64: {
      // No need to clear
      break;
    }
    case kOneofFloat: {
      // No need to clear
      break;
    }
    case kOneofDouble: {
      // No need to clear
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestAllTypesProto3::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto3.TestAllTypesProto3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_bool_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_nested_message_.Clear();
  repeated_foreign_message_.Clear();
  repeated_nested_enum_.Clear();
  repeated_foreign_enum_.Clear();
  repeated_string_piece_.Clear();
  repeated_cord_.Clear();
  map_int32_int32_.Clear();
  map_int64_int64_.Clear();
  map_uint32_uint32_.Clear();
  map_uint64_uint64_.Clear();
  map_sint32_sint32_.Clear();
  map_sint64_sint64_.Clear();
  map_fixed32_fixed32_.Clear();
  map_fixed64_fixed64_.Clear();
  map_sfixed32_sfixed32_.Clear();
  map_sfixed64_sfixed64_.Clear();
  map_int32_float_.Clear();
  map_int32_double_.Clear();
  map_bool_bool_.Clear();
  map_string_string_.Clear();
  map_string_bytes_.Clear();
  map_string_nested_message_.Clear();
  map_string_foreign_message_.Clear();
  map_string_nested_enum_.Clear();
  map_string_foreign_enum_.Clear();
  packed_int32_.Clear();
  packed_int64_.Clear();
  packed_uint32_.Clear();
  packed_uint64_.Clear();
  packed_sint32_.Clear();
  packed_sint64_.Clear();
  packed_fixed32_.Clear();
  packed_fixed64_.Clear();
  packed_sfixed32_.Clear();
  packed_sfixed64_.Clear();
  packed_float_.Clear();
  packed_double_.Clear();
  packed_bool_.Clear();
  packed_nested_enum_.Clear();
  unpacked_int32_.Clear();
  unpacked_int64_.Clear();
  unpacked_uint32_.Clear();
  unpacked_uint64_.Clear();
  unpacked_sint32_.Clear();
  unpacked_sint64_.Clear();
  unpacked_fixed32_.Clear();
  unpacked_fixed64_.Clear();
  unpacked_sfixed32_.Clear();
  unpacked_sfixed64_.Clear();
  unpacked_float_.Clear();
  unpacked_double_.Clear();
  unpacked_bool_.Clear();
  unpacked_nested_enum_.Clear();
  repeated_bool_wrapper_.Clear();
  repeated_int32_wrapper_.Clear();
  repeated_int64_wrapper_.Clear();
  repeated_uint32_wrapper_.Clear();
  repeated_uint64_wrapper_.Clear();
  repeated_float_wrapper_.Clear();
  repeated_double_wrapper_.Clear();
  repeated_string_wrapper_.Clear();
  repeated_bytes_wrapper_.Clear();
  repeated_duration_.Clear();
  repeated_timestamp_.Clear();
  repeated_fieldmask_.Clear();
  repeated_any_.Clear();
  repeated_value_.Clear();
  repeated_list_value_.Clear();
  repeated_struct_.Clear();
  optional_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_string_piece_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_cord_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && optional_nested_message_ != nullptr) {
    delete optional_nested_message_;
  }
  optional_nested_message_ = nullptr;
  if (GetArena() == nullptr && optional_foreign_message_ != nullptr) {
    delete optional_foreign_message_;
  }
  optional_foreign_message_ = nullptr;
  if (GetArena() == nullptr && recursive_message_ != nullptr) {
    delete recursive_message_;
  }
  recursive_message_ = nullptr;
  if (GetArena() == nullptr && optional_bool_wrapper_ != nullptr) {
    delete optional_bool_wrapper_;
  }
  optional_bool_wrapper_ = nullptr;
  if (GetArena() == nullptr && optional_int32_wrapper_ != nullptr) {
    delete optional_int32_wrapper_;
  }
  optional_int32_wrapper_ = nullptr;
  if (GetArena() == nullptr && optional_int64_wrapper_ != nullptr) {
    delete optional_int64_wrapper_;
  }
  optional_int64_wrapper_ = nullptr;
  if (GetArena() == nullptr && optional_uint32_wrapper_ != nullptr) {
    delete optional_uint32_wrapper_;
  }
  optional_uint32_wrapper_ = nullptr;
  if (GetArena() == nullptr && optional_uint64_wrapper_ != nullptr) {
    delete optional_uint64_wrapper_;
  }
  optional_uint64_wrapper_ = nullptr;
  if (GetArena() == nullptr && optional_float_wrapper_ != nullptr) {
    delete optional_float_wrapper_;
  }
  optional_float_wrapper_ = nullptr;
  if (GetArena() == nullptr && optional_double_wrapper_ != nullptr) {
    delete optional_double_wrapper_;
  }
  optional_double_wrapper_ = nullptr;
  if (GetArena() == nullptr && optional_string_wrapper_ != nullptr) {
    delete optional_string_wrapper_;
  }
  optional_string_wrapper_ = nullptr;
  if (GetArena() == nullptr && optional_bytes_wrapper_ != nullptr) {
    delete optional_bytes_wrapper_;
  }
  optional_bytes_wrapper_ = nullptr;
  if (GetArena() == nullptr && optional_duration_ != nullptr) {
    delete optional_duration_;
  }
  optional_duration_ = nullptr;
  if (GetArena() == nullptr && optional_timestamp_ != nullptr) {
    delete optional_timestamp_;
  }
  optional_timestamp_ = nullptr;
  if (GetArena() == nullptr && optional_field_mask_ != nullptr) {
    delete optional_field_mask_;
  }
  optional_field_mask_ = nullptr;
  if (GetArena() == nullptr && optional_struct_ != nullptr) {
    delete optional_struct_;
  }
  optional_struct_ = nullptr;
  if (GetArena() == nullptr && optional_any_ != nullptr) {
    delete optional_any_;
  }
  optional_any_ = nullptr;
  if (GetArena() == nullptr && optional_value_ != nullptr) {
    delete optional_value_;
  }
  optional_value_ = nullptr;
  ::memset(&optional_int64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_name18___) -
      reinterpret_cast<char*>(&optional_int64_)) + sizeof(field_name18___));
  clear_oneof_field();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 optional_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 optional_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 optional_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 optional_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 optional_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          optional_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 optional_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          optional_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 optional_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          optional_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // fixed64 optional_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          optional_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed32 optional_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          optional_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // sfixed64 optional_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          optional_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // float optional_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double optional_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool optional_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string optional_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto3.TestAllTypesProto3.optional_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes optional_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage optional_nested_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto3.ForeignMessage optional_foreign_message = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_foreign_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum optional_nested_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_optional_nested_enum(static_cast<::protobuf_test_messages::proto3::TestAllTypesProto3_NestedEnum>(val));
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto3.ForeignEnum optional_foreign_enum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_optional_foreign_enum(static_cast<::protobuf_test_messages::proto3::ForeignEnum>(val));
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto3.TestAllTypesProto3.AliasedEnum optional_aliased_enum = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_optional_aliased_enum(static_cast<::protobuf_test_messages::proto3::TestAllTypesProto3_AliasedEnum>(val));
        } else goto handle_unusual;
        continue;
      // string optional_string_piece = 24 [ctype = STRING_PIECE];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_optional_string_piece();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto3.TestAllTypesProto3.optional_string_piece"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string optional_cord = 25 [ctype = CORD];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_optional_cord();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto3.TestAllTypesProto3.optional_cord"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto3.TestAllTypesProto3 recursive_message = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_recursive_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248) {
          _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0) {
          _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 repeated_sint32 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_repeated_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 repeated_sint64 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_repeated_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 repeated_fixed32 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 repeated_sfixed32 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_repeated_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 repeated_sfixed64 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_repeated_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated float repeated_float = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double repeated_double = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81) {
          _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string repeated_string = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto3.TestAllTypesProto3.repeated_string"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage repeated_nested_message = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_nested_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto3.ForeignMessage repeated_foreign_message = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_foreign_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum repeated_nested_enum = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_repeated_nested_enum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_repeated_nested_enum(static_cast<::protobuf_test_messages::proto3::TestAllTypesProto3_NestedEnum>(val));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto3.ForeignEnum repeated_foreign_enum = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_repeated_foreign_enum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_repeated_foreign_enum(static_cast<::protobuf_test_messages::proto3::ForeignEnum>(val));
        } else goto handle_unusual;
        continue;
      // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string_piece();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto3.TestAllTypesProto3.repeated_string_piece"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string repeated_cord = 55 [ctype = CORD];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_cord();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto3.TestAllTypesProto3.repeated_cord"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, int32> map_int32_int32 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int32_int32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<450>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int64, int64> map_int64_int64 = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int64_int64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> map_uint32_uint32 = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_uint32_uint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<466>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, uint64> map_uint64_uint64 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_uint64_uint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<474>(ptr));
        } else goto handle_unusual;
        continue;
      // map<sint32, sint32> map_sint32_sint32 = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_sint32_sint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<482>(ptr));
        } else goto handle_unusual;
        continue;
      // map<sint64, sint64> map_sint64_sint64 = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_sint64_sint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<490>(ptr));
        } else goto handle_unusual;
        continue;
      // map<fixed32, fixed32> map_fixed32_fixed32 = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_fixed32_fixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<498>(ptr));
        } else goto handle_unusual;
        continue;
      // map<fixed64, fixed64> map_fixed64_fixed64 = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_fixed64_fixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<506>(ptr));
        } else goto handle_unusual;
        continue;
      // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_sfixed32_sfixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<514>(ptr));
        } else goto handle_unusual;
        continue;
      // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_sfixed64_sfixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<522>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, float> map_int32_float = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int32_float_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<530>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, double> map_int32_double = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int32_double_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<538>(ptr));
        } else goto handle_unusual;
        continue;
      // map<bool, bool> map_bool_bool = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_bool_bool_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<546>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> map_string_string = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_string_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<554>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, bytes> map_string_bytes = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_bytes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage> map_string_nested_message = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_nested_message_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<570>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto3.ForeignMessage> map_string_foreign_message = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_foreign_message_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<578>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum> map_string_nested_enum = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_nested_enum_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<586>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto3.ForeignEnum> map_string_foreign_enum = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_string_foreign_enum_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<594>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 packed_int32 = 75 [packed = true];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_packed_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 packed_int64 = 76 [packed = true];
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_packed_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_packed_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 packed_uint32 = 77 [packed = true];
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_packed_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 packed_uint64 = 78 [packed = true];
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packed_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_packed_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 packed_sint32 = 79 [packed = true];
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_packed_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_packed_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 packed_sint64 = 80 [packed = true];
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_packed_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_packed_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 packed_fixed32 = 81 [packed = true];
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_packed_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141) {
          _internal_add_packed_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 packed_fixed64 = 82 [packed = true];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_packed_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145) {
          _internal_add_packed_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 packed_sfixed32 = 83 [packed = true];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_packed_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157) {
          _internal_add_packed_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 packed_sfixed64 = 84 [packed = true];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_packed_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161) {
          _internal_add_packed_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated float packed_float = 85 [packed = true];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_packed_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173) {
          _internal_add_packed_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double packed_double = 86 [packed = true];
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_packed_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177) {
          _internal_add_packed_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bool packed_bool = 87 [packed = true];
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_packed_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184) {
          _internal_add_packed_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum packed_nested_enum = 88 [packed = true];
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_packed_nested_enum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_packed_nested_enum(static_cast<::protobuf_test_messages::proto3::TestAllTypesProto3_NestedEnum>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 unpacked_int32 = 89 [packed = false];
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<712>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unpacked_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 unpacked_int64 = 90 [packed = false];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<720>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_unpacked_int64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 unpacked_uint32 = 91 [packed = false];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<728>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unpacked_uint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 unpacked_uint64 = 92 [packed = false];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<736>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_unpacked_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 unpacked_sint32 = 93 [packed = false];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<744>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_unpacked_sint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 unpacked_sint64 = 94 [packed = false];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<752>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_unpacked_sint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 unpacked_fixed32 = 95 [packed = false];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<765>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_unpacked_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 unpacked_fixed64 = 96 [packed = false];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<769>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_unpacked_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<781>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_unpacked_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<785>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_unpacked_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float unpacked_float = 99 [packed = false];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<797>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_unpacked_float(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double unpacked_double = 100 [packed = false];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<801>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_unpacked_double(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool unpacked_bool = 101 [packed = false];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<808>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_unpacked_bool(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum unpacked_nested_enum = 102 [packed = false];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            _internal_add_unpacked_nested_enum(static_cast<::protobuf_test_messages::proto3::TestAllTypesProto3_NestedEnum>(val));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<816>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_unpacked_nested_enum(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage oneof_nested_message = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string oneof_string = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_test_messages.proto3.TestAllTypesProto3.oneof_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes oneof_bytes = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool oneof_bool = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _internal_set_oneof_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 oneof_uint64 = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _internal_set_oneof_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float oneof_float = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _internal_set_oneof_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double oneof_double = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _internal_set_oneof_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum oneof_enum = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oneof_enum(static_cast<::protobuf_test_messages::proto3::TestAllTypesProto3_NestedEnum>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue optional_bool_wrapper = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_bool_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value optional_int32_wrapper = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_int32_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value optional_int64_wrapper = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_int64_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value optional_uint32_wrapper = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_uint32_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value optional_uint64_wrapper = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_uint64_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue optional_float_wrapper = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_float_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue optional_double_wrapper = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_double_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue optional_string_wrapper = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_string_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BytesValue optional_bytes_wrapper = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_bytes_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.BoolValue repeated_bool_wrapper = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_bool_wrapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1690>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Int32Value repeated_int32_wrapper = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_int32_wrapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1698>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Int64Value repeated_int64_wrapper = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_int64_wrapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1706>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.UInt32Value repeated_uint32_wrapper = 214;
      case 214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_uint32_wrapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1714>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.UInt64Value repeated_uint64_wrapper = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_uint64_wrapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1722>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.FloatValue repeated_float_wrapper = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_float_wrapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1730>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.DoubleValue repeated_double_wrapper = 217;
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_double_wrapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1738>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.StringValue repeated_string_wrapper = 218;
      case 218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_string_wrapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1746>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.BytesValue repeated_bytes_wrapper = 219;
      case 219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_bytes_wrapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1754>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration optional_duration = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp optional_timestamp = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask optional_field_mask = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_field_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct optional_struct = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_struct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any optional_any = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Value optional_value = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Duration repeated_duration = 311;
      case 311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_duration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2490>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Timestamp repeated_timestamp = 312;
      case 312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_timestamp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2498>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.FieldMask repeated_fieldmask = 313;
      case 313:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_fieldmask(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2506>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any repeated_any = 315;
      case 315:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_any(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2522>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Value repeated_value = 316;
      case 316:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2530>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.ListValue repeated_list_value = 317;
      case 317:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_list_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2538>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Struct repeated_struct = 324;
      case 324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_struct(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2594>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 fieldname1 = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          fieldname1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 field_name2 = 402;
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          field_name2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 _field_name3 = 403;
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _field_name3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 field__name4_ = 404;
      case 404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          field__name4__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 field0name5 = 405;
      case 405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          field0name5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 field_0_name6 = 406;
      case 406:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          field_0_name6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fieldName7 = 407;
      case 407:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          fieldname7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FieldName8 = 408;
      case 408:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          fieldname8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 field_Name9 = 409;
      case 409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          field_name9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Field_Name10 = 410;
      case 410:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          field_name10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FIELD_NAME11 = 411;
      case 411:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          field_name11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FIELD_name12 = 412;
      case 412:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          field_name12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 __field_name13 = 413;
      case 413:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          __field_name13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 __Field_name14 = 414;
      case 414:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          __field_name14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 field__name15 = 415;
      case 415:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          field__name15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 field__Name16 = 416;
      case 416:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          field__name16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 field_name17__ = 417;
      case 417:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_name17___ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Field_name18__ = 418;
      case 418:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          field_name18___ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAllTypesProto3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto3.TestAllTypesProto3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_optional_int32(), target);
  }

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_optional_int64(), target);
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_optional_uint32(), target);
  }

  // uint64 optional_uint64 = 4;
  if (this->optional_uint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_optional_uint64(), target);
  }

  // sint32 optional_sint32 = 5;
  if (this->optional_sint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_optional_sint32(), target);
  }

  // sint64 optional_sint64 = 6;
  if (this->optional_sint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_optional_sint64(), target);
  }

  // fixed32 optional_fixed32 = 7;
  if (this->optional_fixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_optional_fixed32(), target);
  }

  // fixed64 optional_fixed64 = 8;
  if (this->optional_fixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_optional_fixed64(), target);
  }

  // sfixed32 optional_sfixed32 = 9;
  if (this->optional_sfixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_optional_sfixed32(), target);
  }

  // sfixed64 optional_sfixed64 = 10;
  if (this->optional_sfixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_optional_sfixed64(), target);
  }

  // float optional_float = 11;
  if (!(this->optional_float() <= 0 && this->optional_float() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_optional_float(), target);
  }

  // double optional_double = 12;
  if (!(this->optional_double() <= 0 && this->optional_double() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_optional_double(), target);
  }

  // bool optional_bool = 13;
  if (this->optional_bool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_optional_bool(), target);
  }

  // string optional_string = 14;
  if (this->optional_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_test_messages.proto3.TestAllTypesProto3.optional_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_optional_string(), target);
  }

  // bytes optional_bytes = 15;
  if (this->optional_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_optional_bytes(), target);
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage optional_nested_message = 18;
  if (this->has_optional_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::optional_nested_message(this), target, stream);
  }

  // .protobuf_test_messages.proto3.ForeignMessage optional_foreign_message = 19;
  if (this->has_optional_foreign_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::optional_foreign_message(this), target, stream);
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum optional_nested_enum = 21;
  if (this->optional_nested_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_optional_nested_enum(), target);
  }

  // .protobuf_test_messages.proto3.ForeignEnum optional_foreign_enum = 22;
  if (this->optional_foreign_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_optional_foreign_enum(), target);
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3.AliasedEnum optional_aliased_enum = 23;
  if (this->optional_aliased_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_optional_aliased_enum(), target);
  }

  // string optional_string_piece = 24 [ctype = STRING_PIECE];
  if (this->optional_string_piece().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_string_piece().data(), static_cast<int>(this->_internal_optional_string_piece().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_test_messages.proto3.TestAllTypesProto3.optional_string_piece");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_optional_string_piece(), target);
  }

  // string optional_cord = 25 [ctype = CORD];
  if (this->optional_cord().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_cord().data(), static_cast<int>(this->_internal_optional_cord().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_test_messages.proto3.TestAllTypesProto3.optional_cord");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_optional_cord(), target);
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3 recursive_message = 27;
  if (this->has_recursive_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::recursive_message(this), target, stream);
  }

  // repeated int32 repeated_int32 = 31;
  {
    int byte_size = _repeated_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          31, _internal_repeated_int32(), byte_size, target);
    }
  }

  // repeated int64 repeated_int64 = 32;
  {
    int byte_size = _repeated_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          32, _internal_repeated_int64(), byte_size, target);
    }
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    int byte_size = _repeated_uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          33, _internal_repeated_uint32(), byte_size, target);
    }
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    int byte_size = _repeated_uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          34, _internal_repeated_uint64(), byte_size, target);
    }
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    int byte_size = _repeated_sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          35, _internal_repeated_sint32(), byte_size, target);
    }
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    int byte_size = _repeated_sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          36, _internal_repeated_sint64(), byte_size, target);
    }
  }

  // repeated fixed32 repeated_fixed32 = 37;
  if (this->_internal_repeated_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(37, _internal_repeated_fixed32(), target);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  if (this->_internal_repeated_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(38, _internal_repeated_fixed64(), target);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  if (this->_internal_repeated_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(39, _internal_repeated_sfixed32(), target);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  if (this->_internal_repeated_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(40, _internal_repeated_sfixed64(), target);
  }

  // repeated float repeated_float = 41;
  if (this->_internal_repeated_float_size() > 0) {
    target = stream->WriteFixedPacked(41, _internal_repeated_float(), target);
  }

  // repeated double repeated_double = 42;
  if (this->_internal_repeated_double_size() > 0) {
    target = stream->WriteFixedPacked(42, _internal_repeated_double(), target);
  }

  // repeated bool repeated_bool = 43;
  if (this->_internal_repeated_bool_size() > 0) {
    target = stream->WriteFixedPacked(43, _internal_repeated_bool(), target);
  }

  // repeated string repeated_string = 44;
  for (int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_test_messages.proto3.TestAllTypesProto3.repeated_string");
    target = stream->WriteString(44, s, target);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(45, s, target);
  }

  // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage repeated_nested_message = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_nested_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, this->_internal_repeated_nested_message(i), target, stream);
  }

  // repeated .protobuf_test_messages.proto3.ForeignMessage repeated_foreign_message = 49;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_foreign_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, this->_internal_repeated_foreign_message(i), target, stream);
  }

  // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum repeated_nested_enum = 51;
  {
    int byte_size = _repeated_nested_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          51, repeated_nested_enum_, byte_size, target);
    }
  }

  // repeated .protobuf_test_messages.proto3.ForeignEnum repeated_foreign_enum = 52;
  {
    int byte_size = _repeated_foreign_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          52, repeated_foreign_enum_, byte_size, target);
    }
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_repeated_string_piece_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string_piece(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_test_messages.proto3.TestAllTypesProto3.repeated_string_piece");
    target = stream->WriteString(54, s, target);
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  for (int i = 0, n = this->_internal_repeated_cord_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_cord(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_test_messages.proto3.TestAllTypesProto3.repeated_cord");
    target = stream->WriteString(55, s, target);
  }

  // map<int32, int32> map_int32_int32 = 56;
  if (!this->_internal_map_int32_int32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_int32_int32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_int32_int32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_int32_int32().begin();
          it != this->_internal_map_int32_int32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapInt32Int32Entry_DoNotUse::Funcs::InternalSerialize(56, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_int32_int32().begin();
          it != this->_internal_map_int32_int32().end(); ++it) {
        target = TestAllTypesProto3_MapInt32Int32Entry_DoNotUse::Funcs::InternalSerialize(56, it->first, it->second, target, stream);
      }
    }
  }

  // map<int64, int64> map_int64_int64 = 57;
  if (!this->_internal_map_int64_int64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_int64_int64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_int64_int64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_int64_int64().begin();
          it != this->_internal_map_int64_int64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapInt64Int64Entry_DoNotUse::Funcs::InternalSerialize(57, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_int64_int64().begin();
          it != this->_internal_map_int64_int64().end(); ++it) {
        target = TestAllTypesProto3_MapInt64Int64Entry_DoNotUse::Funcs::InternalSerialize(57, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint32, uint32> map_uint32_uint32 = 58;
  if (!this->_internal_map_uint32_uint32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_uint32_uint32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_uint32_uint32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_map_uint32_uint32().begin();
          it != this->_internal_map_uint32_uint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse::Funcs::InternalSerialize(58, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_map_uint32_uint32().begin();
          it != this->_internal_map_uint32_uint32().end(); ++it) {
        target = TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse::Funcs::InternalSerialize(58, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint64, uint64> map_uint64_uint64 = 59;
  if (!this->_internal_map_uint64_uint64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_uint64_uint64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_uint64_uint64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_map_uint64_uint64().begin();
          it != this->_internal_map_uint64_uint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse::Funcs::InternalSerialize(59, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_map_uint64_uint64().begin();
          it != this->_internal_map_uint64_uint64().end(); ++it) {
        target = TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse::Funcs::InternalSerialize(59, it->first, it->second, target, stream);
      }
    }
  }

  // map<sint32, sint32> map_sint32_sint32 = 60;
  if (!this->_internal_map_sint32_sint32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_sint32_sint32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_sint32_sint32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_sint32_sint32().begin();
          it != this->_internal_map_sint32_sint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse::Funcs::InternalSerialize(60, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_sint32_sint32().begin();
          it != this->_internal_map_sint32_sint32().end(); ++it) {
        target = TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse::Funcs::InternalSerialize(60, it->first, it->second, target, stream);
      }
    }
  }

  // map<sint64, sint64> map_sint64_sint64 = 61;
  if (!this->_internal_map_sint64_sint64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_sint64_sint64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_sint64_sint64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_sint64_sint64().begin();
          it != this->_internal_map_sint64_sint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse::Funcs::InternalSerialize(61, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_sint64_sint64().begin();
          it != this->_internal_map_sint64_sint64().end(); ++it) {
        target = TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse::Funcs::InternalSerialize(61, it->first, it->second, target, stream);
      }
    }
  }

  // map<fixed32, fixed32> map_fixed32_fixed32 = 62;
  if (!this->_internal_map_fixed32_fixed32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_fixed32_fixed32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_fixed32_fixed32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_map_fixed32_fixed32().begin();
          it != this->_internal_map_fixed32_fixed32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse::Funcs::InternalSerialize(62, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_map_fixed32_fixed32().begin();
          it != this->_internal_map_fixed32_fixed32().end(); ++it) {
        target = TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse::Funcs::InternalSerialize(62, it->first, it->second, target, stream);
      }
    }
  }

  // map<fixed64, fixed64> map_fixed64_fixed64 = 63;
  if (!this->_internal_map_fixed64_fixed64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_fixed64_fixed64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_fixed64_fixed64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_map_fixed64_fixed64().begin();
          it != this->_internal_map_fixed64_fixed64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse::Funcs::InternalSerialize(63, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_map_fixed64_fixed64().begin();
          it != this->_internal_map_fixed64_fixed64().end(); ++it) {
        target = TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse::Funcs::InternalSerialize(63, it->first, it->second, target, stream);
      }
    }
  }

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
  if (!this->_internal_map_sfixed32_sfixed32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_sfixed32_sfixed32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_sfixed32_sfixed32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_sfixed32_sfixed32().begin();
          it != this->_internal_map_sfixed32_sfixed32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse::Funcs::InternalSerialize(64, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map_sfixed32_sfixed32().begin();
          it != this->_internal_map_sfixed32_sfixed32().end(); ++it) {
        target = TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse::Funcs::InternalSerialize(64, it->first, it->second, target, stream);
      }
    }
  }

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
  if (!this->_internal_map_sfixed64_sfixed64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_sfixed64_sfixed64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_sfixed64_sfixed64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_sfixed64_sfixed64().begin();
          it != this->_internal_map_sfixed64_sfixed64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse::Funcs::InternalSerialize(65, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_map_sfixed64_sfixed64().begin();
          it != this->_internal_map_sfixed64_sfixed64().end(); ++it) {
        target = TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse::Funcs::InternalSerialize(65, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, float> map_int32_float = 66;
  if (!this->_internal_map_int32_float().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_int32_float().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_int32_float().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_map_int32_float().begin();
          it != this->_internal_map_int32_float().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapInt32FloatEntry_DoNotUse::Funcs::InternalSerialize(66, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_map_int32_float().begin();
          it != this->_internal_map_int32_float().end(); ++it) {
        target = TestAllTypesProto3_MapInt32FloatEntry_DoNotUse::Funcs::InternalSerialize(66, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, double> map_int32_double = 67;
  if (!this->_internal_map_int32_double().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, double >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_int32_double().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_int32_double().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, double >::const_iterator
          it = this->_internal_map_int32_double().begin();
          it != this->_internal_map_int32_double().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse::Funcs::InternalSerialize(67, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, double >::const_iterator
          it = this->_internal_map_int32_double().begin();
          it != this->_internal_map_int32_double().end(); ++it) {
        target = TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse::Funcs::InternalSerialize(67, it->first, it->second, target, stream);
      }
    }
  }

  // map<bool, bool> map_bool_bool = 68;
  if (!this->_internal_map_bool_bool().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_bool_bool().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_bool_bool().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_iterator
          it = this->_internal_map_bool_bool().begin();
          it != this->_internal_map_bool_bool().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapBoolBoolEntry_DoNotUse::Funcs::InternalSerialize(68, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_iterator
          it = this->_internal_map_bool_bool().begin();
          it != this->_internal_map_bool_bool().end(); ++it) {
        target = TestAllTypesProto3_MapBoolBoolEntry_DoNotUse::Funcs::InternalSerialize(68, it->first, it->second, target, stream);
      }
    }
  }

  // map<string, string> map_string_string = 69;
  if (!this->_internal_map_string_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf_test_messages.proto3.TestAllTypesProto3.MapStringStringEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf_test_messages.proto3.TestAllTypesProto3.MapStringStringEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_string().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_string_string().begin();
          it != this->_internal_map_string_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapStringStringEntry_DoNotUse::Funcs::InternalSerialize(69, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_string_string().begin();
          it != this->_internal_map_string_string().end(); ++it) {
        target = TestAllTypesProto3_MapStringStringEntry_DoNotUse::Funcs::InternalSerialize(69, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, bytes> map_string_bytes = 70;
  if (!this->_internal_map_string_bytes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf_test_messages.proto3.TestAllTypesProto3.MapStringBytesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_bytes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_bytes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_string_bytes().begin();
          it != this->_internal_map_string_bytes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapStringBytesEntry_DoNotUse::Funcs::InternalSerialize(70, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_map_string_bytes().begin();
          it != this->_internal_map_string_bytes().end(); ++it) {
        target = TestAllTypesProto3_MapStringBytesEntry_DoNotUse::Funcs::InternalSerialize(70, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage> map_string_nested_message = 71;
  if (!this->_internal_map_string_nested_message().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf_test_messages.proto3.TestAllTypesProto3.MapStringNestedMessageEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_nested_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_nested_message().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage >::const_iterator
          it = this->_internal_map_string_nested_message().begin();
          it != this->_internal_map_string_nested_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse::Funcs::InternalSerialize(71, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage >::const_iterator
          it = this->_internal_map_string_nested_message().begin();
          it != this->_internal_map_string_nested_message().end(); ++it) {
        target = TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse::Funcs::InternalSerialize(71, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .protobuf_test_messages.proto3.ForeignMessage> map_string_foreign_message = 72;
  if (!this->_internal_map_string_foreign_message().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::ForeignMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf_test_messages.proto3.TestAllTypesProto3.MapStringForeignMessageEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_foreign_message().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_foreign_message().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::ForeignMessage >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::ForeignMessage >::const_iterator
          it = this->_internal_map_string_foreign_message().begin();
          it != this->_internal_map_string_foreign_message().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse::Funcs::InternalSerialize(72, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::ForeignMessage >::const_iterator
          it = this->_internal_map_string_foreign_message().begin();
          it != this->_internal_map_string_foreign_message().end(); ++it) {
        target = TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse::Funcs::InternalSerialize(72, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum> map_string_nested_enum = 73;
  if (!this->_internal_map_string_nested_enum().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedEnum >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf_test_messages.proto3.TestAllTypesProto3.MapStringNestedEnumEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_nested_enum().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_nested_enum().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedEnum >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedEnum >::const_iterator
          it = this->_internal_map_string_nested_enum().begin();
          it != this->_internal_map_string_nested_enum().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse::Funcs::InternalSerialize(73, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedEnum >::const_iterator
          it = this->_internal_map_string_nested_enum().begin();
          it != this->_internal_map_string_nested_enum().end(); ++it) {
        target = TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse::Funcs::InternalSerialize(73, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .protobuf_test_messages.proto3.ForeignEnum> map_string_foreign_enum = 74;
  if (!this->_internal_map_string_foreign_enum().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::ForeignEnum >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protobuf_test_messages.proto3.TestAllTypesProto3.MapStringForeignEnumEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_string_foreign_enum().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_string_foreign_enum().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::ForeignEnum >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::ForeignEnum >::const_iterator
          it = this->_internal_map_string_foreign_enum().begin();
          it != this->_internal_map_string_foreign_enum().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse::Funcs::InternalSerialize(74, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::ForeignEnum >::const_iterator
          it = this->_internal_map_string_foreign_enum().begin();
          it != this->_internal_map_string_foreign_enum().end(); ++it) {
        target = TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse::Funcs::InternalSerialize(74, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated int32 packed_int32 = 75 [packed = true];
  {
    int byte_size = _packed_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          75, _internal_packed_int32(), byte_size, target);
    }
  }

  // repeated int64 packed_int64 = 76 [packed = true];
  {
    int byte_size = _packed_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          76, _internal_packed_int64(), byte_size, target);
    }
  }

  // repeated uint32 packed_uint32 = 77 [packed = true];
  {
    int byte_size = _packed_uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          77, _internal_packed_uint32(), byte_size, target);
    }
  }

  // repeated uint64 packed_uint64 = 78 [packed = true];
  {
    int byte_size = _packed_uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          78, _internal_packed_uint64(), byte_size, target);
    }
  }

  // repeated sint32 packed_sint32 = 79 [packed = true];
  {
    int byte_size = _packed_sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          79, _internal_packed_sint32(), byte_size, target);
    }
  }

  // repeated sint64 packed_sint64 = 80 [packed = true];
  {
    int byte_size = _packed_sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          80, _internal_packed_sint64(), byte_size, target);
    }
  }

  // repeated fixed32 packed_fixed32 = 81 [packed = true];
  if (this->_internal_packed_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(81, _internal_packed_fixed32(), target);
  }

  // repeated fixed64 packed_fixed64 = 82 [packed = true];
  if (this->_internal_packed_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(82, _internal_packed_fixed64(), target);
  }

  // repeated sfixed32 packed_sfixed32 = 83 [packed = true];
  if (this->_internal_packed_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(83, _internal_packed_sfixed32(), target);
  }

  // repeated sfixed64 packed_sfixed64 = 84 [packed = true];
  if (this->_internal_packed_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(84, _internal_packed_sfixed64(), target);
  }

  // repeated float packed_float = 85 [packed = true];
  if (this->_internal_packed_float_size() > 0) {
    target = stream->WriteFixedPacked(85, _internal_packed_float(), target);
  }

  // repeated double packed_double = 86 [packed = true];
  if (this->_internal_packed_double_size() > 0) {
    target = stream->WriteFixedPacked(86, _internal_packed_double(), target);
  }

  // repeated bool packed_bool = 87 [packed = true];
  if (this->_internal_packed_bool_size() > 0) {
    target = stream->WriteFixedPacked(87, _internal_packed_bool(), target);
  }

  // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum packed_nested_enum = 88 [packed = true];
  {
    int byte_size = _packed_nested_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          88, packed_nested_enum_, byte_size, target);
    }
  }

  // repeated int32 unpacked_int32 = 89 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(89, this->_internal_unpacked_int32(i), target);
  }

  // repeated int64 unpacked_int64 = 90 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(90, this->_internal_unpacked_int64(i), target);
  }

  // repeated uint32 unpacked_uint32 = 91 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(91, this->_internal_unpacked_uint32(i), target);
  }

  // repeated uint64 unpacked_uint64 = 92 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(92, this->_internal_unpacked_uint64(i), target);
  }

  // repeated sint32 unpacked_sint32 = 93 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(93, this->_internal_unpacked_sint32(i), target);
  }

  // repeated sint64 unpacked_sint64 = 94 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(94, this->_internal_unpacked_sint64(i), target);
  }

  // repeated fixed32 unpacked_fixed32 = 95 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(95, this->_internal_unpacked_fixed32(i), target);
  }

  // repeated fixed64 unpacked_fixed64 = 96 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(96, this->_internal_unpacked_fixed64(i), target);
  }

  // repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(97, this->_internal_unpacked_sfixed32(i), target);
  }

  // repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(98, this->_internal_unpacked_sfixed64(i), target);
  }

  // repeated float unpacked_float = 99 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(99, this->_internal_unpacked_float(i), target);
  }

  // repeated double unpacked_double = 100 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(100, this->_internal_unpacked_double(i), target);
  }

  // repeated bool unpacked_bool = 101 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(101, this->_internal_unpacked_bool(i), target);
  }

  // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum unpacked_nested_enum = 102 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_nested_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        102, this->_internal_unpacked_nested_enum(i), target);
  }

  // uint32 oneof_uint32 = 111;
  if (_internal_has_oneof_uint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(111, this->_internal_oneof_uint32(), target);
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage oneof_nested_message = 112;
  if (_internal_has_oneof_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        112, _Internal::oneof_nested_message(this), target, stream);
  }

  // string oneof_string = 113;
  if (_internal_has_oneof_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_test_messages.proto3.TestAllTypesProto3.oneof_string");
    target = stream->WriteStringMaybeAliased(
        113, this->_internal_oneof_string(), target);
  }

  // bytes oneof_bytes = 114;
  if (_internal_has_oneof_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        114, this->_internal_oneof_bytes(), target);
  }

  // bool oneof_bool = 115;
  if (_internal_has_oneof_bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(115, this->_internal_oneof_bool(), target);
  }

  // uint64 oneof_uint64 = 116;
  if (_internal_has_oneof_uint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(116, this->_internal_oneof_uint64(), target);
  }

  // float oneof_float = 117;
  if (_internal_has_oneof_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(117, this->_internal_oneof_float(), target);
  }

  // double oneof_double = 118;
  if (_internal_has_oneof_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(118, this->_internal_oneof_double(), target);
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum oneof_enum = 119;
  if (_internal_has_oneof_enum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      119, this->_internal_oneof_enum(), target);
  }

  // .google.protobuf.BoolValue optional_bool_wrapper = 201;
  if (this->has_optional_bool_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        201, _Internal::optional_bool_wrapper(this), target, stream);
  }

  // .google.protobuf.Int32Value optional_int32_wrapper = 202;
  if (this->has_optional_int32_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        202, _Internal::optional_int32_wrapper(this), target, stream);
  }

  // .google.protobuf.Int64Value optional_int64_wrapper = 203;
  if (this->has_optional_int64_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        203, _Internal::optional_int64_wrapper(this), target, stream);
  }

  // .google.protobuf.UInt32Value optional_uint32_wrapper = 204;
  if (this->has_optional_uint32_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        204, _Internal::optional_uint32_wrapper(this), target, stream);
  }

  // .google.protobuf.UInt64Value optional_uint64_wrapper = 205;
  if (this->has_optional_uint64_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        205, _Internal::optional_uint64_wrapper(this), target, stream);
  }

  // .google.protobuf.FloatValue optional_float_wrapper = 206;
  if (this->has_optional_float_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        206, _Internal::optional_float_wrapper(this), target, stream);
  }

  // .google.protobuf.DoubleValue optional_double_wrapper = 207;
  if (this->has_optional_double_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        207, _Internal::optional_double_wrapper(this), target, stream);
  }

  // .google.protobuf.StringValue optional_string_wrapper = 208;
  if (this->has_optional_string_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        208, _Internal::optional_string_wrapper(this), target, stream);
  }

  // .google.protobuf.BytesValue optional_bytes_wrapper = 209;
  if (this->has_optional_bytes_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        209, _Internal::optional_bytes_wrapper(this), target, stream);
  }

  // repeated .google.protobuf.BoolValue repeated_bool_wrapper = 211;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_bool_wrapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(211, this->_internal_repeated_bool_wrapper(i), target, stream);
  }

  // repeated .google.protobuf.Int32Value repeated_int32_wrapper = 212;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_int32_wrapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(212, this->_internal_repeated_int32_wrapper(i), target, stream);
  }

  // repeated .google.protobuf.Int64Value repeated_int64_wrapper = 213;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_int64_wrapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(213, this->_internal_repeated_int64_wrapper(i), target, stream);
  }

  // repeated .google.protobuf.UInt32Value repeated_uint32_wrapper = 214;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_uint32_wrapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(214, this->_internal_repeated_uint32_wrapper(i), target, stream);
  }

  // repeated .google.protobuf.UInt64Value repeated_uint64_wrapper = 215;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_uint64_wrapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(215, this->_internal_repeated_uint64_wrapper(i), target, stream);
  }

  // repeated .google.protobuf.FloatValue repeated_float_wrapper = 216;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_float_wrapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(216, this->_internal_repeated_float_wrapper(i), target, stream);
  }

  // repeated .google.protobuf.DoubleValue repeated_double_wrapper = 217;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_double_wrapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(217, this->_internal_repeated_double_wrapper(i), target, stream);
  }

  // repeated .google.protobuf.StringValue repeated_string_wrapper = 218;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_string_wrapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(218, this->_internal_repeated_string_wrapper(i), target, stream);
  }

  // repeated .google.protobuf.BytesValue repeated_bytes_wrapper = 219;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_bytes_wrapper_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(219, this->_internal_repeated_bytes_wrapper(i), target, stream);
  }

  // .google.protobuf.Duration optional_duration = 301;
  if (this->has_optional_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        301, _Internal::optional_duration(this), target, stream);
  }

  // .google.protobuf.Timestamp optional_timestamp = 302;
  if (this->has_optional_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        302, _Internal::optional_timestamp(this), target, stream);
  }

  // .google.protobuf.FieldMask optional_field_mask = 303;
  if (this->has_optional_field_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        303, _Internal::optional_field_mask(this), target, stream);
  }

  // .google.protobuf.Struct optional_struct = 304;
  if (this->has_optional_struct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        304, _Internal::optional_struct(this), target, stream);
  }

  // .google.protobuf.Any optional_any = 305;
  if (this->has_optional_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        305, _Internal::optional_any(this), target, stream);
  }

  // .google.protobuf.Value optional_value = 306;
  if (this->has_optional_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        306, _Internal::optional_value(this), target, stream);
  }

  // repeated .google.protobuf.Duration repeated_duration = 311;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_duration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(311, this->_internal_repeated_duration(i), target, stream);
  }

  // repeated .google.protobuf.Timestamp repeated_timestamp = 312;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_timestamp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(312, this->_internal_repeated_timestamp(i), target, stream);
  }

  // repeated .google.protobuf.FieldMask repeated_fieldmask = 313;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_fieldmask_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(313, this->_internal_repeated_fieldmask(i), target, stream);
  }

  // repeated .google.protobuf.Any repeated_any = 315;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_any_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(315, this->_internal_repeated_any(i), target, stream);
  }

  // repeated .google.protobuf.Value repeated_value = 316;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(316, this->_internal_repeated_value(i), target, stream);
  }

  // repeated .google.protobuf.ListValue repeated_list_value = 317;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_list_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(317, this->_internal_repeated_list_value(i), target, stream);
  }

  // repeated .google.protobuf.Struct repeated_struct = 324;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_struct_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(324, this->_internal_repeated_struct(i), target, stream);
  }

  // int32 fieldname1 = 401;
  if (this->fieldname1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(401, this->_internal_fieldname1(), target);
  }

  // int32 field_name2 = 402;
  if (this->field_name2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(402, this->_internal_field_name2(), target);
  }

  // int32 _field_name3 = 403;
  if (this->_field_name3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(403, this->_internal__field_name3(), target);
  }

  // int32 field__name4_ = 404;
  if (this->field__name4_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(404, this->_internal_field__name4_(), target);
  }

  // int32 field0name5 = 405;
  if (this->field0name5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(405, this->_internal_field0name5(), target);
  }

  // int32 field_0_name6 = 406;
  if (this->field_0_name6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(406, this->_internal_field_0_name6(), target);
  }

  // int32 fieldName7 = 407;
  if (this->fieldname7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(407, this->_internal_fieldname7(), target);
  }

  // int32 FieldName8 = 408;
  if (this->fieldname8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(408, this->_internal_fieldname8(), target);
  }

  // int32 field_Name9 = 409;
  if (this->field_name9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(409, this->_internal_field_name9(), target);
  }

  // int32 Field_Name10 = 410;
  if (this->field_name10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(410, this->_internal_field_name10(), target);
  }

  // int32 FIELD_NAME11 = 411;
  if (this->field_name11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(411, this->_internal_field_name11(), target);
  }

  // int32 FIELD_name12 = 412;
  if (this->field_name12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(412, this->_internal_field_name12(), target);
  }

  // int32 __field_name13 = 413;
  if (this->__field_name13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(413, this->_internal___field_name13(), target);
  }

  // int32 __Field_name14 = 414;
  if (this->__field_name14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(414, this->_internal___field_name14(), target);
  }

  // int32 field__name15 = 415;
  if (this->field__name15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(415, this->_internal_field__name15(), target);
  }

  // int32 field__Name16 = 416;
  if (this->field__name16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(416, this->_internal_field__name16(), target);
  }

  // int32 field_name17__ = 417;
  if (this->field_name17__() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(417, this->_internal_field_name17__(), target);
  }

  // int32 Field_name18__ = 418;
  if (this->field_name18__() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(418, this->_internal_field_name18__(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto3.TestAllTypesProto3)
  return target;
}

size_t TestAllTypesProto3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto3.TestAllTypesProto3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 32;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 37;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_fixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_fixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_sfixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_sfixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float repeated_float = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_float_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double repeated_double = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_double_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool repeated_bool = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_bool_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string repeated_string = 44;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_.size());
  for (int i = 0, n = repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 45;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_bytes_.size());
  for (int i = 0, n = repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      repeated_bytes_.Get(i));
  }

  // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage repeated_nested_message = 48;
  total_size += 2UL * this->_internal_repeated_nested_message_size();
  for (const auto& msg : this->repeated_nested_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_test_messages.proto3.ForeignMessage repeated_foreign_message = 49;
  total_size += 2UL * this->_internal_repeated_foreign_message_size();
  for (const auto& msg : this->repeated_foreign_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum repeated_nested_enum = 51;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_nested_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_nested_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .protobuf_test_messages.proto3.ForeignEnum repeated_foreign_enum = 52;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_foreign_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_foreign_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _repeated_foreign_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_piece_.size());
  for (int i = 0, n = repeated_string_piece_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_piece_.Get(i));
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_cord_.size());
  for (int i = 0, n = repeated_cord_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_cord_.Get(i));
  }

  // map<int32, int32> map_int32_int32 = 56;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_int32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_map_int32_int32().begin();
      it != this->_internal_map_int32_int32().end(); ++it) {
    total_size += TestAllTypesProto3_MapInt32Int32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, int64> map_int64_int64 = 57;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int64_int64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_map_int64_int64().begin();
      it != this->_internal_map_int64_int64().end(); ++it) {
    total_size += TestAllTypesProto3_MapInt64Int64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> map_uint32_uint32 = 58;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint32_uint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_map_uint32_uint32().begin();
      it != this->_internal_map_uint32_uint32().end(); ++it) {
    total_size += TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, uint64> map_uint64_uint64 = 59;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint64_uint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
      it = this->_internal_map_uint64_uint64().begin();
      it != this->_internal_map_uint64_uint64().end(); ++it) {
    total_size += TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint32, sint32> map_sint32_sint32 = 60;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sint32_sint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_map_sint32_sint32().begin();
      it != this->_internal_map_sint32_sint32().end(); ++it) {
    total_size += TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint64, sint64> map_sint64_sint64 = 61;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sint64_sint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_map_sint64_sint64().begin();
      it != this->_internal_map_sint64_sint64().end(); ++it) {
    total_size += TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed32, fixed32> map_fixed32_fixed32 = 62;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_fixed32_fixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_map_fixed32_fixed32().begin();
      it != this->_internal_map_fixed32_fixed32().end(); ++it) {
    total_size += TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed64, fixed64> map_fixed64_fixed64 = 63;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_fixed64_fixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
      it = this->_internal_map_fixed64_fixed64().begin();
      it != this->_internal_map_fixed64_fixed64().end(); ++it) {
    total_size += TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sfixed32_sfixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_map_sfixed32_sfixed32().begin();
      it != this->_internal_map_sfixed32_sfixed32().end(); ++it) {
    total_size += TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sfixed64_sfixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_map_sfixed64_sfixed64().begin();
      it != this->_internal_map_sfixed64_sfixed64().end(); ++it) {
    total_size += TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, float> map_int32_float = 66;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_float_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
      it = this->_internal_map_int32_float().begin();
      it != this->_internal_map_int32_float().end(); ++it) {
    total_size += TestAllTypesProto3_MapInt32FloatEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, double> map_int32_double = 67;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_double_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, double >::const_iterator
      it = this->_internal_map_int32_double().begin();
      it != this->_internal_map_int32_double().end(); ++it) {
    total_size += TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<bool, bool> map_bool_bool = 68;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_bool_bool_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_iterator
      it = this->_internal_map_bool_bool().begin();
      it != this->_internal_map_bool_bool().end(); ++it) {
    total_size += TestAllTypesProto3_MapBoolBoolEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> map_string_string = 69;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_string_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_string_string().begin();
      it != this->_internal_map_string_string().end(); ++it) {
    total_size += TestAllTypesProto3_MapStringStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bytes> map_string_bytes = 70;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_bytes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_string_bytes().begin();
      it != this->_internal_map_string_bytes().end(); ++it) {
    total_size += TestAllTypesProto3_MapStringBytesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage> map_string_nested_message = 71;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_nested_message_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage >::const_iterator
      it = this->_internal_map_string_nested_message().begin();
      it != this->_internal_map_string_nested_message().end(); ++it) {
    total_size += TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto3.ForeignMessage> map_string_foreign_message = 72;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_foreign_message_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::ForeignMessage >::const_iterator
      it = this->_internal_map_string_foreign_message().begin();
      it != this->_internal_map_string_foreign_message().end(); ++it) {
    total_size += TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum> map_string_nested_enum = 73;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_nested_enum_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedEnum >::const_iterator
      it = this->_internal_map_string_nested_enum().begin();
      it != this->_internal_map_string_nested_enum().end(); ++it) {
    total_size += TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto3.ForeignEnum> map_string_foreign_enum = 74;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_foreign_enum_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto3::ForeignEnum >::const_iterator
      it = this->_internal_map_string_foreign_enum().begin();
      it != this->_internal_map_string_foreign_enum().end(); ++it) {
    total_size += TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 packed_int32 = 75 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->packed_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 packed_int64 = 76 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->packed_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 packed_uint32 = 77 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->packed_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 packed_uint64 = 78 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->packed_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 packed_sint32 = 79 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->packed_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 packed_sint64 = 80 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->packed_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 packed_fixed32 = 81 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_fixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 packed_fixed64 = 82 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_fixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed32 packed_sfixed32 = 83 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sfixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed64 packed_sfixed64 = 84 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_sfixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float packed_float = 85 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_float_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double packed_double = 86 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_double_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool packed_bool = 87 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_bool_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum packed_nested_enum = 88 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_packed_nested_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_nested_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 unpacked_int32 = 89 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->unpacked_int32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_int32_size());
    total_size += data_size;
  }

  // repeated int64 unpacked_int64 = 90 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->unpacked_int64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_int64_size());
    total_size += data_size;
  }

  // repeated uint32 unpacked_uint32 = 91 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unpacked_uint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 unpacked_uint64 = 92 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->unpacked_uint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 unpacked_sint32 = 93 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->unpacked_sint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 unpacked_sint64 = 94 [packed = false];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->unpacked_sint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 unpacked_fixed32 = 95 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 unpacked_fixed64 = 96 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_sfixed64_size());
    total_size += data_size;
  }

  // repeated float unpacked_float = 99 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_float_size());
    total_size += data_size;
  }

  // repeated double unpacked_double = 100 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_double_size());
    total_size += data_size;
  }

  // repeated bool unpacked_bool = 101 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_bool_size());
    total_size += data_size;
  }

  // repeated .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum unpacked_nested_enum = 102 [packed = false];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_unpacked_nested_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .google.protobuf.BoolValue repeated_bool_wrapper = 211;
  total_size += 2UL * this->_internal_repeated_bool_wrapper_size();
  for (const auto& msg : this->repeated_bool_wrapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Int32Value repeated_int32_wrapper = 212;
  total_size += 2UL * this->_internal_repeated_int32_wrapper_size();
  for (const auto& msg : this->repeated_int32_wrapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Int64Value repeated_int64_wrapper = 213;
  total_size += 2UL * this->_internal_repeated_int64_wrapper_size();
  for (const auto& msg : this->repeated_int64_wrapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.UInt32Value repeated_uint32_wrapper = 214;
  total_size += 2UL * this->_internal_repeated_uint32_wrapper_size();
  for (const auto& msg : this->repeated_uint32_wrapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.UInt64Value repeated_uint64_wrapper = 215;
  total_size += 2UL * this->_internal_repeated_uint64_wrapper_size();
  for (const auto& msg : this->repeated_uint64_wrapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.FloatValue repeated_float_wrapper = 216;
  total_size += 2UL * this->_internal_repeated_float_wrapper_size();
  for (const auto& msg : this->repeated_float_wrapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.DoubleValue repeated_double_wrapper = 217;
  total_size += 2UL * this->_internal_repeated_double_wrapper_size();
  for (const auto& msg : this->repeated_double_wrapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.StringValue repeated_string_wrapper = 218;
  total_size += 2UL * this->_internal_repeated_string_wrapper_size();
  for (const auto& msg : this->repeated_string_wrapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.BytesValue repeated_bytes_wrapper = 219;
  total_size += 2UL * this->_internal_repeated_bytes_wrapper_size();
  for (const auto& msg : this->repeated_bytes_wrapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Duration repeated_duration = 311;
  total_size += 2UL * this->_internal_repeated_duration_size();
  for (const auto& msg : this->repeated_duration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Timestamp repeated_timestamp = 312;
  total_size += 2UL * this->_internal_repeated_timestamp_size();
  for (const auto& msg : this->repeated_timestamp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.FieldMask repeated_fieldmask = 313;
  total_size += 2UL * this->_internal_repeated_fieldmask_size();
  for (const auto& msg : this->repeated_fieldmask_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any repeated_any = 315;
  total_size += 2UL * this->_internal_repeated_any_size();
  for (const auto& msg : this->repeated_any_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Value repeated_value = 316;
  total_size += 2UL * this->_internal_repeated_value_size();
  for (const auto& msg : this->repeated_value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.ListValue repeated_list_value = 317;
  total_size += 2UL * this->_internal_repeated_list_value_size();
  for (const auto& msg : this->repeated_list_value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Struct repeated_struct = 324;
  total_size += 2UL * this->_internal_repeated_struct_size();
  for (const auto& msg : this->repeated_struct_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string optional_string = 14;
  if (this->optional_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_string());
  }

  // bytes optional_bytes = 15;
  if (this->optional_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_optional_bytes());
  }

  // string optional_string_piece = 24 [ctype = STRING_PIECE];
  if (this->optional_string_piece().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_string_piece());
  }

  // string optional_cord = 25 [ctype = CORD];
  if (this->optional_cord().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_cord());
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage optional_nested_message = 18;
  if (this->has_optional_nested_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_nested_message_);
  }

  // .protobuf_test_messages.proto3.ForeignMessage optional_foreign_message = 19;
  if (this->has_optional_foreign_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_foreign_message_);
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3 recursive_message = 27;
  if (this->has_recursive_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recursive_message_);
  }

  // .google.protobuf.BoolValue optional_bool_wrapper = 201;
  if (this->has_optional_bool_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_bool_wrapper_);
  }

  // .google.protobuf.Int32Value optional_int32_wrapper = 202;
  if (this->has_optional_int32_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_int32_wrapper_);
  }

  // .google.protobuf.Int64Value optional_int64_wrapper = 203;
  if (this->has_optional_int64_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_int64_wrapper_);
  }

  // .google.protobuf.UInt32Value optional_uint32_wrapper = 204;
  if (this->has_optional_uint32_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_uint32_wrapper_);
  }

  // .google.protobuf.UInt64Value optional_uint64_wrapper = 205;
  if (this->has_optional_uint64_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_uint64_wrapper_);
  }

  // .google.protobuf.FloatValue optional_float_wrapper = 206;
  if (this->has_optional_float_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_float_wrapper_);
  }

  // .google.protobuf.DoubleValue optional_double_wrapper = 207;
  if (this->has_optional_double_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_double_wrapper_);
  }

  // .google.protobuf.StringValue optional_string_wrapper = 208;
  if (this->has_optional_string_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_string_wrapper_);
  }

  // .google.protobuf.BytesValue optional_bytes_wrapper = 209;
  if (this->has_optional_bytes_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_bytes_wrapper_);
  }

  // .google.protobuf.Duration optional_duration = 301;
  if (this->has_optional_duration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_duration_);
  }

  // .google.protobuf.Timestamp optional_timestamp = 302;
  if (this->has_optional_timestamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_timestamp_);
  }

  // .google.protobuf.FieldMask optional_field_mask = 303;
  if (this->has_optional_field_mask()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_field_mask_);
  }

  // .google.protobuf.Struct optional_struct = 304;
  if (this->has_optional_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_struct_);
  }

  // .google.protobuf.Any optional_any = 305;
  if (this->has_optional_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_any_);
  }

  // .google.protobuf.Value optional_value = 306;
  if (this->has_optional_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_value_);
  }

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_optional_int64());
  }

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_optional_int32());
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_optional_uint32());
  }

  // uint64 optional_uint64 = 4;
  if (this->optional_uint64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_optional_uint64());
  }

  // sint64 optional_sint64 = 6;
  if (this->optional_sint64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_optional_sint64());
  }

  // sint32 optional_sint32 = 5;
  if (this->optional_sint32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_optional_sint32());
  }

  // fixed32 optional_fixed32 = 7;
  if (this->optional_fixed32() != 0) {
    total_size += 1 + 4;
  }

  // fixed64 optional_fixed64 = 8;
  if (this->optional_fixed64() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 optional_sfixed64 = 10;
  if (this->optional_sfixed64() != 0) {
    total_size += 1 + 8;
  }

  // sfixed32 optional_sfixed32 = 9;
  if (this->optional_sfixed32() != 0) {
    total_size += 1 + 4;
  }

  // float optional_float = 11;
  if (!(this->optional_float() <= 0 && this->optional_float() >= 0)) {
    total_size += 1 + 4;
  }

  // double optional_double = 12;
  if (!(this->optional_double() <= 0 && this->optional_double() >= 0)) {
    total_size += 1 + 8;
  }

  // bool optional_bool = 13;
  if (this->optional_bool() != 0) {
    total_size += 1 + 1;
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum optional_nested_enum = 21;
  if (this->optional_nested_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_nested_enum());
  }

  // .protobuf_test_messages.proto3.ForeignEnum optional_foreign_enum = 22;
  if (this->optional_foreign_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_foreign_enum());
  }

  // .protobuf_test_messages.proto3.TestAllTypesProto3.AliasedEnum optional_aliased_enum = 23;
  if (this->optional_aliased_enum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_aliased_enum());
  }

  // int32 fieldname1 = 401;
  if (this->fieldname1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fieldname1());
  }

  // int32 field_name2 = 402;
  if (this->field_name2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_name2());
  }

  // int32 _field_name3 = 403;
  if (this->_field_name3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal__field_name3());
  }

  // int32 field__name4_ = 404;
  if (this->field__name4_() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field__name4_());
  }

  // int32 field0name5 = 405;
  if (this->field0name5() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field0name5());
  }

  // int32 field_0_name6 = 406;
  if (this->field_0_name6() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_0_name6());
  }

  // int32 fieldName7 = 407;
  if (this->fieldname7() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fieldname7());
  }

  // int32 FieldName8 = 408;
  if (this->fieldname8() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fieldname8());
  }

  // int32 field_Name9 = 409;
  if (this->field_name9() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_name9());
  }

  // int32 Field_Name10 = 410;
  if (this->field_name10() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_name10());
  }

  // int32 FIELD_NAME11 = 411;
  if (this->field_name11() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_name11());
  }

  // int32 FIELD_name12 = 412;
  if (this->field_name12() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_name12());
  }

  // int32 __field_name13 = 413;
  if (this->__field_name13() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal___field_name13());
  }

  // int32 __Field_name14 = 414;
  if (this->__field_name14() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal___field_name14());
  }

  // int32 field__name15 = 415;
  if (this->field__name15() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field__name15());
  }

  // int32 field__Name16 = 416;
  if (this->field__name16() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field__name16());
  }

  // int32 field_name17__ = 417;
  if (this->field_name17__() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_name17__());
  }

  // int32 Field_name18__ = 418;
  if (this->field_name18__() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_name18__());
  }

  switch (oneof_field_case()) {
    // uint32 oneof_uint32 = 111;
    case kOneofUint32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage oneof_nested_message = 112;
    case kOneofNestedMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_nested_message_);
      break;
    }
    // string oneof_string = 113;
    case kOneofString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 114;
    case kOneofBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    // bool oneof_bool = 115;
    case kOneofBool: {
      total_size += 2 + 1;
      break;
    }
    // uint64 oneof_uint64 = 116;
    case kOneofUint64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_oneof_uint64());
      break;
    }
    // float oneof_float = 117;
    case kOneofFloat: {
      total_size += 2 + 4;
      break;
    }
    // double oneof_double = 118;
    case kOneofDouble: {
      total_size += 2 + 8;
      break;
    }
    // .protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum oneof_enum = 119;
    case kOneofEnum: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesProto3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto3.TestAllTypesProto3)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAllTypesProto3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAllTypesProto3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto3.TestAllTypesProto3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto3.TestAllTypesProto3)
    MergeFrom(*source);
  }
}

void TestAllTypesProto3::MergeFrom(const TestAllTypesProto3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto3.TestAllTypesProto3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  repeated_foreign_message_.MergeFrom(from.repeated_foreign_message_);
  repeated_nested_enum_.MergeFrom(from.repeated_nested_enum_);
  repeated_foreign_enum_.MergeFrom(from.repeated_foreign_enum_);
  repeated_string_piece_.MergeFrom(from.repeated_string_piece_);
  repeated_cord_.MergeFrom(from.repeated_cord_);
  map_int32_int32_.MergeFrom(from.map_int32_int32_);
  map_int64_int64_.MergeFrom(from.map_int64_int64_);
  map_uint32_uint32_.MergeFrom(from.map_uint32_uint32_);
  map_uint64_uint64_.MergeFrom(from.map_uint64_uint64_);
  map_sint32_sint32_.MergeFrom(from.map_sint32_sint32_);
  map_sint64_sint64_.MergeFrom(from.map_sint64_sint64_);
  map_fixed32_fixed32_.MergeFrom(from.map_fixed32_fixed32_);
  map_fixed64_fixed64_.MergeFrom(from.map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.MergeFrom(from.map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.MergeFrom(from.map_sfixed64_sfixed64_);
  map_int32_float_.MergeFrom(from.map_int32_float_);
  map_int32_double_.MergeFrom(from.map_int32_double_);
  map_bool_bool_.MergeFrom(from.map_bool_bool_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_string_bytes_.MergeFrom(from.map_string_bytes_);
  map_string_nested_message_.MergeFrom(from.map_string_nested_message_);
  map_string_foreign_message_.MergeFrom(from.map_string_foreign_message_);
  map_string_nested_enum_.MergeFrom(from.map_string_nested_enum_);
  map_string_foreign_enum_.MergeFrom(from.map_string_foreign_enum_);
  packed_int32_.MergeFrom(from.packed_int32_);
  packed_int64_.MergeFrom(from.packed_int64_);
  packed_uint32_.MergeFrom(from.packed_uint32_);
  packed_uint64_.MergeFrom(from.packed_uint64_);
  packed_sint32_.MergeFrom(from.packed_sint32_);
  packed_sint64_.MergeFrom(from.packed_sint64_);
  packed_fixed32_.MergeFrom(from.packed_fixed32_);
  packed_fixed64_.MergeFrom(from.packed_fixed64_);
  packed_sfixed32_.MergeFrom(from.packed_sfixed32_);
  packed_sfixed64_.MergeFrom(from.packed_sfixed64_);
  packed_float_.MergeFrom(from.packed_float_);
  packed_double_.MergeFrom(from.packed_double_);
  packed_bool_.MergeFrom(from.packed_bool_);
  packed_nested_enum_.MergeFrom(from.packed_nested_enum_);
  unpacked_int32_.MergeFrom(from.unpacked_int32_);
  unpacked_int64_.MergeFrom(from.unpacked_int64_);
  unpacked_uint32_.MergeFrom(from.unpacked_uint32_);
  unpacked_uint64_.MergeFrom(from.unpacked_uint64_);
  unpacked_sint32_.MergeFrom(from.unpacked_sint32_);
  unpacked_sint64_.MergeFrom(from.unpacked_sint64_);
  unpacked_fixed32_.MergeFrom(from.unpacked_fixed32_);
  unpacked_fixed64_.MergeFrom(from.unpacked_fixed64_);
  unpacked_sfixed32_.MergeFrom(from.unpacked_sfixed32_);
  unpacked_sfixed64_.MergeFrom(from.unpacked_sfixed64_);
  unpacked_float_.MergeFrom(from.unpacked_float_);
  unpacked_double_.MergeFrom(from.unpacked_double_);
  unpacked_bool_.MergeFrom(from.unpacked_bool_);
  unpacked_nested_enum_.MergeFrom(from.unpacked_nested_enum_);
  repeated_bool_wrapper_.MergeFrom(from.repeated_bool_wrapper_);
  repeated_int32_wrapper_.MergeFrom(from.repeated_int32_wrapper_);
  repeated_int64_wrapper_.MergeFrom(from.repeated_int64_wrapper_);
  repeated_uint32_wrapper_.MergeFrom(from.repeated_uint32_wrapper_);
  repeated_uint64_wrapper_.MergeFrom(from.repeated_uint64_wrapper_);
  repeated_float_wrapper_.MergeFrom(from.repeated_float_wrapper_);
  repeated_double_wrapper_.MergeFrom(from.repeated_double_wrapper_);
  repeated_string_wrapper_.MergeFrom(from.repeated_string_wrapper_);
  repeated_bytes_wrapper_.MergeFrom(from.repeated_bytes_wrapper_);
  repeated_duration_.MergeFrom(from.repeated_duration_);
  repeated_timestamp_.MergeFrom(from.repeated_timestamp_);
  repeated_fieldmask_.MergeFrom(from.repeated_fieldmask_);
  repeated_any_.MergeFrom(from.repeated_any_);
  repeated_value_.MergeFrom(from.repeated_value_);
  repeated_list_value_.MergeFrom(from.repeated_list_value_);
  repeated_struct_.MergeFrom(from.repeated_struct_);
  if (from.optional_string().size() > 0) {
    _internal_set_optional_string(from._internal_optional_string());
  }
  if (from.optional_bytes().size() > 0) {
    _internal_set_optional_bytes(from._internal_optional_bytes());
  }
  if (from.optional_string_piece().size() > 0) {
    _internal_set_optional_string_piece(from._internal_optional_string_piece());
  }
  if (from.optional_cord().size() > 0) {
    _internal_set_optional_cord(from._internal_optional_cord());
  }
  if (from.has_optional_nested_message()) {
    _internal_mutable_optional_nested_message()->::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage::MergeFrom(from._internal_optional_nested_message());
  }
  if (from.has_optional_foreign_message()) {
    _internal_mutable_optional_foreign_message()->::protobuf_test_messages::proto3::ForeignMessage::MergeFrom(from._internal_optional_foreign_message());
  }
  if (from.has_recursive_message()) {
    _internal_mutable_recursive_message()->::protobuf_test_messages::proto3::TestAllTypesProto3::MergeFrom(from._internal_recursive_message());
  }
  if (from.has_optional_bool_wrapper()) {
    _internal_mutable_optional_bool_wrapper()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_optional_bool_wrapper());
  }
  if (from.has_optional_int32_wrapper()) {
    _internal_mutable_optional_int32_wrapper()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_optional_int32_wrapper());
  }
  if (from.has_optional_int64_wrapper()) {
    _internal_mutable_optional_int64_wrapper()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_optional_int64_wrapper());
  }
  if (from.has_optional_uint32_wrapper()) {
    _internal_mutable_optional_uint32_wrapper()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_optional_uint32_wrapper());
  }
  if (from.has_optional_uint64_wrapper()) {
    _internal_mutable_optional_uint64_wrapper()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_optional_uint64_wrapper());
  }
  if (from.has_optional_float_wrapper()) {
    _internal_mutable_optional_float_wrapper()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_optional_float_wrapper());
  }
  if (from.has_optional_double_wrapper()) {
    _internal_mutable_optional_double_wrapper()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_optional_double_wrapper());
  }
  if (from.has_optional_string_wrapper()) {
    _internal_mutable_optional_string_wrapper()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_optional_string_wrapper());
  }
  if (from.has_optional_bytes_wrapper()) {
    _internal_mutable_optional_bytes_wrapper()->PROTOBUF_NAMESPACE_ID::BytesValue::MergeFrom(from._internal_optional_bytes_wrapper());
  }
  if (from.has_optional_duration()) {
    _internal_mutable_optional_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_optional_duration());
  }
  if (from.has_optional_timestamp()) {
    _internal_mutable_optional_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_optional_timestamp());
  }
  if (from.has_optional_field_mask()) {
    _internal_mutable_optional_field_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_optional_field_mask());
  }
  if (from.has_optional_struct()) {
    _internal_mutable_optional_struct()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_optional_struct());
  }
  if (from.has_optional_any()) {
    _internal_mutable_optional_any()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_optional_any());
  }
  if (from.has_optional_value()) {
    _internal_mutable_optional_value()->PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_optional_value());
  }
  if (from.optional_int64() != 0) {
    _internal_set_optional_int64(from._internal_optional_int64());
  }
  if (from.optional_int32() != 0) {
    _internal_set_optional_int32(from._internal_optional_int32());
  }
  if (from.optional_uint32() != 0) {
    _internal_set_optional_uint32(from._internal_optional_uint32());
  }
  if (from.optional_uint64() != 0) {
    _internal_set_optional_uint64(from._internal_optional_uint64());
  }
  if (from.optional_sint64() != 0) {
    _internal_set_optional_sint64(from._internal_optional_sint64());
  }
  if (from.optional_sint32() != 0) {
    _internal_set_optional_sint32(from._internal_optional_sint32());
  }
  if (from.optional_fixed32() != 0) {
    _internal_set_optional_fixed32(from._internal_optional_fixed32());
  }
  if (from.optional_fixed64() != 0) {
    _internal_set_optional_fixed64(from._internal_optional_fixed64());
  }
  if (from.optional_sfixed64() != 0) {
    _internal_set_optional_sfixed64(from._internal_optional_sfixed64());
  }
  if (from.optional_sfixed32() != 0) {
    _internal_set_optional_sfixed32(from._internal_optional_sfixed32());
  }
  if (!(from.optional_float() <= 0 && from.optional_float() >= 0)) {
    _internal_set_optional_float(from._internal_optional_float());
  }
  if (!(from.optional_double() <= 0 && from.optional_double() >= 0)) {
    _internal_set_optional_double(from._internal_optional_double());
  }
  if (from.optional_bool() != 0) {
    _internal_set_optional_bool(from._internal_optional_bool());
  }
  if (from.optional_nested_enum() != 0) {
    _internal_set_optional_nested_enum(from._internal_optional_nested_enum());
  }
  if (from.optional_foreign_enum() != 0) {
    _internal_set_optional_foreign_enum(from._internal_optional_foreign_enum());
  }
  if (from.optional_aliased_enum() != 0) {
    _internal_set_optional_aliased_enum(from._internal_optional_aliased_enum());
  }
  if (from.fieldname1() != 0) {
    _internal_set_fieldname1(from._internal_fieldname1());
  }
  if (from.field_name2() != 0) {
    _internal_set_field_name2(from._internal_field_name2());
  }
  if (from._field_name3() != 0) {
    _internal_set__field_name3(from._internal__field_name3());
  }
  if (from.field__name4_() != 0) {
    _internal_set_field__name4_(from._internal_field__name4_());
  }
  if (from.field0name5() != 0) {
    _internal_set_field0name5(from._internal_field0name5());
  }
  if (from.field_0_name6() != 0) {
    _internal_set_field_0_name6(from._internal_field_0_name6());
  }
  if (from.fieldname7() != 0) {
    _internal_set_fieldname7(from._internal_fieldname7());
  }
  if (from.fieldname8() != 0) {
    _internal_set_fieldname8(from._internal_fieldname8());
  }
  if (from.field_name9() != 0) {
    _internal_set_field_name9(from._internal_field_name9());
  }
  if (from.field_name10() != 0) {
    _internal_set_field_name10(from._internal_field_name10());
  }
  if (from.field_name11() != 0) {
    _internal_set_field_name11(from._internal_field_name11());
  }
  if (from.field_name12() != 0) {
    _internal_set_field_name12(from._internal_field_name12());
  }
  if (from.__field_name13() != 0) {
    _internal_set___field_name13(from._internal___field_name13());
  }
  if (from.__field_name14() != 0) {
    _internal_set___field_name14(from._internal___field_name14());
  }
  if (from.field__name15() != 0) {
    _internal_set_field__name15(from._internal_field__name15());
  }
  if (from.field__name16() != 0) {
    _internal_set_field__name16(from._internal_field__name16());
  }
  if (from.field_name17__() != 0) {
    _internal_set_field_name17__(from._internal_field_name17__());
  }
  if (from.field_name18__() != 0) {
    _internal_set_field_name18__(from._internal_field_name18__());
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofBool: {
      _internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofUint64: {
      _internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofFloat: {
      _internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofDouble: {
      _internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
}

void TestAllTypesProto3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto3.TestAllTypesProto3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAllTypesProto3::CopyFrom(const TestAllTypesProto3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto3.TestAllTypesProto3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto3::IsInitialized() const {
  return true;
}

void TestAllTypesProto3::InternalSwap(TestAllTypesProto3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_sint32_.InternalSwap(&other->repeated_sint32_);
  repeated_sint64_.InternalSwap(&other->repeated_sint64_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_sfixed32_.InternalSwap(&other->repeated_sfixed32_);
  repeated_sfixed64_.InternalSwap(&other->repeated_sfixed64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  repeated_nested_message_.InternalSwap(&other->repeated_nested_message_);
  repeated_foreign_message_.InternalSwap(&other->repeated_foreign_message_);
  repeated_nested_enum_.InternalSwap(&other->repeated_nested_enum_);
  repeated_foreign_enum_.InternalSwap(&other->repeated_foreign_enum_);
  repeated_string_piece_.InternalSwap(&other->repeated_string_piece_);
  repeated_cord_.InternalSwap(&other->repeated_cord_);
  map_int32_int32_.Swap(&other->map_int32_int32_);
  map_int64_int64_.Swap(&other->map_int64_int64_);
  map_uint32_uint32_.Swap(&other->map_uint32_uint32_);
  map_uint64_uint64_.Swap(&other->map_uint64_uint64_);
  map_sint32_sint32_.Swap(&other->map_sint32_sint32_);
  map_sint64_sint64_.Swap(&other->map_sint64_sint64_);
  map_fixed32_fixed32_.Swap(&other->map_fixed32_fixed32_);
  map_fixed64_fixed64_.Swap(&other->map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.Swap(&other->map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.Swap(&other->map_sfixed64_sfixed64_);
  map_int32_float_.Swap(&other->map_int32_float_);
  map_int32_double_.Swap(&other->map_int32_double_);
  map_bool_bool_.Swap(&other->map_bool_bool_);
  map_string_string_.Swap(&other->map_string_string_);
  map_string_bytes_.Swap(&other->map_string_bytes_);
  map_string_nested_message_.Swap(&other->map_string_nested_message_);
  map_string_foreign_message_.Swap(&other->map_string_foreign_message_);
  map_string_nested_enum_.Swap(&other->map_string_nested_enum_);
  map_string_foreign_enum_.Swap(&other->map_string_foreign_enum_);
  packed_int32_.InternalSwap(&other->packed_int32_);
  packed_int64_.InternalSwap(&other->packed_int64_);
  packed_uint32_.InternalSwap(&other->packed_uint32_);
  packed_uint64_.InternalSwap(&other->packed_uint64_);
  packed_sint32_.InternalSwap(&other->packed_sint32_);
  packed_sint64_.InternalSwap(&other->packed_sint64_);
  packed_fixed32_.InternalSwap(&other->packed_fixed32_);
  packed_fixed64_.InternalSwap(&other->packed_fixed64_);
  packed_sfixed32_.InternalSwap(&other->packed_sfixed32_);
  packed_sfixed64_.InternalSwap(&other->packed_sfixed64_);
  packed_float_.InternalSwap(&other->packed_float_);
  packed_double_.InternalSwap(&other->packed_double_);
  packed_bool_.InternalSwap(&other->packed_bool_);
  packed_nested_enum_.InternalSwap(&other->packed_nested_enum_);
  unpacked_int32_.InternalSwap(&other->unpacked_int32_);
  unpacked_int64_.InternalSwap(&other->unpacked_int64_);
  unpacked_uint32_.InternalSwap(&other->unpacked_uint32_);
  unpacked_uint64_.InternalSwap(&other->unpacked_uint64_);
  unpacked_sint32_.InternalSwap(&other->unpacked_sint32_);
  unpacked_sint64_.InternalSwap(&other->unpacked_sint64_);
  unpacked_fixed32_.InternalSwap(&other->unpacked_fixed32_);
  unpacked_fixed64_.InternalSwap(&other->unpacked_fixed64_);
  unpacked_sfixed32_.InternalSwap(&other->unpacked_sfixed32_);
  unpacked_sfixed64_.InternalSwap(&other->unpacked_sfixed64_);
  unpacked_float_.InternalSwap(&other->unpacked_float_);
  unpacked_double_.InternalSwap(&other->unpacked_double_);
  unpacked_bool_.InternalSwap(&other->unpacked_bool_);
  unpacked_nested_enum_.InternalSwap(&other->unpacked_nested_enum_);
  repeated_bool_wrapper_.InternalSwap(&other->repeated_bool_wrapper_);
  repeated_int32_wrapper_.InternalSwap(&other->repeated_int32_wrapper_);
  repeated_int64_wrapper_.InternalSwap(&other->repeated_int64_wrapper_);
  repeated_uint32_wrapper_.InternalSwap(&other->repeated_uint32_wrapper_);
  repeated_uint64_wrapper_.InternalSwap(&other->repeated_uint64_wrapper_);
  repeated_float_wrapper_.InternalSwap(&other->repeated_float_wrapper_);
  repeated_double_wrapper_.InternalSwap(&other->repeated_double_wrapper_);
  repeated_string_wrapper_.InternalSwap(&other->repeated_string_wrapper_);
  repeated_bytes_wrapper_.InternalSwap(&other->repeated_bytes_wrapper_);
  repeated_duration_.InternalSwap(&other->repeated_duration_);
  repeated_timestamp_.InternalSwap(&other->repeated_timestamp_);
  repeated_fieldmask_.InternalSwap(&other->repeated_fieldmask_);
  repeated_any_.InternalSwap(&other->repeated_any_);
  repeated_value_.InternalSwap(&other->repeated_value_);
  repeated_list_value_.InternalSwap(&other->repeated_list_value_);
  repeated_struct_.InternalSwap(&other->repeated_struct_);
  optional_string_.Swap(&other->optional_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_bytes_.Swap(&other->optional_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_string_piece_.Swap(&other->optional_string_piece_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_cord_.Swap(&other->optional_cord_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypesProto3, field_name18___)
      + sizeof(TestAllTypesProto3::field_name18___)
      - PROTOBUF_FIELD_OFFSET(TestAllTypesProto3, optional_nested_message_)>(
          reinterpret_cast<char*>(&optional_nested_message_),
          reinterpret_cast<char*>(&other->optional_nested_message_));
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForeignMessage::InitAsDefaultInstance() {
}
class ForeignMessage::_Internal {
 public:
};

ForeignMessage::ForeignMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto3.ForeignMessage)
}
ForeignMessage::ForeignMessage(const ForeignMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  c_ = from.c_;
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto3.ForeignMessage)
}

void ForeignMessage::SharedCtor() {
  c_ = 0;
}

ForeignMessage::~ForeignMessage() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto3.ForeignMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForeignMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ForeignMessage::ArenaDtor(void* object) {
  ForeignMessage* _this = reinterpret_cast< ForeignMessage* >(object);
  (void)_this;
}
void ForeignMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForeignMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForeignMessage& ForeignMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForeignMessage_google_2fprotobuf_2ftest_5fmessages_5fproto3_2eproto.base);
  return *internal_default_instance();
}


void ForeignMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto3.ForeignMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForeignMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForeignMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto3.ForeignMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 c = 1;
  if (this->c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto3.ForeignMessage)
  return target;
}

size_t ForeignMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto3.ForeignMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 c = 1;
  if (this->c() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_c());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForeignMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test_messages.proto3.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ForeignMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForeignMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test_messages.proto3.ForeignMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test_messages.proto3.ForeignMessage)
    MergeFrom(*source);
  }
}

void ForeignMessage::MergeFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto3.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.c() != 0) {
    _internal_set_c(from._internal_c());
  }
}

void ForeignMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test_messages.proto3.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForeignMessage::CopyFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto3.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessage::IsInitialized() const {
  return true;
}

void ForeignMessage::InternalSwap(ForeignMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(c_, other->c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForeignMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto3
}  // namespace protobuf_test_messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32Int32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt64Int64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint32Uint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapUint64Uint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint32Sint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSint64Sint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed32Fixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapFixed64Fixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed32Sfixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapSfixed64Sfixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32FloatEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapInt32DoubleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapBoolBoolEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringStringEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringBytesEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringBytesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringBytesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedMessageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignMessageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringNestedEnumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3_MapStringForeignEnumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::TestAllTypesProto3* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::TestAllTypesProto3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::TestAllTypesProto3 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto3::ForeignMessage* Arena::CreateMaybeMessage< ::protobuf_test_messages::proto3::ForeignMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto3::ForeignMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
